var search_data = {"index":{"searchIndex":["acceptedevent","actionmailer","mailhelper","admincontroller","admindecorator","adminhelper","analyticsservices","answer","answerdecorator","answerscontroller","answershelper","applicationcontroller","abstractcontroller","oauth","timeout","applicationhelper","array","articulator","authentication","authenticationscontroller","authenticationshelper","authorreferent","backgroundable","classmethods","bannedtag","basepresenter","bmhelper","bootstrap","frameworknotfound","rails","engine","bootstraphelper","candihash","cardhelper","cardpresentation","collectedevent","collectible","collectibleassociator","collectiblecontroller","collectibledecorator","collectiblehelper","collectiblepresenter","collectiblesearch","collectibleservices","collectioncache","collectioncontroller","collectionsuggestion","collectionsuggestionpresenter","collectionshelper","commentable","classmethods","controllerauthentication","controllerdeference","controllerutils","counts","coursereferent","culinarytermreferent","customfailure","defaultsearch","deferredrequest","definitionreference","dialogpanes","dialogshelper","dietreferent","discoveredevent","dishreferent","edition","editiondecorator","editionscontroller","editionshelper","emailhelper","en_wikibooks_org_scraper","entityassociator","entityshowpresenter","epitaphreferent","errorscontroller","errorshelper","eventnotice","expression","expressiondecorator","expressionservices","expressionvalidator","expressionscontroller","expressionshelper","extractparams","classmethods","feed","feedassociator","feeddecorator","feedentriescontroller","feedentrieshelper","feedentry","feedentrydecorator","feedpresenter","feedservices","feedback","feedbackcontroller","feedbackhelper","feedbackmailer","feedsassociatedcache","feedsassociatedpresenter","feedscontentscache","feedscontentspresenter","feedscontroller","feedshelper","feedsindexcache","feedsindexpresenter","feedsshowcache","feedsshowpresenter","feedstable","filteredpresenter","filteredpresenterhelper","finder","finderdecorator","finderservices","finderscontroller","findershelper","fixnum","flashhelper","formshelper","genrereferent","gleaning","gleaningdecorator","gleaningshelper","globalcollectionsuggestion","globalcollectionsuggestionpresenter","hash","homepagereference","imagereference","imageshelper","ingredientreferent","integerscache","integerscontroller","integersdecorator","integershelper","interestreferent","invitationacceptedevent","invitationacceptedeventarticulator","invitationdivertedevent","invitationrespondedevent","invitationresponseevent","invitationsentevent","invitationsenteventcreatearticulator","invitationscontroller","invitationshelper","itemhelper","linkhelper","list","listassociator","listdecorator","listitem","listpresenter","listreferent","listserializer","listservices","listedevent","listsassociatedcache","listsassociatedpresenter","listscontentscache","listscontentspresenter","listscontroller","listsdecorator","listshelper","listsindexcache","listsindexpresenter","listsshowcache","listsshowpresenter","liststable","loginevent","masonryhelper","mercurydata","mercurypagedecorator","modeldecorator","modelsearch","myconstants","navtabshelper","nestedattributeshelper","nestedbenchmark","nilclass","notificationpresenter","notificationshelper","notifshelper","notifssection","nullresults","nutrientreferent","object","occasionreferent","orgoptions","pageref","pagerefdecorator","pagerefpresenter","pagerefservices","pagerefscontroller","pagerefshelper","pageletshelper","pagerefable","classmethods","pagescontroller","pageshelper","panelhelper","pantrysectionreferent","partition","passwordscontroller","passwordshelper","picpickerhelper","picable","classmethods","postedevent","privatesubscription","processreferent","product","publishedevent","querifyhelper","queryhelper","querytags","questionreferent","rpcrypt","rpdom","rpdevisemailer","rating","ratingscontroller","ratingshelper","rcpref","rcprefdecorator","rcprefservices","rcprefshelper","recentcollectionsuggestion","recentcollectionsuggestionpresenter","recipe","recipedecorator","recipepresenter","recipeservices","recipesuggestion","recipesuggestionpresenter","recipesassociatedcache","recipesassociatedpresenter","recipescontroller","recipeshelper","redirectcontroller","redirectdecorator","redirecthelper","refereeservices","reference","referencecache","referencedecorator","referenceservices","referencescontroller","referenceshelper","referencesindexcache","referencesindexpresenter","referencestable","referent","referentcache","referentdecorator","referentpresenter","referentrelation","referentrelationvalidator","referentservices","referentvalidator","referentsassociatedcache","referentsassociatedpresenter","referentscontroller","referentshelper","referentsindexcache","referentsindexpresenter","referentstable","referment","refermentdecorator","refermentservices","refermentscontroller","refermentshelper","referrable","registrar","registrationscontroller","registrationshelper","reloader","sse","responseservices","result","resulttype","resulttyping","results","resultscache","rolereferent","rpevent","rpeventdecorator","rpeventscontroller","rpeventshelper","rpmailer","sass","script","functions","scale","scalescontroller","scaleshelper","scraper","scrapercontroller","scraperdecorator","scraperhelper","searchaggregator","searchcontroller","searchdecorator","searchhelper","searchindexcache","searchindexpresenter","searchnode","seekerhelper","sessionscontroller","sessionshelper","sharedevent","sharedeventcreatearticulator","signupevent","signupeventarticulator","site","siteassociator","sitedecorator","sitepresenter","siteservices","sitesassociatedcache","sitesassociatedpresenter","sitescontroller","sitesfeedscache","sitesfeedspresenter","siteshelper","sitesindexcache","sitesindexpresenter","sitesrecipescache","sitesshowcache","sitestable","sourcereferent","spriteshelper","storesectionreferent","streamcontroller","streamhelper","streampresentation","string","stringshelper","suggestion","suggestiondecorator","suggestionpresenter","suggestionservices","suggestionscontroller","suggestionshelper","tablehelper","tablepresenter","tag","tagassociator","tagdecorator","tagowner","tagownerservices","tagpresenter","tagsearch","classmethods","tagselection","tagselectiondecorator","tagselectionscontroller","tagselectionshelper","tagservices","tagsuggestion","tagsuggestionpresenter","taggable","taggableassociator","taggablehelper","taggablesearch","tagging","taggingdecorator","taggingservices","tagsassociatedcache","tagsassociatedpresenter","tagscache","tagscontroller","tagshelper","tagsindexcache","tagsindexpresenter","tagstable","tagset","tagsetdecorator","tagsethelper","tagsetscontroller","tagsetshelper","templatedecorator","templatehelper","templateer","timereferent","tokeninput","tokeninputhelper","toolreferent","toutedevent","triggershelper","typemap","typeable","classmethods","unitreferent","uploaderhelper","user","userassociator","usercollectedlistscache","usercontentpresenter","userdecorator","userfeedscache","userfriendscache","userfunc","userlistscache","userownedlistscache","userpresenter","userrelation","userrelationvalidator","userservices","usersuggestion","usersuggestionpresenter","users","notificationscontroller","notificationswithdevisecontroller","subscriptionscontroller","subscriptionswithdevisecontroller","usersassociatedcache","usersbiglistcache","usersbiglistpresenter","userscollectioncache","userscollectionpresenter","userscontroller","activerecord","usershelper","usersindexcache","usersindexpresenter","usersrecentcache","usersrecentpresenter","usersshowcache","userstable","viewparams","vote","votedecorator","voteable","votescontroller","voteshelper","www_bbc_co_uk_scraper","www_seriouseats_com_scraper","domstrip()","qa()","[]()","about()","about()","about()","absolutize()","absorb()","absorb()","absorb()","absorb()","absorb()","absorb()","absorb()","absorb()","absorb()","absorb()","absorb()","absorb()","accept_if()","accordions()","act()","act()","action_summary()","active_record_class_from_association_method_name()","add_child()","add_expression()","add_expression=()","add_followee()","add_to_list()","admin()","admin_view?()","admit_user()","adopt()","adopt_gleaning()","adopt_gleaning()","adopt_gleaning()","affiliates()","affiliates()","after()","after()","after()","after()","after_accept_path_for()","after_gleaning()","after_invite_path_for()","after_sign_out_path_for()","aggregate_user_table_row()","aliases()","aliases_to?()","all_types()","allowable()","amend()","analyze()","analyze_request()","ancestor_path_to()","answers_to?()","applicable_finders()","applies_to_url()","apply()","apply_omniauth()","approve()","approved()","approved()","arity()","arm_seeker_stream()","articulates()","assert()","assert()","assert()","assert()","assert()","assert_feed()","assert_image_for_referent()","assert_kind()","assert_query()","assert_referent()","assert_referment()","assert_result()","assert_tag()","assert_tagging()","assert_words()","asset_url()","assimilate_finder_results()","associate()","associate()","associate()","associate()","associated()","associated()","associated_lists()","associated_lists_with_status()","at_left()","attrib_name()","attribute_choices()","attribute_for()","attribute_name_for()","attributes_hash()","attrmap()","attrmap()","attrmap()","attrmap()","attrmap_inverted()","auth_possible()","autobuild()","availability_query()","available?()","backgroundable()","bad!()","bail()","banner()","base_class_name()","base_object()","bbc_chef_home_page()","bbc_chef_recipes_page()","bbc_chefs_atoz_page()","bbc_chefs_page()","bbc_collection_home_page()","bbc_course_recipes_page()","bbc_cuisine_home_page()","bbc_cuisine_recipes_page()","bbc_cuisines_page()","bbc_define_collection()","bbc_diet_home_page()","bbc_diet_recipes_page()","bbc_dish_recipes_page()","bbc_dishes_atoz_page()","bbc_dishes_page()","bbc_food_home_page()","bbc_food_page()","bbc_ingredients_by_letter()","bbc_ingredients_page()","bbc_keyword_recipes_page()","bbc_occasion_home_page()","bbc_occasion_recipes_page()","bbc_occasions_page()","bbc_programme_home_page()","bbc_programme_recipes_page()","bbc_programmes_page()","bbc_recipe_home_page()","bbc_recipes_page()","bbc_season_home_page()","bbc_seasons_page()","bbc_tag_recipes_page()","bbc_technique_home_page()","bbc_technique_recipes_page()","bbc_techniques_page()","be_collected()","before()","before()","biglist()","bkg_kill()","bkg_land()","bkg_land()","bkg_land()","bkg_land()","bkg_land!()","bkg_launch()","bkg_launch()","bkg_launch()","block_to_submit()","body_partial()","body_partial()","bookmarklet()","bookmarklet_script()","bootstrap_button_options()","bootstrap_css_include_tag()","bootstrap_js_include_tag()","buffer_test()","build()","build()","build()","build_by_url()","build_child()","build_child_of_class()","build_query()","build_resource()","build_root()","button_to_submit()","buttons()","by_name()","cache_and_partition()","cached_ref()","cached_ref_valid?()","can_absorb()","cancel_fix()","cancel_fix_if()","canonical_expression=()","capture()","capture()","card_aspect()","card_aspect()","card_aspect()","card_aspect()","card_aspect()","card_aspect()","card_aspect()","card_aspect()","card_aspect_editor()","card_aspect_editor_replacement()","card_aspect_enclosure()","card_aspect_rendered()","card_aspect_replacement()","card_aspect_selector()","card_aspects()","card_aspects()","card_aspects()","card_aspects()","card_aspects()","card_aspects()","card_aspects()","card_aspects()","card_aspects_filtered()","card_avatar()","card_avatar()","card_avatar()","card_avatar()","card_avatar()","card_avatar?()","card_avatar_accompaniment()","card_avatar_accompaniment()","card_avatar_accompaniment()","card_avatar_column()","card_avatar_column()","card_header()","card_header_content()","card_header_content()","card_header_content()","card_header_content()","card_homelink()","card_homelink()","card_homelink()","card_label()","card_label()","card_label()","card_label()","card_label()","card_ncolumns()","card_ncolumns()","card_ncolumns()","card_show_avatar()","card_show_avatar()","card_subhead()","card_subhead_content()","card_subhead_content()","card_video()","card_video()","card_video?()","change_tag()","change_tag()","change_tag()","change_tag()","check_flash()","check_for_notifications()","check_popup()","checkbox_menu_item_label()","child_attenuation()","child_ids()","child_ids()","child_ids_of_tags()","child_referents()","child_tag_tokens()","child_tag_tokens=()","child_tags()","children()","choice_alert()","clashing_tag()","clashing_tag?()","class_for()","class_name()","class_name()","classify_listtags()","cleanpath()","cleanupstr()","clear_all()","clip()","close()","collect()","collect()","collect()","collect_button()","collect_button()","collected_by?()","collected_lists()","collectible()","collectible_buttons_all()","collectible_buttons_available()","collectible_buttons_panel()","collectible_buttons_panel_replacement()","collectible_collect_button()","collectible_collect_button_replacement()","collectible_collected?()","collectible_comment()","collectible_comment=()","collectible_destroy_button()","collectible_edit_button()","collectible_editpic_button()","collectible_from_card?()","collectible_from_card?()","collectible_from_card?()","collectible_info_icon()","collectible_lists_button()","collectible_masonry_datablock()","collectible_private()","collectible_private=()","collectible_share_button()","collectible_show_thumbnail()","collectible_source()","collectible_source_link()","collectible_tablink()","collectible_tag_button()","collectible_taglist()","collectible_title_link()","collectible_tools_menu()","collectible_tools_menu_replacement()","collectible_user_id()","collectible_user_id=()","collectible_vote_buttons()","collection()","collection_entities()","collection_itemtitle()","collection_link()","collection_lists()","collection_name()","collection_pointers()","collection_scope()","collection_size()","collection_updater()","collections_navtab()","collectors()","column()","comment()","comment_for()","commentable()","condense_strings()","const_for()","contact()","container_selector()","content()","content()","contents()","contents()","contents_scope()","control()","controller_model_class()","controller_model_name()","converttypesbyindex()","convert_all_to_references()","convert_references()","convert_tagtype()","convert_to_sti()","cookmark()","cookmark_count()","copy_tag()","copy_tag()","correct()","correct_url_or_destroy()","count_report()","count_tag()","count_tag()","count_tag()","count_tag()","count_tag()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","css_class()","cssclass()","current()","current_user_or_guest()","current_user_or_guest_id()","data()","data()","data_to_add_fields()","debug_dump()","decodehtml()","decorate_path()","decrypt()","default_next_path()","defer_invitation()","defer_request()","defer_welcome_dialogs()","deferred_request()","define()","define_linked_tag()","definitive?()","delete_followee()","dependent_page_refs()","description()","description()","description()","description()","description()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","detached?()","detached?()","devise_mapping()","di_select()","dialog?()","dialogfooter()","dialogheader()","dialog_answer_button()","dialog_cancel_button()","dialog_close_button()","dialog_has_pane()","dialog_pane()","dialog_pane_buttons()","dialog_pane_list()","dialog_pane_list()","dialog_pane_spec()","dialog_pane_spec()","dialog_submit_button()","digested_reference()","dim_scale()","direct_child_ids()","direct_object()","direct_object()","direct_object()","direct_parent_ids()","display_style()","divclass()","divert()","divide()","do_notification()","do_notifs()","dom_id()","dom_id()","dom_id()","domain()","domain_from_url()","done!()","done?()","downvotes()","drop()","due?()","due_for_update()","dump()","dump()","dump()","dump()","dump?()","during()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","edit_button()","edit_button()","edit_class()","edit_path()","editable_entity()","editable_from_card?()","editable_from_card?()","editable_from_card?()","editable_tagtypes()","editor()","editpic()","element_id()","element_item()","element_name()","elide_meaning()","eligible_tagtypes()","eligible_tagtypes()","eligible_tagtypes()","eligible_tagtypes()","eligible_tagtypes()","eligible_tagtypes()","email_image_tag()","emplace_leader()","empty_msg()","encodehtml()","encrypt()","ensure_site()","ensure_status()","ensure_tagtypes()","ensure_unique()","ensure_unique()","ensure_unique()","entities()","entities()","entity=()","entity_approval()","entity_approval_replacement()","entity_count()","entity_links()","entity_params()","entity_scope()","entries()","entry_ids()","entry_ids()","err_breakdown()","error()","error()","event_trigger_data()","exclude()","exclude_by()","excluded_tag_types()","exists?()","express()","express()","express_base_errors()","express_error_context()","express_resource_errors()","expression()","expression_ids()","expression_link()","expression_name()","expression_tags_from_ids()","extend_fields()","extensions_to_classes()","extensions_to_selector()","external_link()","external_link()","external_link()","external_link()","extract()","extract()","extract1()","extract_all()","extract_params()","failure()","failure()","fake_url()","faq()","feed()","feed_buttons_replacement()","feed_collectible_buttons()","feed_entries_report()","feed_entries_status()","feed_entry()","feed_entry_replacement()","feed_list_element_class()","feed_status_report()","feed_status_report_replacement()","feed_status_summary()","feed_subscribe_button()","feed_update_button()","feed_wait_msg()","feedback()","feedback()","feedback_init()","feedback_link()","feedback_tab()","feeds()","feeds_navtab()","feedtype_selection()","feedtypename()","fetch()","fetch()","fetch()","field_count()","field_count()","field_label_counted()","field_name()","field_value()","field_value()","fields()","filter_field()","filter_type_selector()","filter_type_selector()","filtered_presenter_header_label()","filtered_presenter_header_label_replacement()","filtered_presenter_org_buttons()","filtered_presenter_org_buttons_replacement()","filtered_presenter_panel_results()","filtered_presenter_panel_results_placeholder()","filtered_presenter_panel_results_replacement()","filtered_presenter_table_results()","filtered_presenter_table_results_placeholder()","filtered_presenter_table_results_replacement()","filtered_presenter_tail()","filtered_taggings()","filtered_tags()","filtered_tags()","find_by_invitee()","find_by_selector()","find_by_url()","find_first_by_auth_conditions()","find_for()","find_or_create()","find_or_create()","find_or_create()","find_or_create_for()","find_or_initialize()","find_or_initialize()","find_or_initialize()","find_or_make()","find_view()","finderlabels()","finderlabels()","finderlabels()","finderlabels()","findings=()","first_collector()","first_collector()","first_member()","fix_expression_tokens()","fix_fragment()","fix_names()","fix_redundant()","fix_root()","fix_type()","fix_user()","flash_all()","flash_notifications_div()","flash_notifications_replacement()","flash_notify()","flash_one()","flash_strings()","follow()","follow_url()","followee_tokens=()","followees_list()","follows?()","form_actions()","form_errors_helper()","format_card_summary()","format_class()","format_table_tree()","formname()","formname()","formname=()","formnum()","forms()","formsym()","formsym()","found()","friend_candidates()","friend_lists_on_tag()","friends_navtab()","from_extractions()","full_size()","gen_intervals()","generate()","get_attribute_from_omniauth()","get_input()","get_response()","getpic()","glean()","glean()","glean()","glean()","glean_atag()","glean_names()","glean_names()","gleaning_attributes=()","gleaning_attributes=()","gleaning_field()","gleaning_field_class()","gleaning_field_declaration()","gleaning_field_enclosure()","gleaning_field_replacement()","global_querytags()","global_querytags()","globstring()","go()","go()","good!()","grab_recipe_link()","grabtag()","guest()","guest?()","guest_id()","h()","handle()","handle_invitation()","handle_unverified_request()","handler()","handler()","handler()","handler()","hard_save()","has_editable()","has_image()","has_in_collection?()","has_query?()","has_query?()","has_worker?()","header()","header_partial()","header_partial()","header_partial()","header_result()","headered_list_items()","hit_on_attributes()","hit_on_finder()","home()","home=()","home_navtab()","home_page?()","homelink()","host()","host_forbidden()","host_url()","hover_menu()","human_name()","human_name()","human_name()","human_name()","id_path()","identify()","ie_hex_str()","if_empty()","if_present()","if_present()","if_present()","image()","image()","image()","image=()","image=()","image=()","image_class()","image_enclosure()","image_from_decorator()","image_with_error_recovery()","images()","imgdata()","imgdata()","imgdata()","imgdata()","imgdata()","imgurl()","imgurl()","include()","include()","include?()","include_by()","included()","included()","included()","included()","included()","included()","included()","included_tag_tokens=()","incoming_attributes()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index_to_type()","indexing_url()","indirect_object()","individual_tagtypes()","individual_tagtypes()","individual_tagtypes()","ingreds()","init()","init_child_search()","init_children()","init_children()","init_children()","init_children()","init_children()","init_children()","init_children()","init_children()","init_search()","init_stream()","initialize()","injector?()","injector_cancel_button()","injector_dialog()","input()","input_html_classes()","invitation_acceptance_label()","invitation_diversion_link()","invitation_token=()","invitee_tokens=()","isprivate()","is_for()","is_injector()","is_viewer?()","is_viewer?()","item_container_selector()","item_deleter()","item_deleters()","item_insertion()","item_insertions()","item_mode()","item_mode()","item_partial_class()","item_partial_name()","item_partial_selector()","item_preflight()","item_replacement()","item_replacements()","item_to_render()","item_wrapper_selector()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscope()","itemscopes()","itemscopes()","itemscopes()","itemstubs()","join_urls()","jquery_include_tag()","js_finders()","kind_as_fixnum()","kind_selections()","kind_to_name()","label()","label_choices()","labelled_avatar()","labelled_quantity()","labels()","labelsym()","launch_update()","letsencrypt()","lexical_similars()","link_to_add_fields()","link_to_dialog()","link_to_redirect()","link_to_remove_fields()","link_to_submit()","linkpath()","linkto_options()","list()","list()","list_availability()","list_lists_with_status()","list_menu_item()","list_menu_item_replacement()","list_tags()","list_tags_for_collectible()","lists()","liststrs()","load()","load()","load!()","localename()","localename()","localename=()","localenum()","locales()","localesym()","localesym()","logged_in?()","login_choices()","login_required()","logo()","longname()","lookup()","lookup()","make()","make_parent_of()","make_parent_of()","make_polymorphic()","make_ready()","match()","match()","match()","match_friends()","match_friends()","max_index()","max_window_size()","max_window_size()","max_window_size()","max_window_size()","max_window_size()","max_window_size()","meaning()","meaning=()","meaning_ids()","measure()","member_since()","menu()","mercury_attributes()","merge_counts()","merge_counts()","merge_word_strings()","message_key()","message_key()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","misc_tags_name_expanded()","misc_tagtypes()","modal_body()","modal_dialog()","modal_footer()","modal_header()","model_class()","model_name()","move()","my_lists_navtab()","na_menu()","name()","name()","name()","name()","name()","name()","name()","name()","name=()","name=()","names()","names()","navmenu_id()","navmenu_replacement()","navtab()","navtab_id()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_child()","newsletter()","next_index()","next_item()","next_members()","next_path()","next_range()","next_range()","nmatches()","no_action_error()","normalizename()","normalize_and_test_url()","normalize_url()","normalize_urls()","normalized_name()","normalized_uri()","not_found()","notes()","notifiable_path()","notifiable_path()","notification_token=()","notifications_format()","notifications_format_subject()","notifications_locator()","notifications_replacement()","notifs_replacement()","notifs_section()","nuke_message()","num()","num_cookmarks()","nvotes()","object_path()","object_type()","omniauth_pending()","open()","options_for()","or_alias()","or_fallback()","or_fallback()","orderingscope()","orderingscope()","orderingscope()","orderingscope()","orderingscope()","orderingscope()","orderingscope()","orderingscope()","orderingscope()","orderingscope()","org=()","org_buttons()","org_buttons()","org_options()","orig_save()","originator()","orphantagid()","owned_lists()","owned_taggings()","owned_tags()","ownership_status()","page()","page_or_modal()","page_ref()","page_ref_identifier()","page_refs()","page_refs_of_kind()","page_title()","page_with_trigger()","page_with_trigger()","pagelet_body_id()","pagelet_body_replacement()","pagelet_body_selector()","pagelet_class()","pagelet_followup()","pagerefable()","pageurl()","pageurl()","pane_dialog()","panel_body()","panel_body_replacement()","panel_collapse_button()","panel_collapse_button_replacement()","panel_expand_link()","panel_label()","panel_label()","panel_label()","panel_org_menu()","panel_org_menu_replacement()","panel_suggestions()","panel_suggestions_placeholder()","panel_suggestions_replacement()","panel_title()","panel_title()","panel_title()","panel_title()","param()","param_key()","params()","params()","params_needed()","params_needed()","params_needed()","params_needed()","params_needed()","params_needed()","params_needed()","params_needed()","params_needed()","params_needed()","params_needed()","parent_ids()","parent_ids()","parent_ids_of_tags()","parent_tag_tokens()","parent_tag_tokens=()","parent_tags()","parent_tags_of_tags()","parents()","parse()","parse_referment_params()","parse_tokens()","partition()","partition_of()","partition_on_scope?()","partition_range()","password_required?()","path_from_url()","paths_to()","pct_positive()","pending()","pending?()","pending_invitee()","pending_modal_trigger()","pending_notification()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform()","perform_without_dj()","permission_denied()","pic_class()","pic_field()","pic_picker_magic()","pic_picker_select_list()","pic_preview_img_id()","pic_preview_input_id()","picable()","picable_attribute()","picref()","picuri()","picurl()","picurl=()","pin()","pin_button()","pin_navmenu()","ping()","placeholder()","plural_name()","polite_name()","polymorphic_link()","pop()","popup()","post()","post()","post()","post()","post()","preload()","present()","present()","present()","present_comments()","present_field()","present_page_ref()","present_table()","presentation_partial()","presentation_partials()","printable_notifier_name()","processing!()","profile()","propagate_privacy()","provider_name()","proxify()","public?()","pull()","pulled_tag_ids()","pulled_tags()","push()","push()","push_new_associate()","push_state()","push_state()","qa()","qa()","qa()","qa()","querify()","querify_block()","querify_button()","querify_item()","querify_link()","querify_radiobutton()","query()","query_to_hash()","querytags()","querytags?()","querytags?()","question_section()","queued?()","rating_attributes=()","reachable?()","read_only()","read_only()","ready?()","recent()","recipe()","recipe_comments_div()","recipe_grid_element_class()","recipe_ids()","recipe_item()","recipe_list_element_class()","recipe_list_element_golink_class()","recipe_popup()","recipe_tags_div()","recipe_title_div()","recipe_uncollect_button()","recipes()","recipes()","redirect_params()","redirect_to_modal()","redirect_url()","ref_affiliates_summary()","ref_check()","ref_check()","ref_check()","ref_children_summary()","ref_expressions_summary()","ref_if_any()","ref_parents_summary()","reference()","reference_expressions()","referent()","referent_class_for_tagtype()","referent_identifier()","referent_summary()","referents()","referral_path()","refresh()","refresh()","refute()","refute_tagging()","register()","register_list()","register_recipe()","register_tag()","registry()","related()","related_tag_tokens()","related_tag_tokens=()","related_tags()","remove()","remove()","render()","render_fp()","render_item()","render_item_unwrapped()","render_optional_error_file()","render_params()","render_seeker_item()","render_template()","render_to_string()","rendered_aspects()","report()","report_cookie_string()","report_entity()","report_items()","report_session()","require_no_authentication()","require_no_authentication()","rescue_action_in_public()","reset()","resolve()","resource()","resource_errors_to_flash()","resource_errors_to_flash_now()","resource_from_invitation_token()","resource_name()","respond()","response_service()","restore_tokens()","restore_tokens()","result_for()","result_for()","result_type()","result_type()","result_type()","result_type()","result_type()","result_type()","result_type()","result_type()","result_type()","result_type()","result_type()","result_type()","result_type()","result_type()","result_type()","results()","results()","results_for()","results_for()","results_partial()","results_path()","retrieve_or_build()","retypeable?()","revise()","ribbon()","ribbon()","ribbon()","ribbon()","ribbon()","robotags()","role()","role_select()","role_symbols()","root()","root()","root=()","rows()","rp_url()","safe_destroy()","safe_parse()","safe_partition()","safe_uri_join()","salutation()","sample_page()","sample_page()","sanitize_url()","save()","scope_count()","scope_slice()","scope_slice()","scrape()","scrape()","scrape()","scrape()","scrape_for_feeds()","scrape_page()","scrub_args()","se_category_page()","se_tag_page()","search_result=()","sections()","seeker_table()","select_render()","selectable_kinds()","selector()","semantic_neighborhood()","sendmail()","set_children()","set_form()","set_locale()","set_tag_ids()","setup_response_service()","sharable_from_card?()","sharable_from_card?()","sharable_from_card?()","share_button()","share_button()","shared()","shared=()","sharing_invitation_instructions()","shed_tag()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show()","show_card?()","show_card?()","show_comments()","show_comments?()","show_definitions()","show_edition_item()","show_or_edit()","show_or_edit()","show_page()","show_page()","show_sample()","show_scale()","show_tags()","show_tree()","sibling_ids_of_tags()","sibling_types()","sibling_types()","sibling_types()","sibling_types()","sibling_views()","sign_in_and_redirect()","sign_up()","similar_ids()","similars()","simple_modal()","simple_pagelet()","simple_submit_form_for()","single_user_table_row()","singular_name()","site()","site()","site()","site()","site()","site_feeds_summary()","site_glean_button()","site_nuke_button()","site_pagerefs_summary()","site_service()","site_similars()","site_summaries()","sites()","slice_cache()","smartrender()","sort()","sort_field()","sort_table_name()","sort_table_name()","sourcehome()","sourcehome()","sourcehome()","sourcehome()","sourcename()","sourcename()","sourcename()","sourcename()","sourcename()","splitstr()","sprite()","sprite_glyph()","sprites()","stab_at_sample()","stab_at_samples()","store()","stored_location_for()","stores?()","stores?()","stream()","stream_count()","stream_element()","stream_element_class()","stream_element_package()","stream_element_replacement()","stream_element_selector()","stream_id()","stream_id()","stream_id()","stream_id()","stream_id()","stream_link()","stream_loadlink()","stream_params_next()","stream_params_null()","string_to_class()","stripped_name()","strjoin()","strmatch()","strscopes()","strscopes()","strscopes()","strscopes()","strscopes()","strscopes()","strscopes()","strscopes()","strscopes()","strscopes()","study_users()","subclass_for()","subject()","subject()","submit_form_for()","subpaths()","subscriptions_list()","subtype()","subtypes()","subtypes()","subtypes()","subtypes()","success()","suggests()","suggests()","suggests?()","suggests?()","sugtime()","summarize()","summarize_alltags()","summarize_aspect()","summarize_ratings()","summarize_ref_name()","summarize_referent()","summarize_tag_similar()","summary()","super_id()","super_id=()","superuser()","supported_org_options()","supported_org_options()","supported_org_options()","supported_org_options()","supported_org_options()","supported_org_options()","supported_org_options()","supported_org_options()","supported_org_options()","supported_org_options()","supported_org_options()","suspend()","sym()","sync()","synonym_ids()","synonym_ids()","synonym_ids_of_tags()","synonyms()","synonyms()","table()","table_collection_selector()","table_headers()","table_headers()","table_headers()","table_headers()","table_headers()","table_headers()","table_headers()","table_name()","table_out()","table_summaries()","tabulate()","tag()","tag()","tag_button()","tag_def_label()","tag_filter_header()","tag_item()","tag_list()","tag_path()","tag_select()","tag_selection_form()","tag_selection_form_replacement()","tag_token()","tag_token=()","tag_token=()","tag_tokens_to_referents()","tag_with()","tag_with()","taggable()","tagged_entities()","tagged_entities()","taggee_ids()","taggees()","taggees_table_summary()","tagging_fields()","tagging_query()","tagging_tags()","tagging_tags_of_type()","tagging_user_id=()","taggings()","tagjoin()","taglist()","tagname()","tagqa()","tags()","tags()","tags()","tags_from_referents()","tags_tabset()","tagserv()","tail_partial()","take()","tell_me_more()","template_element()","template_link()","test_link()","test_url()","testflight()","thumbdata()","thumbdata=()","tidyname()","tidy_name()","time_check()","time_check_log()","time_lookup()","time_lookup()","time_lookup()","timeout?()","timeout_error()","title()","title()","title()","title()","title()","title()","title()","title()","title()","title=()","title=()","title=()","title_of()","title_of()","to_boolean()","to_boolean()","to_s()","to_s()","toggle()","token_input_div()","token_input_element()","token_input_field()","token_input_query()","token_input_tag()","tools_menu()","tools_menu()","tools_menu()","touch()","touch()","touch_date()","touch_date_class()","touch_date_elmt()","touchpath()","translate_params_for()","trigger_event()","trigger_pending_modal()","trigger_pending_results()","triggered_form()","trim_title()","try_mercury()","try_substitute()","type()","type()","type_selections()","type_selections()","type_to_class()","type_to_class()","typeable()","typeclass()","typeclass()","typedname()","typematch()","typename()","typename()","typename()","typename()","typenum()","typenum()","typenum()","typenum=()","typenum=()","typesym()","typesym()","typesym()","typify()","uid=()","uid=()","uncapitalize()","uncollect()","uncollect()","unsubscribe()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update_and_decorate()","update_attributes()","update_from_feed()","update_from_feed_continuously()","update_now()","uploader_data()","uploader_field()","upvotes()","uri()","url()","url()","url=()","url_attribute()","url_path_query()","url_query()","user()","user()","user_can?()","user_can?()","user_follow_button()","user_follow_button_replacement()","user_follower_count()","user_reference()","user_stats()","user_subclass()","user_to_user()","valid?()","valid_range()","valid_url()","validate()","validate()","validate()","validate()","validate_link()","validate_token()","value_as_text()","value_as_text()","verb()","verb()","verb()","verb()","verify()","video_embed()","viewer()","virgin!()","visible_lists()","visible_tags()","visible_tags_of_kind()","votable_from_card?()","votable_from_card?()","votable_from_card?()","vote()","vote()","vote_buttons()","vote_buttons()","vote_buttons_replacement()","vote_link()","vote_params()","what()","wikipedia_cookbook_ingredients()","window=()","window=()","windowsize()","with_article()","with_format()","with_subroot_of()","write()","yumm()","readme"],"longSearchIndex":["acceptedevent","actionmailer","actionmailer::mailhelper","admincontroller","admindecorator","adminhelper","analyticsservices","answer","answerdecorator","answerscontroller","answershelper","applicationcontroller","applicationcontroller::abstractcontroller","applicationcontroller::oauth","applicationcontroller::timeout","applicationhelper","array","articulator","authentication","authenticationscontroller","authenticationshelper","authorreferent","backgroundable","backgroundable::classmethods","bannedtag","basepresenter","bmhelper","bootstrap","bootstrap::frameworknotfound","bootstrap::rails","bootstrap::rails::engine","bootstraphelper","candihash","cardhelper","cardpresentation","collectedevent","collectible","collectibleassociator","collectiblecontroller","collectibledecorator","collectiblehelper","collectiblepresenter","collectiblesearch","collectibleservices","collectioncache","collectioncontroller","collectionsuggestion","collectionsuggestionpresenter","collectionshelper","commentable","commentable::classmethods","controllerauthentication","controllerdeference","controllerutils","counts","coursereferent","culinarytermreferent","customfailure","defaultsearch","deferredrequest","definitionreference","dialogpanes","dialogshelper","dietreferent","discoveredevent","dishreferent","edition","editiondecorator","editionscontroller","editionshelper","emailhelper","en_wikibooks_org_scraper","entityassociator","entityshowpresenter","epitaphreferent","errorscontroller","errorshelper","eventnotice","expression","expressiondecorator","expressionservices","expressionvalidator","expressionscontroller","expressionshelper","extractparams","extractparams::classmethods","feed","feedassociator","feeddecorator","feedentriescontroller","feedentrieshelper","feedentry","feedentrydecorator","feedpresenter","feedservices","feedback","feedbackcontroller","feedbackhelper","feedbackmailer","feedsassociatedcache","feedsassociatedpresenter","feedscontentscache","feedscontentspresenter","feedscontroller","feedshelper","feedsindexcache","feedsindexpresenter","feedsshowcache","feedsshowpresenter","feedstable","filteredpresenter","filteredpresenterhelper","finder","finderdecorator","finderservices","finderscontroller","findershelper","fixnum","flashhelper","formshelper","genrereferent","gleaning","gleaningdecorator","gleaningshelper","globalcollectionsuggestion","globalcollectionsuggestionpresenter","hash","homepagereference","imagereference","imageshelper","ingredientreferent","integerscache","integerscontroller","integersdecorator","integershelper","interestreferent","invitationacceptedevent","invitationacceptedeventarticulator","invitationdivertedevent","invitationrespondedevent","invitationresponseevent","invitationsentevent","invitationsenteventcreatearticulator","invitationscontroller","invitationshelper","itemhelper","linkhelper","list","listassociator","listdecorator","listitem","listpresenter","listreferent","listserializer","listservices","listedevent","listsassociatedcache","listsassociatedpresenter","listscontentscache","listscontentspresenter","listscontroller","listsdecorator","listshelper","listsindexcache","listsindexpresenter","listsshowcache","listsshowpresenter","liststable","loginevent","masonryhelper","mercurydata","mercurypagedecorator","modeldecorator","modelsearch","myconstants","navtabshelper","nestedattributeshelper","nestedbenchmark","nilclass","notificationpresenter","notificationshelper","notifshelper","notifssection","nullresults","nutrientreferent","object","occasionreferent","orgoptions","pageref","pagerefdecorator","pagerefpresenter","pagerefservices","pagerefscontroller","pagerefshelper","pageletshelper","pagerefable","pagerefable::classmethods","pagescontroller","pageshelper","panelhelper","pantrysectionreferent","partition","passwordscontroller","passwordshelper","picpickerhelper","picable","picable::classmethods","postedevent","privatesubscription","processreferent","product","publishedevent","querifyhelper","queryhelper","querytags","questionreferent","rpcrypt","rpdom","rpdevisemailer","rating","ratingscontroller","ratingshelper","rcpref","rcprefdecorator","rcprefservices","rcprefshelper","recentcollectionsuggestion","recentcollectionsuggestionpresenter","recipe","recipedecorator","recipepresenter","recipeservices","recipesuggestion","recipesuggestionpresenter","recipesassociatedcache","recipesassociatedpresenter","recipescontroller","recipeshelper","redirectcontroller","redirectdecorator","redirecthelper","refereeservices","reference","referencecache","referencedecorator","referenceservices","referencescontroller","referenceshelper","referencesindexcache","referencesindexpresenter","referencestable","referent","referentcache","referentdecorator","referentpresenter","referentrelation","referentrelationvalidator","referentservices","referentvalidator","referentsassociatedcache","referentsassociatedpresenter","referentscontroller","referentshelper","referentsindexcache","referentsindexpresenter","referentstable","referment","refermentdecorator","refermentservices","refermentscontroller","refermentshelper","referrable","registrar","registrationscontroller","registrationshelper","reloader","reloader::sse","responseservices","result","resulttype","resulttyping","results","resultscache","rolereferent","rpevent","rpeventdecorator","rpeventscontroller","rpeventshelper","rpmailer","sass","sass::script","sass::script::functions","scale","scalescontroller","scaleshelper","scraper","scrapercontroller","scraperdecorator","scraperhelper","searchaggregator","searchcontroller","searchdecorator","searchhelper","searchindexcache","searchindexpresenter","searchnode","seekerhelper","sessionscontroller","sessionshelper","sharedevent","sharedeventcreatearticulator","signupevent","signupeventarticulator","site","siteassociator","sitedecorator","sitepresenter","siteservices","sitesassociatedcache","sitesassociatedpresenter","sitescontroller","sitesfeedscache","sitesfeedspresenter","siteshelper","sitesindexcache","sitesindexpresenter","sitesrecipescache","sitesshowcache","sitestable","sourcereferent","spriteshelper","storesectionreferent","streamcontroller","streamhelper","streampresentation","string","stringshelper","suggestion","suggestiondecorator","suggestionpresenter","suggestionservices","suggestionscontroller","suggestionshelper","tablehelper","tablepresenter","tag","tagassociator","tagdecorator","tagowner","tagownerservices","tagpresenter","tagsearch","tagsearch::classmethods","tagselection","tagselectiondecorator","tagselectionscontroller","tagselectionshelper","tagservices","tagsuggestion","tagsuggestionpresenter","taggable","taggableassociator","taggablehelper","taggablesearch","tagging","taggingdecorator","taggingservices","tagsassociatedcache","tagsassociatedpresenter","tagscache","tagscontroller","tagshelper","tagsindexcache","tagsindexpresenter","tagstable","tagset","tagsetdecorator","tagsethelper","tagsetscontroller","tagsetshelper","templatedecorator","templatehelper","templateer","timereferent","tokeninput","tokeninputhelper","toolreferent","toutedevent","triggershelper","typemap","typeable","typeable::classmethods","unitreferent","uploaderhelper","user","userassociator","usercollectedlistscache","usercontentpresenter","userdecorator","userfeedscache","userfriendscache","userfunc","userlistscache","userownedlistscache","userpresenter","userrelation","userrelationvalidator","userservices","usersuggestion","usersuggestionpresenter","users","users::notificationscontroller","users::notificationswithdevisecontroller","users::subscriptionscontroller","users::subscriptionswithdevisecontroller","usersassociatedcache","usersbiglistcache","usersbiglistpresenter","userscollectioncache","userscollectionpresenter","userscontroller","userscontroller::activerecord","usershelper","usersindexcache","usersindexpresenter","usersrecentcache","usersrecentpresenter","usersshowcache","userstable","viewparams","vote","votedecorator","voteable","votescontroller","voteshelper","www_bbc_co_uk_scraper","www_seriouseats_com_scraper","rpdom::domstrip()","siteservices::qa()","counts#[]()","pagescontroller#about()","tagpresenter#about()","userpresenter#about()","registrar#absolutize()","collectible#absorb()","collectiblecontroller#absorb()","pagerefservices#absorb()","pagerefable#absorb()","picable#absorb()","recipe#absorb()","referent#absorb()","site#absorb()","tag#absorb()","taggable#absorb()","user#absorb()","voteable#absorb()","listservices::accept_if()","www_bbc_co_uk_scraper#accordions()","rpevent#act()","sharedevent#act()","controllerutils#action_summary()","object#active_record_class_from_association_method_name()","referentscontroller#add_child()","referent#add_expression()","referent#add_expression=()","user#add_followee()","registrar::add_to_list()","pagescontroller#admin()","responseservices#admin_view?()","tag#admit_user()","pagerefservices#adopt()","recipe#adopt_gleaning()","site#adopt_gleaning()","taggable#adopt_gleaning()","referent#affiliates()","sourcereferent#affiliates()","backgroundable#after()","feed#after()","imagereference#after()","rpevent::after()","invitationscontroller#after_accept_path_for()","sitedecorator#after_gleaning()","invitationscontroller#after_invite_path_for()","sessionscontroller#after_sign_out_path_for()","adminhelper#aggregate_user_table_row()","tag#aliases()","userdecorator#aliases_to?()","typeable::classmethods#all_types()","rpdom::allowable()","responseservices#amend()","analyticsservices::analyze()","object#analyze_request()","referentservices#ancestor_path_to()","pageref#answers_to?()","finderservices::applicable_finders()","site::applies_to_url()","candihash#apply()","user#apply_omniauth()","applicationcontroller#approve()","feedsindexcache#approved()","sitesindexcache#approved()","collectibledecorator#arity()","seekerhelper#arm_seeker_stream()","articulator::articulates()","list::assert()","pagerefservices::assert()","scraper::assert()","tag::assert()","taggingservices#assert()","site#assert_feed()","referenceservices::assert_image_for_referent()","refereeservices#assert_kind()","object#assert_query()","pageref#assert_referent()","referentservices#assert_referment()","results#assert_result()","userdecorator#assert_tag()","taggable#assert_tagging()","string#assert_words()","sass::script::functions#asset_url()","gleaning#assimilate_finder_results()","listservices::associate()","referent#associate()","sourcereferent#associate()","tagscontroller#associate()","collectiblecontroller#associated()","tagscontroller#associated()","listservices::associated_lists()","listservices::associated_lists_with_status()","nestedbenchmark::at_left()","typeable::classmethods#attrib_name()","finderservices::attribute_choices()","modeldecorator#attribute_for()","collectibledecorator#attribute_name_for()","finder#attributes_hash()","modeldecorator::attrmap()","pagerefdecorator::attrmap()","recipedecorator::attrmap()","sitedecorator::attrmap()","modeldecorator::attrmap_inverted()","authenticationshelper#auth_possible()","entityassociator::autobuild()","listservices::availability_query()","tag::available?()","backgroundable::classmethods#backgroundable()","backgroundable#bad!()","referentservices::bail()","edition#banner()","modeldecorator#base_class_name()","modeldecorator#base_object()","www_bbc_co_uk_scraper#bbc_chef_home_page()","www_bbc_co_uk_scraper#bbc_chef_recipes_page()","www_bbc_co_uk_scraper#bbc_chefs_atoz_page()","www_bbc_co_uk_scraper#bbc_chefs_page()","www_bbc_co_uk_scraper#bbc_collection_home_page()","www_bbc_co_uk_scraper#bbc_course_recipes_page()","www_bbc_co_uk_scraper#bbc_cuisine_home_page()","www_bbc_co_uk_scraper#bbc_cuisine_recipes_page()","www_bbc_co_uk_scraper#bbc_cuisines_page()","www_bbc_co_uk_scraper#bbc_define_collection()","www_bbc_co_uk_scraper#bbc_diet_home_page()","www_bbc_co_uk_scraper#bbc_diet_recipes_page()","www_bbc_co_uk_scraper#bbc_dish_recipes_page()","www_bbc_co_uk_scraper#bbc_dishes_atoz_page()","www_bbc_co_uk_scraper#bbc_dishes_page()","www_bbc_co_uk_scraper#bbc_food_home_page()","www_bbc_co_uk_scraper#bbc_food_page()","www_bbc_co_uk_scraper#bbc_ingredients_by_letter()","www_bbc_co_uk_scraper#bbc_ingredients_page()","www_bbc_co_uk_scraper#bbc_keyword_recipes_page()","www_bbc_co_uk_scraper#bbc_occasion_home_page()","www_bbc_co_uk_scraper#bbc_occasion_recipes_page()","www_bbc_co_uk_scraper#bbc_occasions_page()","www_bbc_co_uk_scraper#bbc_programme_home_page()","www_bbc_co_uk_scraper#bbc_programme_recipes_page()","www_bbc_co_uk_scraper#bbc_programmes_page()","www_bbc_co_uk_scraper#bbc_recipe_home_page()","www_bbc_co_uk_scraper#bbc_recipes_page()","www_bbc_co_uk_scraper#bbc_season_home_page()","www_bbc_co_uk_scraper#bbc_seasons_page()","www_bbc_co_uk_scraper#bbc_tag_recipes_page()","www_bbc_co_uk_scraper#bbc_technique_home_page()","www_bbc_co_uk_scraper#bbc_technique_recipes_page()","www_bbc_co_uk_scraper#bbc_techniques_page()","collectible#be_collected()","backgroundable#before()","rpevent::before()","userscontroller#biglist()","backgroundable#bkg_kill()","backgroundable#bkg_land()","imagereference#bkg_land()","pageref#bkg_land()","pagerefable#bkg_land()","backgroundable#bkg_land!()","backgroundable#bkg_launch()","imagereference#bkg_launch()","pageref#bkg_launch()","linkhelper#block_to_submit()","filteredpresenter#body_partial()","usercontentpresenter#body_partial()","applicationhelper#bookmarklet()","applicationhelper#bookmarklet_script()","bootstraphelper#bootstrap_button_options()","applicationhelper#bootstrap_css_include_tag()","applicationhelper#bootstrap_js_include_tag()","streamcontroller#buffer_test()","collectibledecorator::build()","entityassociator::build()","filteredpresenter::build()","pageref::build_by_url()","entityassociator#build_child()","entityassociator#build_child_of_class()","object#build_query()","applicationcontroller#build_resource()","entityassociator::build_root()","linkhelper#button_to_submit()","collectiblepresenter#buttons()","user::by_name()","resultscache#cache_and_partition()","collectible#cached_ref()","collectible#cached_ref_valid?()","tag#can_absorb()","tagdecorator#cancel_fix()","tagdecorator#cancel_fix_if()","referent#canonical_expression=()","collectiblecontroller#capture()","recipescontroller#capture()","cardpresentation#card_aspect()","collectiblepresenter#card_aspect()","listpresenter#card_aspect()","recipepresenter#card_aspect()","referentpresenter#card_aspect()","sitepresenter#card_aspect()","tagpresenter#card_aspect()","userpresenter#card_aspect()","cardpresentation#card_aspect_editor()","cardpresentation#card_aspect_editor_replacement()","cardpresentation#card_aspect_enclosure()","cardpresentation#card_aspect_rendered()","cardpresentation#card_aspect_replacement()","cardpresentation#card_aspect_selector()","cardpresentation#card_aspects()","collectiblepresenter#card_aspects()","listpresenter#card_aspects()","recipepresenter#card_aspects()","referentpresenter#card_aspects()","sitepresenter#card_aspects()","tagpresenter#card_aspects()","userpresenter#card_aspects()","cardpresentation#card_aspects_filtered()","cardpresentation#card_avatar()","collectiblepresenter#card_avatar()","recipepresenter#card_avatar()","tagpresenter#card_avatar()","userpresenter#card_avatar()","tagpresenter#card_avatar?()","collectiblepresenter#card_avatar_accompaniment()","listpresenter#card_avatar_accompaniment()","userpresenter#card_avatar_accompaniment()","cardpresentation#card_avatar_column()","collectiblepresenter#card_avatar_column()","cardpresentation#card_header()","cardpresentation#card_header_content()","sitepresenter#card_header_content()","tagpresenter#card_header_content()","userpresenter#card_header_content()","cardpresentation#card_homelink()","tagpresenter#card_homelink()","userpresenter#card_homelink()","basepresenter#card_label()","feedpresenter#card_label()","listpresenter#card_label()","recipepresenter#card_label()","userpresenter#card_label()","cardpresentation#card_ncolumns()","tagpresenter#card_ncolumns()","userpresenter#card_ncolumns()","collectiblepresenter#card_show_avatar()","recipepresenter#card_show_avatar()","cardpresentation#card_subhead()","cardpresentation#card_subhead_content()","listpresenter#card_subhead_content()","cardpresentation#card_video()","recipepresenter#card_video()","cardpresentation#card_video?()","expressionservices::change_tag()","referentservices::change_tag()","tagownerservices::change_tag()","taggingservices::change_tag()","applicationcontroller#check_flash()","notificationshelper#check_for_notifications()","applicationhelper#check_popup()","navtabshelper#checkbox_menu_item_label()","searchnode#child_attenuation()","tagservices::child_ids()","tagservices#child_ids()","expressionservices::child_ids_of_tags()","tagservices#child_referents()","referent#child_tag_tokens()","referent#child_tag_tokens=()","referent#child_tags()","tagservices#children()","dialogshelper#choice_alert()","tag#clashing_tag()","tag#clashing_tag?()","articulator::class_for()","modeldecorator#class_name()","pagerefdecorator#class_name()","usershelper#classify_listtags()","object#cleanpath()","finderservices#cleanupstr()","scraper::clear_all()","partition#clip()","reloader::sse#close()","collectiblecontroller#collect()","pagescontroller#collect()","user#collect()","cardpresentation#collect_button()","collectiblepresenter#collect_button()","listsdecorator#collected_by?()","userdecorator#collected_lists()","user::collectible()","collectiblehelper#collectible_buttons_all()","collectiblehelper#collectible_buttons_available()","collectiblehelper#collectible_buttons_panel()","collectiblehelper#collectible_buttons_panel_replacement()","collectiblehelper#collectible_collect_button()","collectiblehelper#collectible_collect_button_replacement()","collectible#collectible_collected?()","collectible#collectible_comment()","collectible#collectible_comment=()","collectiblehelper#collectible_destroy_button()","collectiblehelper#collectible_edit_button()","collectiblehelper#collectible_editpic_button()","cardpresentation#collectible_from_card?()","collectiblepresenter#collectible_from_card?()","userpresenter#collectible_from_card?()","recipeshelper#collectible_info_icon()","collectiblehelper#collectible_lists_button()","recipeshelper#collectible_masonry_datablock()","collectible#collectible_private()","collectible#collectible_private=()","collectiblehelper#collectible_share_button()","recipeshelper#collectible_show_thumbnail()","collectiblehelper#collectible_source()","recipeshelper#collectible_source_link()","recipeshelper#collectible_tablink()","collectiblehelper#collectible_tag_button()","collectiblehelper#collectible_taglist()","recipeshelper#collectible_title_link()","collectiblehelper#collectible_tools_menu()","collectiblehelper#collectible_tools_menu_replacement()","collectible#collectible_user_id()","collectible#collectible_user_id=()","collectiblehelper#collectible_vote_buttons()","userscontroller#collection()","userdecorator#collection_entities()","collectionshelper#collection_itemtitle()","collectiblehelper#collection_link()","userdecorator#collection_lists()","modeldecorator#collection_name()","userdecorator#collection_pointers()","user#collection_scope()","user#collection_size()","collectionshelper#collection_updater()","navtabshelper#collections_navtab()","collectibleservices#collectors()","cardpresentation#column()","collectible#comment()","user#comment_for()","commentable::classmethods#commentable()","object#condense_strings()","object#const_for()","pagescontroller#contact()","responseservices#container_selector()","basepresenter#content()","pagerefpresenter#content()","feedscontroller#contents()","listscontroller#contents()","site#contents_scope()","admincontroller#control()","responseservices#controller_model_class()","responseservices#controller_model_name()","tag::converttypesbyindex()","userservices::convert_all_to_references()","siteservices#convert_references()","tokeninputhelper#convert_tagtype()","referenceservices::convert_to_sti()","pagescontroller#cookmark()","recipeshelper#cookmark_count()","expressionservices::copy_tag()","tagownerservices::copy_tag()","feed::correct()","recipeservices#correct_url_or_destroy()","applicationhelper#count_report()","collectiblesearch#count_tag()","defaultsearch#count_tag()","modelsearch#count_tag()","tagsearch#count_tag()","taggablesearch#count_tag()","answerscontroller#create()","authenticationscontroller#create()","collectiblecontroller#create()","editionscontroller#create()","expressionscontroller#create()","feedbackcontroller#create()","feedscontroller#create()","finderscontroller#create()","invitationscontroller#create()","listscontroller#create()","pagerefscontroller#create()","passwordscontroller#create()","ratingscontroller#create()","referencescontroller#create()","referent::create()","referentscontroller#create()","refermentscontroller#create()","registrationscontroller#create()","rpeventscontroller#create()","scalescontroller#create()","scrapercontroller#create()","sessionscontroller#create()","sitescontroller#create()","suggestionscontroller#create()","tagselectionscontroller#create()","tagscontroller#create()","tagsetscontroller#create()","userscontroller#create()","votescontroller#create()","finderservices::css_class()","notificationpresenter#cssclass()","vote::current()","controllerauthentication#current_user_or_guest()","controllerauthentication#current_user_or_guest_id()","admincontroller#data()","templateer#data()","applicationhelper#data_to_add_fields()","applicationhelper#debug_dump()","applicationhelper#decodehtml()","responseservices#decorate_path()","rpcrypt#decrypt()","applicationcontroller#default_next_path()","applicationcontroller#defer_invitation()","controllerdeference#defer_request()","applicationcontroller#defer_welcome_dialogs()","controllerdeference#deferred_request()","tagservices::define()","www_bbc_co_uk_scraper#define_linked_tag()","imagereference#definitive?()","user#delete_followee()","site#dependent_page_refs()","collectiblepresenter#description()","feedentrydecorator#description()","listdecorator#description()","tagpresenter#description()","userdecorator#description()","answerscontroller#destroy()","applicationcontroller#destroy()","authenticationscontroller#destroy()","editionscontroller#destroy()","expressionscontroller#destroy()","listscontroller#destroy()","ratingscontroller#destroy()","referencescontroller#destroy()","referentscontroller#destroy()","refermentscontroller#destroy()","rpeventscontroller#destroy()","scalescontroller#destroy()","sessionscontroller#destroy()","sitedecorator#destroy()","suggestionscontroller#destroy()","tagscontroller#destroy()","tagsetscontroller#destroy()","userscontroller#destroy()","votescontroller#destroy()","referent#detached?()","sourcereferent#detached?()","applicationhelper#devise_mapping()","usershelper#di_select()","responseservices#dialog?()","dialogshelper#dialogfooter()","dialogshelper#dialogheader()","dialogshelper#dialog_answer_button()","dialogshelper#dialog_cancel_button()","dialogshelper#dialog_close_button()","dialogpanes#dialog_has_pane()","dialogshelper#dialog_pane()","dialogshelper#dialog_pane_buttons()","dialogpanes#dialog_pane_list()","referentdecorator#dialog_pane_list()","dialogpanes#dialog_pane_spec()","referentdecorator#dialog_pane_spec()","dialogshelper#dialog_submit_button()","reference#digested_reference()","object#dim_scale()","referentservices::direct_child_ids()","invitationacceptedeventarticulator#direct_object()","invitationsenteventcreatearticulator#direct_object()","sharedeventcreatearticulator#direct_object()","referentservices::direct_parent_ids()","viewparams#display_style()","collectiblepresenter#divclass()","invitationscontroller#divert()","analyticsservices#divide()","responseservices#do_notification()","notifshelper#do_notifs()","rcprefdecorator#dom_id()","referencedecorator#dom_id()","templateer#dom_id()","site#domain()","object#domain_from_url()","partition#done!()","partition#done?()","voteable#downvotes()","referent#drop()","backgroundable#due?()","feed#due_for_update()","listitem::dump()","listserializer::dump()","referent#dump()","referent::dump()","filteredpresenter#dump?()","rpevent::during()","answerscontroller#edit()","applicationcontroller#edit()","editionscontroller#edit()","expressionscontroller#edit()","feedscontroller#edit()","invitationscontroller#edit()","listscontroller#edit()","pagerefscontroller#edit()","passwordscontroller#edit()","ratingscontroller#edit()","referencescontroller#edit()","referentscontroller#edit()","registrationscontroller#edit()","scalescontroller#edit()","suggestionscontroller#edit()","tagscontroller#edit()","tagsetscontroller#edit()","userscontroller#edit()","votescontroller#edit()","cardpresentation#edit_button()","collectiblepresenter#edit_button()","templateer#edit_class()","templateer#edit_path()","pagerefservices#editable_entity()","cardpresentation#editable_from_card?()","collectiblepresenter#editable_from_card?()","userpresenter#editable_from_card?()","collectibledecorator#editable_tagtypes()","tagscontroller#editor()","collectiblecontroller#editpic()","templateer#element_id()","seekerhelper#element_item()","modeldecorator#element_name()","tag#elide_meaning()","collectibledecorator#eligible_tagtypes()","feeddecorator#eligible_tagtypes()","listdecorator#eligible_tagtypes()","pagerefdecorator#eligible_tagtypes()","recipedecorator#eligible_tagtypes()","sitedecorator#eligible_tagtypes()","emailhelper#email_image_tag()","searchnode#emplace_leader()","applicationhelper#empty_msg()","applicationhelper#encodehtml()","rpcrypt#encrypt()","pagerefable#ensure_site()","pagerefservices#ensure_status()","referent#ensure_tagtypes()","rating#ensure_unique()","rcpref#ensure_unique()","tagging#ensure_unique()","list#entities()","listservices#entities()","listitem#entity=()","applicationhelper#entity_approval()","applicationhelper#entity_approval_replacement()","list#entity_count()","cardpresentation#entity_links()","resulttype#entity_params()","listservices#entity_scope()","feed#entries()","feed::entry_ids()","feed#entry_ids()","finderservices::err_breakdown()","backgroundable#error()","scraper#error()","rpevent::event_trigger_data()","listservices#exclude()","listservices#exclude_by()","list::excluded_tag_types()","taggingservices#exists?()","referent#express()","referent::express()","errorshelper#express_base_errors()","controllerutils#express_error_context()","errorshelper#express_resource_errors()","referent#expression()","expressionservices::expression_ids()","expressionshelper#expression_link()","expressionshelper#expression_name()","expressionservices::expression_tags_from_ids()","user#extend_fields()","string#extensions_to_classes()","string#extensions_to_selector()","feedentrydecorator#external_link()","pagerefdecorator#external_link()","recipedecorator#external_link()","sitedecorator#external_link()","collectibledecorator#extract()","listdecorator#extract()","gleaning#extract1()","gleaning#extract_all()","extractparams::classmethods#extract_params()","authenticationscontroller#failure()","sessionscontroller#failure()","imagereference::fake_url()","pagescontroller#faq()","feedsshowcache#feed()","feedshelper#feed_buttons_replacement()","feedshelper#feed_collectible_buttons()","feedshelper#feed_entries_report()","feedshelper#feed_entries_status()","feedentrieshelper#feed_entry()","feedentrieshelper#feed_entry_replacement()","applicationhelper#feed_list_element_class()","feedshelper#feed_status_report()","feedshelper#feed_status_report_replacement()","feedshelper#feed_status_summary()","feedshelper#feed_subscribe_button()","feedshelper#feed_update_button()","feedshelper#feed_wait_msg()","feedbackmailer#feedback()","rpmailer#feedback()","feedbackhelper#feedback_init()","feedbackhelper#feedback_link()","feedbackhelper#feedback_tab()","sitescontroller#feeds()","navtabshelper#feeds_navtab()","feed::feedtype_selection()","feed#feedtypename()","feed#fetch()","pageref::fetch()","reference#fetch()","cardpresentation#field_count()","collectiblepresenter#field_count()","cardpresentation#field_label_counted()","templateer#field_name()","cardpresentation#field_value()","collectiblepresenter#field_value()","tablepresenter#fields()","filteredpresenter#filter_field()","filteredpresenter#filter_type_selector()","tagsindexpresenter#filter_type_selector()","filteredpresenterhelper#filtered_presenter_header_label()","filteredpresenterhelper#filtered_presenter_header_label_replacement()","filteredpresenterhelper#filtered_presenter_org_buttons()","filteredpresenterhelper#filtered_presenter_org_buttons_replacement()","filteredpresenterhelper#filtered_presenter_panel_results()","filteredpresenterhelper#filtered_presenter_panel_results_placeholder()","filteredpresenterhelper#filtered_presenter_panel_results_replacement()","filteredpresenterhelper#filtered_presenter_table_results()","filteredpresenterhelper#filtered_presenter_table_results_placeholder()","filteredpresenterhelper#filtered_presenter_table_results_replacement()","filteredpresenterhelper#filtered_presenter_tail()","taggingservices#filtered_taggings()","taggable#filtered_tags()","taggingservices#filtered_tags()","invitationsentevent::find_by_invitee()","scraper#find_by_selector()","pageref::find_by_url()","user::find_first_by_auth_conditions()","site::find_for()","collectibleservices::find_or_create()","expression::find_or_create()","site::find_or_create()","site::find_or_create_for()","imagereference::find_or_initialize()","reference::find_or_initialize()","site::find_or_initialize()","suggestion::find_or_make()","responseservices#find_view()","collectibledecorator#finderlabels()","recipedecorator#finderlabels()","sitedecorator#finderlabels()","userdecorator#finderlabels()","collectibledecorator#findings=()","collectibledecorator#first_collector()","userdecorator#first_collector()","searchnode#first_member()","referentscontroller#fix_expression_tokens()","object#fix_fragment()","userservices::fix_names()","recipeservices::fix_redundant()","siteservices#fix_root()","expression#fix_type()","userservices::fix_user()","flashhelper#flash_all()","flashhelper#flash_notifications_div()","flashhelper#flash_notifications_replacement()","flashhelper#flash_notify()","flashhelper#flash_one()","flashhelper#flash_strings()","userscontroller#follow()","feed#follow_url()","user#followee_tokens=()","usershelper#followees_list()","user#follows?()","applicationhelper#form_actions()","flashhelper#form_errors_helper()","cardhelper#format_card_summary()","responseservices#format_class()","applicationhelper#format_table_tree()","expression#formname()","expression::formname()","expression#formname=()","expression::formnum()","expression::forms()","expression::formsym()","expression#formsym()","result#found()","user#friend_candidates()","listservices::friend_lists_on_tag()","navtabshelper#friends_navtab()","finderservices::from_extractions()","resultscache#full_size()","analyticsservices::gen_intervals()","analyticsservices::generate()","user#get_attribute_from_omniauth()","siteservices#get_input()","reference#get_response()","userscontroller#getpic()","collectiblecontroller#glean()","collectibledecorator#glean()","finderservices::glean()","gleaning::glean()","result#glean_atag()","userservices#glean_names()","userservices::glean_names()","pagerefable#gleaning_attributes=()","site#gleaning_attributes=()","gleaningshelper#gleaning_field()","gleaningshelper#gleaning_field_class()","gleaningshelper#gleaning_field_declaration()","gleaningshelper#gleaning_field_enclosure()","gleaningshelper#gleaning_field_replacement()","filteredpresenter#global_querytags()","searchindexpresenter#global_querytags()","applicationhelper#globstring()","gleaning#go()","redirectcontroller#go()","backgroundable#good!()","recipeshelper#grab_recipe_link()","tagshelper#grabtag()","user::guest()","user#guest?()","user::guest_id()","collectiblepresenter#h()","user#handle()","notifshelper#handle_invitation()","authenticationscontroller#handle_unverified_request()","en_wikibooks_org_scraper::handler()","scraper#handler()","www_bbc_co_uk_scraper::handler()","www_seriouseats_com_scraper::handler()","feed#hard_save()","referentpresenter#has_editable()","tagservices#has_image()","user#has_in_collection?()","nullresults#has_query?()","resultscache#has_query?()","responseservices::has_worker?()","sitepresenter#header()","filteredpresenter#header_partial()","searchindexpresenter#header_partial()","usercontentpresenter#header_partial()","object#header_result()","www_bbc_co_uk_scraper#headered_list_items()","gleaning#hit_on_attributes()","site#hit_on_finder()","pagescontroller#home()","site#home=()","navtabshelper#home_navtab()","responseservices#home_page?()","linkhelper#homelink()","pageref#host()","object#host_forbidden()","object#host_url()","listshelper#hover_menu()","modeldecorator#human_name()","pagerefdecorator#human_name()","referentdecorator#human_name()","templateer#human_name()","referentservices::id_path()","userscontroller#identify()","sass::script::functions#ie_hex_str()","string#if_empty()","array#if_present()","nilclass#if_present()","string#if_present()","pagerefdecorator#image()","recipedecorator#image()","sitedecorator#image()","pagerefdecorator#image=()","recipedecorator#image=()","sitedecorator#image=()","collectibledecorator#image_class()","imageshelper#image_enclosure()","imageshelper#image_from_decorator()","imageshelper#image_with_error_recovery()","tagservices#images()","feeddecorator#imgdata()","imagereference#imgdata()","listdecorator#imgdata()","picable#imgdata()","referentdecorator#imgdata()","imagereference#imgurl()","picable#imgurl()","counts#include()","listservices#include()","listservices#include?()","listservices#include_by()","backgroundable::included()","controllerauthentication::included()","extractparams::included()","pagerefable::included()","picable::included()","tagsearch::included()","typeable::included()","list#included_tag_tokens=()","taggable#incoming_attributes()","answerscontroller#index()","authenticationscontroller#index()","collectioncontroller#index()","editionscontroller#index()","expressionscontroller#index()","feedscontroller#index()","integerscontroller#index()","listscontroller#index()","pagerefscontroller#index()","ratingscontroller#index()","recipescontroller#index()","referencescontroller#index()","referentscontroller#index()","rpeventscontroller#index()","scalescontroller#index()","searchcontroller#index()","sitescontroller#index()","suggestionscontroller#index()","tagscontroller#index()","tagsetscontroller#index()","users::notificationswithdevisecontroller#index()","userscontroller#index()","votescontroller#index()","typeable::classmethods#index_to_type()","object#indexing_url()","sharedeventcreatearticulator#indirect_object()","collectibledecorator#individual_tagtypes()","listdecorator#individual_tagtypes()","recipedecorator#individual_tagtypes()","object#ingreds()","scrapercontroller#init()","searchnode#init_child_search()","collectibleassociator#init_children()","entityassociator#init_children()","feedassociator#init_children()","listassociator#init_children()","siteassociator#init_children()","tagassociator#init_children()","taggableassociator#init_children()","userassociator#init_children()","searchnode#init_search()","streampresentation#init_stream()","registrar::initialize()","responseservices#injector?()","dialogshelper#injector_cancel_button()","dialogshelper#injector_dialog()","tokeninput#input()","tokeninput#input_html_classes()","notifshelper#invitation_acceptance_label()","applicationhelper#invitation_diversion_link()","responseservices#invitation_token=()","user#invitee_tokens=()","user::isprivate()","result#is_for()","responseservices#is_injector()","tagpresenter#is_viewer?()","userpresenter#is_viewer?()","itemhelper#item_container_selector()","itemhelper#item_deleter()","itemhelper#item_deleters()","itemhelper#item_insertion()","itemhelper#item_insertions()","feedsshowpresenter#item_mode()","usercontentpresenter#item_mode()","itemhelper#item_partial_class()","itemhelper#item_partial_name()","itemhelper#item_partial_selector()","itemhelper#item_preflight()","itemhelper#item_replacement()","itemhelper#item_replacements()","itemhelper#item_to_render()","itemhelper#item_wrapper_selector()","collectioncache#itemscope()","defaultsearch#itemscope()","feedsindexcache#itemscope()","feedsshowcache#itemscope()","integerscache#itemscope()","listsindexcache#itemscope()","listsshowcache#itemscope()","nullresults#itemscope()","referencesindexcache#itemscope()","referentsassociatedcache#itemscope()","referentsindexcache#itemscope()","resulttyping#itemscope()","sitesfeedscache#itemscope()","sitesindexcache#itemscope()","sitesrecipescache#itemscope()","sitesshowcache#itemscope()","tagsearch#itemscope()","tagsassociatedcache#itemscope()","usercollectedlistscache#itemscope()","userfeedscache#itemscope()","userfriendscache#itemscope()","userlistscache#itemscope()","userownedlistscache#itemscope()","usersbiglistcache#itemscope()","usersindexcache#itemscope()","collectioncache#itemscopes()","defaultsearch#itemscopes()","listsshowcache#itemscopes()","counts#itemstubs()","pagerefservices::join_urls()","applicationhelper#jquery_include_tag()","finderservices::js_finders()","pageref#kind_as_fixnum()","pagerefservices::kind_selections()","pagerefservices::kind_to_name()","orgoptions#label()","finderservices::label_choices()","imageshelper#labelled_avatar()","object#labelled_quantity()","gleaning#labels()","finder#labelsym()","feed#launch_update()","pagescontroller#letsencrypt()","tagservices#lexical_similars()","applicationhelper#link_to_add_fields()","linkhelper#link_to_dialog()","triggershelper#link_to_redirect()","ratingshelper#link_to_remove_fields()","linkhelper#link_to_submit()","linkhelper#linkpath()","linkhelper#linkto_options()","listsshowcache#list()","typemap#list()","userdecorator#list_availability()","listshelper#list_lists_with_status()","listshelper#list_menu_item()","listshelper#list_menu_item_replacement()","userdecorator#list_tags()","tagshelper#list_tags_for_collectible()","collectiblecontroller#lists()","object#liststrs()","listitem::load()","listserializer::load()","bootstrap::load!()","expression#localename()","expression::localename()","expression#localename=()","expression::localenum()","expression::locales()","expression#localesym()","expression::localesym()","controllerauthentication#logged_in?()","usershelper#login_choices()","applicationcontroller#login_required()","applicationhelper#logo()","referent#longname()","orgoptions::lookup()","reference::lookup()","articulator::make()","referent#make_parent_of()","tagservices#make_parent_of()","refermentservices::make_polymorphic()","suggestion#make_ready()","rcprefservices::match()","taggingservices::match()","tagscontroller#match()","user#match_friends()","userscontroller#match_friends()","typemap#max_index()","feedsindexcache#max_window_size()","referencesindexcache#max_window_size()","referentsindexcache#max_window_size()","resultscache#max_window_size()","tagsindexcache#max_window_size()","usersindexcache#max_window_size()","tag#meaning()","tag#meaning=()","expressionservices::meaning_ids()","nestedbenchmark::measure()","userpresenter#member_since()","applicationcontroller#menu()","pageref::mercury_attributes()","counts#merge_counts()","resultscache#merge_counts()","object#merge_word_strings()","articulator#message_key()","sharedeventcreatearticulator#message_key()","articulator#method_missing()","collectibledecorator#method_missing()","gleaning#method_missing()","tag#method_missing()","taggable#method_missing()","templateer#method_missing()","user#method_missing()","collectibledecorator#misc_tags_name_expanded()","collectibledecorator#misc_tagtypes()","dialogshelper#modal_body()","dialogshelper#modal_dialog()","dialogshelper#modal_footer()","dialogshelper#modal_header()","resulttype#model_class()","resulttype#model_name()","users::notificationswithdevisecontroller#move()","navtabshelper#my_lists_navtab()","nestedattributeshelper#na_menu()","list#name()","referencedecorator#name()","referent#name()","rpeventdecorator#name()","site#name()","tagpresenter#name()","typemap#name()","user#name()","list#name=()","site#name=()","referent#names()","siteservices::names()","navtabshelper#navmenu_id()","navtabshelper#navmenu_replacement()","navtabshelper#navtab()","navtabshelper#navtab_id()","analyticsservices::new()","answerscontroller#new()","articulator::new()","authenticationscontroller#new()","basepresenter::new()","candihash::new()","collectiblecontroller#new()","collectibleservices::new()","editionscontroller#new()","entityassociator::new()","expressionservices::new()","expressionscontroller#new()","feedbackcontroller#new()","feedscontroller#new()","filteredpresenter::new()","finderservices::new()","invitationscontroller#new()","listitem::new()","listservices::new()","listscontroller#new()","mercurydata::new()","notificationpresenter::new()","nullresults::new()","orgoptions::new()","pagerefservices::new()","pagerefscontroller#new()","partition::new()","passwordscontroller#new()","rpcrypt::new()","ratingscontroller#new()","recipeservices::new()","refereeservices::new()","referenceservices::new()","referencescontroller#new()","referentservices::new()","referentscontroller#new()","refermentservices::new()","registrationscontroller#new()","reloader::sse::new()","responseservices::new()","result::new()","resulttype::new()","results::new()","rpeventscontroller#new()","scalescontroller#new()","scrapercontroller#new()","searchaggregator::new()","sessionscontroller#new()","sitepresenter::new()","siteservices::new()","suggestionservices::new()","suggestionscontroller#new()","tablepresenter::new()","tagservices::new()","taggingservices::new()","tagscontroller#new()","tagsetscontroller#new()","templateer::new()","typemap::new()","userservices::new()","userscontroller#new()","viewparams::new()","votescontroller#new()","searchnode#new_child()","rpmailer#newsletter()","partition#next_index()","resultscache#next_item()","searchaggregator#next_members()","filteredpresenter#next_path()","partition#next_range()","resultscache#next_range()","resultscache#nmatches()","applicationcontroller#no_action_error()","tag::normalizename()","object#normalize_and_test_url()","object#normalize_url()","object#normalize_urls()","referent#normalized_name()","object#normalized_uri()","userscontroller#not_found()","listdecorator#notes()","rpevent#notifiable_path()","sharedevent#notifiable_path()","responseservices#notification_token=()","notificationshelper#notifications_format()","notificationshelper#notifications_format_subject()","notificationshelper#notifications_locator()","notificationshelper#notifications_replacement()","notifshelper#notifs_replacement()","notifshelper#notifs_section()","siteservices#nuke_message()","typemap#num()","collectible#num_cookmarks()","voteable#nvotes()","templateer#object_path()","templateer#object_type()","responseservices#omniauth_pending()","users::notificationswithdevisecontroller#open()","gleaning#options_for()","userdecorator#or_alias()","nilclass#or_fallback()","string#or_fallback()","collectiblesearch#orderingscope()","defaultsearch#orderingscope()","feedsindexcache#orderingscope()","feedsshowcache#orderingscope()","listsshowcache#orderingscope()","searchindexcache#orderingscope()","sitesindexcache#orderingscope()","tagsearch#orderingscope()","userfeedscache#orderingscope()","usersindexcache#orderingscope()","resultscache#org=()","filteredpresenter#org_buttons()","searchindexpresenter#org_buttons()","resultscache#org_options()","feed#orig_save()","responseservices#originator()","applicationcontroller#orphantagid()","userdecorator#owned_lists()","userdecorator#owned_taggings()","userdecorator#owned_tags()","recipeshelper#ownership_status()","scraper#page()","applicationhelper#page_or_modal()","pageref#page_ref()","pagerefshelper#page_ref_identifier()","referentdecorator#page_refs()","tagservices#page_refs_of_kind()","viewparams#page_title()","actionmailer::mailhelper#page_with_trigger()","triggershelper#page_with_trigger()","pageletshelper#pagelet_body_id()","pageletshelper#pagelet_body_replacement()","pageletshelper#pagelet_body_selector()","pageletshelper#pagelet_class()","pageletshelper#pagelet_followup()","pagerefable::classmethods#pagerefable()","collectibledecorator#pageurl()","feeddecorator#pageurl()","dialogshelper#pane_dialog()","panelhelper#panel_body()","panelhelper#panel_body_replacement()","panelhelper#panel_collapse_button()","panelhelper#panel_collapse_button_replacement()","panelhelper#panel_expand_link()","referentsassociatedpresenter#panel_label()","tagsassociatedpresenter#panel_label()","viewparams#panel_label()","panelhelper#panel_org_menu()","panelhelper#panel_org_menu_replacement()","panelhelper#panel_suggestions()","panelhelper#panel_suggestions_placeholder()","panelhelper#panel_suggestions_replacement()","listsshowpresenter#panel_title()","searchindexpresenter#panel_title()","tagsindexpresenter#panel_title()","viewparams#panel_title()","resultscache#param()","modeldecorator#param_key()","resulttype#params()","resulttype::params()","feedsindexcache::params_needed()","filteredpresenter#params_needed()","nullresults::params_needed()","referencesindexcache::params_needed()","referentsindexcache::params_needed()","resulttyping::params_needed()","resultscache::params_needed()","sitesindexcache::params_needed()","streampresentation#params_needed()","tagsearch::classmethods#params_needed()","userfeedscache::params_needed()","tagservices#parent_ids()","tagservices::parent_ids()","expressionservices::parent_ids_of_tags()","referent#parent_tag_tokens()","referent#parent_tag_tokens=()","referent#parent_tags()","expressionservices::parent_tags_of_tags()","tagservices#parents()","recipescontroller#parse()","referentservices#parse_referment_params()","tokeninput::parse_tokens()","counts#partition()","partition#partition_of()","resultscache#partition_on_scope?()","partition#partition_range()","user#password_required?()","object#path_from_url()","referent#paths_to()","voteable#pct_positive()","deferredrequest::pending()","backgroundable#pending?()","responseservices#pending_invitee()","controllerdeference#pending_modal_trigger()","responseservices#pending_notification()","edition#perform()","feed#perform()","gleaning#perform()","imagereference#perform()","pageref#perform()","pagerefable#perform()","scraper#perform()","suggestion#perform()","user#perform()","backgroundable#perform_without_dj()","applicationcontroller#permission_denied()","collectiblepresenter#pic_class()","picpickerhelper#pic_field()","picpickerhelper#pic_picker_magic()","picpickerhelper#pic_picker_select_list()","picpickerhelper#pic_preview_img_id()","picpickerhelper#pic_preview_input_id()","picable::classmethods#picable()","picable#picable_attribute()","picable#picref()","picable#picuri()","collectibledecorator#picurl()","recipe#picurl=()","listscontroller#pin()","listshelper#pin_button()","listshelper#pin_navmenu()","scraper#ping()","templateer#placeholder()","modeldecorator#plural_name()","user#polite_name()","linkhelper#polymorphic_link()","deferredrequest::pop()","pagescontroller#popup()","invitationsentevent::post()","loginevent::post()","rpevent::post()","sharedevent::post()","signupevent::post()","feed::preload()","applicationcontroller#present()","applicationhelper#present()","suggestionpresenter#present()","recipeshelper#present_comments()","cardpresentation#present_field()","pagerefshelper#present_page_ref()","tablehelper#present_table()","filteredpresenter#presentation_partial()","filteredpresenter#presentation_partials()","user#printable_notifier_name()","backgroundable#processing!()","userscontroller#profile()","list#propagate_privacy()","authentication#provider_name()","collectiblecontroller#proxify()","user::public?()","deferredrequest::pull()","listservices#pulled_tag_ids()","listservices#pulled_tags()","deferredrequest::push()","result#push()","searchnode#push_new_associate()","redirecthelper#push_state()","responseservices#push_state()","expression::qa()","tagservices::qa()","taggingservices::qa()","user#qa()","reference::querify()","querifyhelper#querify_block()","querifyhelper#querify_button()","querifyhelper#querify_item()","querifyhelper#querify_link()","querifyhelper#querify_radiobutton()","filteredpresenter#query()","object#query_to_hash()","querytags#querytags()","filteredpresenter#querytags?()","searchindexpresenter#querytags?()","applicationhelper#question_section()","backgroundable#queued?()","rating#rating_attributes=()","recipe#reachable?()","collectibledecorator#read_only()","feedentrydecorator#read_only()","resultscache#ready?()","userscontroller#recent()","recipesassociatedcache#recipe()","recipeshelper#recipe_comments_div()","applicationhelper#recipe_grid_element_class()","tagservices#recipe_ids()","www_bbc_co_uk_scraper#recipe_item()","applicationhelper#recipe_list_element_class()","applicationhelper#recipe_list_element_golink_class()","applicationhelper#recipe_popup()","recipeshelper#recipe_tags_div()","recipeshelper#recipe_title_div()","recipeshelper#recipe_uncollect_button()","rating#recipes()","tagservices#recipes()","responseservices#redirect_params()","applicationcontroller#redirect_to_modal()","customfailure#redirect_url()","referentshelper#ref_affiliates_summary()","expressiondecorator::ref_check()","tagdecorator::ref_check()","tagdecorator#ref_check()","referentshelper#ref_children_summary()","referentshelper#ref_expressions_summary()","collectible#ref_if_any()","referentshelper#ref_parents_summary()","referencecache#reference()","referenceshelper#reference_expressions()","referentsassociatedcache#referent()","referent::referent_class_for_tagtype()","referentshelper#referent_identifier()","referentshelper#referent_summary()","tagservices#referents()","notificationpresenter#referral_path()","feed#refresh()","feedscontroller#refresh()","taggingservices#refute()","taggable#refute_tagging()","articulator::register()","registrar::register_list()","registrar::register_recipe()","registrar::register_tag()","articulator::registry()","referent::related()","referent#related_tag_tokens()","referent#related_tag_tokens=()","referent#related_tags()","list#remove()","userscontroller#remove()","notificationpresenter#render()","applicationcontroller#render_fp()","itemhelper#render_item()","itemhelper#render_item_unwrapped()","applicationcontroller#render_optional_error_file()","responseservices#render_params()","seekerhelper#render_seeker_item()","streamhelper#render_template()","applicationcontroller#render_to_string()","cardpresentation#rendered_aspects()","result#report()","applicationcontroller#report_cookie_string()","collectiblecontroller#report_entity()","applicationhelper#report_items()","applicationcontroller#report_session()","invitationscontroller#require_no_authentication()","sessionscontroller#require_no_authentication()","applicationcontroller#rescue_action_in_public()","candihash#reset()","siteservices#resolve()","applicationhelper#resource()","controllerutils#resource_errors_to_flash()","controllerutils#resource_errors_to_flash_now()","invitationscontroller#resource_from_invitation_token()","applicationhelper#resource_name()","customfailure#respond()","applicationcontroller#response_service()","responseservices#restore_tokens()","sessionscontroller#restore_tokens()","gleaning#result_for()","results#result_for()","feedsindexpresenter#result_type()","feedsshowpresenter#result_type()","listsindexpresenter#result_type()","listsshowpresenter#result_type()","recipesassociatedpresenter#result_type()","referencesindexpresenter#result_type()","referentsassociatedpresenter#result_type()","referentsindexpresenter#result_type()","searchindexpresenter#result_type()","sitesassociatedpresenter#result_type()","sitesindexpresenter#result_type()","tagsassociatedpresenter#result_type()","tagsindexpresenter#result_type()","usercontentpresenter#result_type()","usersindexpresenter#result_type()","candihash#results()","suggestionscontroller#results()","gleaning#results_for()","results#results_for()","filteredpresenter#results_partial()","filteredpresenter#results_path()","resultscache::retrieve_or_build()","tagservices#retypeable?()","recipescontroller#revise()","basepresenter#ribbon()","feedpresenter#ribbon()","listpresenter#ribbon()","recipepresenter#ribbon()","userpresenter#ribbon()","collectibledecorator#robotags()","user#role()","user#role_select()","user#role_symbols()","pagescontroller#root()","resulttype#root()","site#root=()","tablepresenter#rows()","object#rp_url()","tag#safe_destroy()","object#safe_parse()","resultscache#safe_partition()","object#safe_uri_join()","user#salutation()","collectibledecorator#sample_page()","sitedecorator#sample_page()","object#sanitize_url()","feed#save()","resultscache#scope_count()","defaultsearch#scope_slice()","tagsearch#scope_slice()","pagerefscontroller#scrape()","recipeservices#scrape()","scraper#scrape()","siteservices#scrape()","siteservices::scrape_for_feeds()","feedservices::scrape_page()","expression::scrub_args()","www_seriouseats_com_scraper#se_category_page()","www_seriouseats_com_scraper#se_tag_page()","searchnode#search_result=()","suggestionpresenter#sections()","seekerhelper#seeker_table()","responseservices#select_render()","pagerefservices::selectable_kinds()","notificationpresenter#selector()","tagservices::semantic_neighborhood()","userscontroller#sendmail()","searchnode#set_children()","expression#set_form()","expression#set_locale()","taggable#set_tag_ids()","applicationcontroller#setup_response_service()","cardpresentation#sharable_from_card?()","collectiblepresenter#sharable_from_card?()","userpresenter#sharable_from_card?()","cardpresentation#share_button()","collectiblepresenter#share_button()","user#shared()","user#shared=()","rpdevisemailer#sharing_invitation_instructions()","taggable#shed_tag()","answerscontroller#show()","collectiblecontroller#show()","editionscontroller#show()","expressionscontroller#show()","feedscontroller#show()","listscontroller#show()","pagerefscontroller#show()","ratingscontroller#show()","referencescontroller#show()","referentscontroller#show()","rpeventscontroller#show()","scalescontroller#show()","suggestionscontroller#show()","tagscontroller#show()","tagsetscontroller#show()","userscontroller#show()","votescontroller#show()","filteredpresenter#show_card?()","usercontentpresenter#show_card?()","rcprefshelper#show_comments()","filteredpresenter#show_comments?()","refermentservices::show_definitions()","editionshelper#show_edition_item()","tagpresenter#show_or_edit()","userpresenter#show_or_edit()","rpeventscontroller::show_page()","users::notificationswithdevisecontroller::show_page()","siteshelper#show_sample()","rating#show_scale()","recipeservices#show_tags()","referent::show_tree()","expressionservices::sibling_ids_of_tags()","filteredpresenter#sibling_types()","searchindexpresenter#sibling_types()","usercontentpresenter#sibling_types()","userscollectionpresenter#sibling_types()","filteredpresenter#sibling_views()","sessionscontroller#sign_in_and_redirect()","userservices#sign_up()","tagservices#similar_ids()","siteservices#similars()","dialogshelper#simple_modal()","streamhelper#simple_pagelet()","formshelper#simple_submit_form_for()","adminhelper#single_user_table_row()","modeldecorator#singular_name()","site#site()","sitedecorator#site()","sitesfeedscache#site()","sitesrecipescache#site()","sitesshowcache#site()","siteshelper#site_feeds_summary()","siteshelper#site_glean_button()","siteshelper#site_nuke_button()","siteshelper#site_pagerefs_summary()","recipe#site_service()","siteshelper#site_similars()","siteshelper#site_summaries()","tagservices#sites()","resultscache#slice_cache()","applicationcontroller#smartrender()","tablepresenter#sort()","tablepresenter#sort_field()","resultscache#sort_table_name()","userfriendscache#sort_table_name()","listdecorator#sourcehome()","pagerefable#sourcehome()","sitedecorator#sourcehome()","userdecorator#sourcehome()","collectibledecorator#sourcename()","listdecorator#sourcename()","pagerefable#sourcename()","sitedecorator#sourcename()","userdecorator#sourcename()","object#splitstr()","spriteshelper#sprite()","spriteshelper#sprite_glyph()","pagescontroller#sprites()","siteservices#stab_at_sample()","siteservices::stab_at_samples()","list#store()","applicationcontroller#stored_location_for()","list#stores?()","listitem#stores?()","streamcontroller#stream()","filteredpresenter#stream_count()","streamhelper#stream_element()","streamhelper#stream_element_class()","streamhelper#stream_element_package()","streamhelper#stream_element_replacement()","streamhelper#stream_element_selector()","defaultsearch#stream_id()","listsshowcache#stream_id()","resulttype#stream_id()","resulttyping#stream_id()","searchindexcache#stream_id()","seekerhelper#stream_link()","streamhelper#stream_loadlink()","streampresentation#stream_params_next()","streampresentation#stream_params_null()","object#string_to_class()","typemap#stripped_name()","object#strjoin()","tag::strmatch()","feed::strscopes()","feedentry::strscopes()","list::strscopes()","pageref::strscopes()","recipe::strscopes()","reference::strscopes()","referent::strscopes()","site::strscopes()","tag::strscopes()","user::strscopes()","listservices::study_users()","usersshowcache::subclass_for()","invitationacceptedeventarticulator#subject()","invitationsenteventcreatearticulator#subject()","formshelper#submit_form_for()","object#subpaths()","usershelper#subscriptions_list()","resulttype#subtype()","entityshowpresenter#subtypes()","filteredpresenter#subtypes()","recipesassociatedpresenter#subtypes()","usercontentpresenter#subtypes()","backgroundable#success()","referent#suggests()","tagservices#suggests()","referent#suggests?()","tagservices#suggests?()","suggestion#sugtime()","gleaningdecorator#summarize()","recipeshelper#summarize_alltags()","tagpresenter#summarize_aspect()","ratingshelper#summarize_ratings()","referentshelper#summarize_ref_name()","referentshelper#summarize_referent()","tagshelper#summarize_tag_similar()","articulator#summary()","user::super_id()","user::super_id=()","user::superuser()","feedsindexcache#supported_org_options()","feedsshowcache#supported_org_options()","listsshowcache#supported_org_options()","referentsassociatedcache#supported_org_options()","resultscache#supported_org_options()","sitesindexcache#supported_org_options()","tagsindexcache#supported_org_options()","userfeedscache#supported_org_options()","userfriendscache#supported_org_options()","userscollectioncache#supported_org_options()","usersindexcache#supported_org_options()","streampresentation#suspend()","typemap#sym()","pageref#sync()","tagservices#synonym_ids()","tagservices::synonym_ids()","expressionservices::synonym_ids_of_tags()","tag#synonyms()","tagservices#synonyms()","pageref#table()","tablehelper#table_collection_selector()","feedstable#table_headers()","liststable#table_headers()","referencestable#table_headers()","referentstable#table_headers()","sitestable#table_headers()","tagstable#table_headers()","userstable#table_headers()","resulttype#table_name()","tablehelper#table_out()","tagpresenter#table_summaries()","analyticsservices::tabulate()","collectiblecontroller#tag()","tagsassociatedcache#tag()","cardpresentation#tag_button()","www_bbc_co_uk_scraper#tag_def_label()","tagshelper#tag_filter_header()","www_bbc_co_uk_scraper#tag_item()","tagshelper#tag_list()","templateer#tag_path()","tagshelper#tag_select()","tagselectionshelper#tag_selection_form()","tagselectionshelper#tag_selection_form_replacement()","expression#tag_token()","expression#tag_token=()","tagselection#tag_token=()","referent#tag_tokens_to_referents()","taggable#tag_with()","taggingservices#tag_with()","tag::taggable()","referentdecorator#tagged_entities()","userdecorator#tagged_entities()","tagservices#taggee_ids()","tagservices#taggees()","tagpresenter#taggees_table_summary()","tagselectionshelper#tagging_fields()","listservices#tagging_query()","taggable#tagging_tags()","taggable#tagging_tags_of_type()","taggable#tagging_user_id=()","taggingservices#taggings()","recipeshelper#tagjoin()","tagshelper#taglist()","expression#tagname()","tag#tagqa()","tagpresenter#tags()","taggingservices#tags()","userpresenter#tags()","referent#tags_from_referents()","tagshelper#tags_tabset()","tagpresenter#tagserv()","filteredpresenter#tail_partial()","hash#take()","pagescontroller#tell_me_more()","applicationhelper#template_element()","templatehelper#template_link()","object#test_link()","object#test_url()","finderservices#testflight()","imagereference#thumbdata()","imagereference#thumbdata=()","tag::tidyname()","www_bbc_co_uk_scraper#tidy_name()","suggestion#time_check()","object#time_check_log()","recipeservices::time_lookup()","referenceservices::time_lookup()","tagservices::time_lookup()","suggestion#timeout?()","applicationcontroller#timeout_error()","applicationhelper#title()","collectiblepresenter#title()","list#title()","pagerefdecorator#title()","referencedecorator#title()","referentdecorator#title()","sitedecorator#title()","tagdecorator#title()","userdecorator#title()","recipe#title=()","responseservices#title=()","sitedecorator#title=()","rpevent#title_of()","sharedevent#title_of()","fixnum#to_boolean()","string#to_boolean()","feed#to_s()","searchnode#to_s()","admincontroller#toggle()","taggablehelper#token_input_div()","tokeninputhelper#token_input_element()","taggablehelper#token_input_field()","queryhelper#token_input_query()","tokeninputhelper#token_input_tag()","cardpresentation#tools_menu()","collectiblepresenter#tools_menu()","tagpresenter#tools_menu()","collectiblecontroller#touch()","user#touch()","collectible#touch_date()","applicationhelper#touch_date_class()","applicationhelper#touch_date_elmt()","linkhelper#touchpath()","modeldecorator#translate_params_for()","rpevent::trigger_event()","triggershelper#trigger_pending_modal()","triggershelper#trigger_pending_results()","formshelper#triggered_form()","siteservices#trim_title()","pageref#try_mercury()","pagerefservices#try_substitute()","referencesindexcache#type()","referentsindexcache#type()","tagshelper#type_selections()","typeable::classmethods#type_selections()","referent::type_to_class()","refermentservices#type_to_class()","typeable::classmethods#typeable()","referencesindexcache#typeclass()","referentsindexcache#typeclass()","tag#typedname()","typeable#typematch()","feeddecorator#typename()","referent#typename()","typeable#typename()","typeable::classmethods#typename()","referent#typenum()","typeable#typenum()","typeable::classmethods#typenum()","tag#typenum=()","typeable#typenum=()","referent#typesym()","typeable#typesym()","typeable::classmethods#typesym()","tagscontroller#typify()","collectible#uid=()","taggable#uid=()","string#uncapitalize()","rcpref#uncollect()","user#uncollect()","userscontroller#unsubscribe()","answerscontroller#update()","collectiblecontroller#update()","editionscontroller#update()","expressionscontroller#update()","invitationscontroller#update()","listscontroller#update()","passwordscontroller#update()","ratingscontroller#update()","referencescontroller#update()","referentscontroller#update()","refermentscontroller#update()","registrationscontroller#update()","rpeventscontroller#update()","scalescontroller#update()","sitescontroller#update()","suggestionscontroller#update()","tagselectionscontroller#update()","tagscontroller#update()","tagsetscontroller#update()","userscontroller#update()","votescontroller#update()","applicationcontroller#update_and_decorate()","referent#update_attributes()","feedentry::update_from_feed()","feedentry::update_from_feed_continuously()","feed::update_now()","uploaderhelper#uploader_data()","uploaderhelper#uploader_field()","voteable#upvotes()","scraper#uri()","listdecorator#url()","sitedecorator#url()","sitedecorator#url=()","pagerefable#url_attribute()","pageref::url_path_query()","pageref::url_query()","responseservices#user()","userfunc#user()","modeldecorator#user_can?()","userdecorator#user_can?()","usershelper#user_follow_button()","usershelper#user_follow_button_replacement()","usershelper#user_follower_count()","articulator#user_reference()","rpevent::user_stats()","usershelper#user_subclass()","rpmailer#user_to_user()","orgoptions#valid?()","partition#valid_range()","object#valid_url()","expressionvalidator#validate()","referentrelationvalidator#validate()","referentvalidator#validate()","userrelationvalidator#validate()","object#validate_link()","passwordscontroller#validate_token()","rating#value_as_text()","scale#value_as_text()","articulator#verb()","invitationacceptedeventarticulator#verb()","invitationsenteventcreatearticulator#verb()","sharedeventcreatearticulator#verb()","authenticationscontroller#verify()","imageshelper#video_embed()","resultscache#viewer()","backgroundable#virgin!()","listservices::visible_lists()","taggable#visible_tags()","referentdecorator#visible_tags_of_kind()","cardpresentation#votable_from_card?()","collectiblepresenter#votable_from_card?()","userpresenter#votable_from_card?()","user#vote()","vote::vote()","cardpresentation#vote_buttons()","collectiblepresenter#vote_buttons()","collectiblehelper#vote_buttons_replacement()","voteshelper#vote_link()","voteshelper#vote_params()","finder#what()","en_wikibooks_org_scraper#wikipedia_cookbook_ingredients()","partition#window=()","resultscache#window=()","partition#windowsize()","string#with_article()","controllerutils#with_format()","site::with_subroot_of()","reloader::sse#write()","tagservices::yumm()",""],"info":[["AcceptedEvent","","AcceptedEvent.html","","<p>&lt;User&gt; accepted &lt;Entity&gt; [from] &lt;User&gt; Accepted a share\n"],["ActionMailer","","ActionMailer.html","",""],["ActionMailer::MailHelper","","ActionMailer/MailHelper.html","",""],["AdminController","","AdminController.html","",""],["AdminDecorator","","AdminDecorator.html","",""],["AdminHelper","","AdminHelper.html","",""],["AnalyticsServices","","AnalyticsServices.html","",""],["Answer","","Answer.html","",""],["AnswerDecorator","","AnswerDecorator.html","",""],["AnswersController","","AnswersController.html","",""],["AnswersHelper","","AnswersHelper.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationController::AbstractController","","ApplicationController/AbstractController.html","",""],["ApplicationController::OAuth","","ApplicationController/OAuth.html","",""],["ApplicationController::Timeout","","ApplicationController/Timeout.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Array","","Array.html","",""],["Articulator","","Articulator.html","","<p>class for articulating RpEvents as sentences, with the ability to embed\ncontent strings in HTML before …\n"],["Authentication","","Authentication.html","",""],["AuthenticationsController","","AuthenticationsController.html","",""],["AuthenticationsHelper","","AuthenticationsHelper.html","",""],["AuthorReferent","","AuthorReferent.html","",""],["Backgroundable","","Backgroundable.html","","<p>The Backgroundable module supplies an object with the ability to manage\nexecution using DelayedJob\n<p>Execution …\n"],["Backgroundable::ClassMethods","","Backgroundable/ClassMethods.html","",""],["BannedTag","","BannedTag.html","","<p>A BannedTag is one that is disqualified from use in robo-tagging\n"],["BasePresenter","","BasePresenter.html","",""],["BmHelper","","BmHelper.html","",""],["Bootstrap","","Bootstrap.html","",""],["Bootstrap::FrameworkNotFound","","Bootstrap/FrameworkNotFound.html","",""],["Bootstrap::Rails","","Bootstrap/Rails.html","",""],["Bootstrap::Rails::Engine","","Bootstrap/Rails/Engine.html","",""],["BootstrapHelper","","BootstrapHelper.html","",""],["Candihash","","Candihash.html","","<p>Class for a hash of recipe keys, for sorting as integers and applying\nsearch results\n"],["CardHelper","","CardHelper.html","",""],["CardPresentation","","CardPresentation.html","",""],["CollectedEvent","","CollectedEvent.html","","<p>&lt;User&gt; collected &lt;Entity&gt;\n"],["Collectible","","Collectible.html","",""],["CollectibleAssociator","","CollectibleAssociator.html","",""],["CollectibleController","","CollectibleController.html","",""],["CollectibleDecorator","","CollectibleDecorator.html","",""],["CollectibleHelper","","CollectibleHelper.html","",""],["CollectiblePresenter","","CollectiblePresenter.html","",""],["CollectibleSearch","","CollectibleSearch.html","","<p>Defines search for Collectible entities, i.e. looking for comments that\nmatch a tag\n"],["CollectibleServices","","CollectibleServices.html","",""],["CollectionCache","","CollectionCache.html","","<p>Methods and defaults for a ResultsCache based on a user&#39;s collection\n@entity_id parameter denotes …\n"],["CollectionController","","CollectionController.html","",""],["CollectionSuggestion","","CollectionSuggestion.html","",""],["CollectionSuggestionPresenter","","CollectionSuggestionPresenter.html","",""],["CollectionsHelper","","CollectionsHelper.html","",""],["Commentable","","Commentable.html","",""],["Commentable::ClassMethods","","Commentable/ClassMethods.html","",""],["ControllerAuthentication","","ControllerAuthentication.html","","<p>This module is included in your application controller which makes several\nmethods available to all controllers …\n"],["ControllerDeference","","ControllerDeference.html","","<p>Mixin for application controller to provide for pushing and popping\nrequests\n"],["ControllerUtils","","ControllerUtils.html","","<p>Use &#39;with_format&#39; when a controller needs to render one format for\nanother. Canonical use is …\n"],["Counts","","Counts.html","","<p>Object to put a uniform interface on a set of results, whether they exist\nas a scope (if there is no …\n"],["CourseReferent","","CourseReferent.html","",""],["CulinaryTermReferent","","CulinaryTermReferent.html","",""],["CustomFailure","","CustomFailure.html","",""],["DefaultSearch","","DefaultSearch.html","","<p>Prototype of definitions and methods for searching to a ResultsCache. These\nare stubs which either define …\n"],["DeferredRequest","","DeferredRequest.html","",""],["DefinitionReference","","DefinitionReference.html","",""],["DialogPanes","","DialogPanes.html","","<p>This module provides Pane functionality for editing dialogs on Collectible\nobjects\n"],["DialogsHelper","","DialogsHelper.html","","<p>Helpers for building dialogs\n"],["DietReferent","","DietReferent.html","",""],["DiscoveredEvent","","DiscoveredEvent.html","","<p>&lt;User&gt; discovered &lt;Site&gt;\n"],["DishReferent","","DishReferent.html","",""],["Edition","","Edition.html","",""],["EditionDecorator","","EditionDecorator.html","",""],["EditionsController","","EditionsController.html","",""],["EditionsHelper","","EditionsHelper.html","",""],["EmailHelper","","EmailHelper.html","",""],["En_wikibooks_org_Scraper","","En_wikibooks_org_Scraper.html","",""],["EntityAssociator","","EntityAssociator.html","",""],["EntityShowPresenter","","EntityShowPresenter.html","","<p>Generic class for showing an entity on a card, without further associated\npanels, etc.\n"],["EpitaphReferent","","EpitaphReferent.html","",""],["ErrorsController","","ErrorsController.html","",""],["ErrorsHelper","","ErrorsHelper.html","",""],["EventNotice","","EventNotice.html","",""],["Expression","","Expression.html","",""],["ExpressionDecorator","","ExpressionDecorator.html","",""],["ExpressionServices","","ExpressionServices.html","",""],["ExpressionValidator","","ExpressionValidator.html","",""],["ExpressionsController","","ExpressionsController.html","","<p>An Expression links a Referent to a Tag. It declares that a semantic entity\n(a Referent) can be referred …\n"],["ExpressionsHelper","","ExpressionsHelper.html","",""],["ExtractParams","","ExtractParams.html","",""],["ExtractParams::ClassMethods","","ExtractParams/ClassMethods.html","",""],["Feed","","Feed.html","",""],["FeedAssociator","","FeedAssociator.html","",""],["FeedDecorator","","FeedDecorator.html","",""],["FeedEntriesController","","FeedEntriesController.html","",""],["FeedEntriesHelper","","FeedEntriesHelper.html","",""],["FeedEntry","","FeedEntry.html","",""],["FeedEntryDecorator","","FeedEntryDecorator.html","",""],["FeedPresenter","","FeedPresenter.html","",""],["FeedServices","","FeedServices.html","",""],["Feedback","","Feedback.html","",""],["FeedbackController","","FeedbackController.html","",""],["FeedbackHelper","","FeedbackHelper.html","",""],["FeedbackMailer","","FeedbackMailer.html","",""],["FeedsAssociatedCache","","FeedsAssociatedCache.html","",""],["FeedsAssociatedPresenter","","FeedsAssociatedPresenter.html","",""],["FeedsContentsCache","","FeedsContentsCache.html","",""],["FeedsContentsPresenter","","FeedsContentsPresenter.html","",""],["FeedsController","","FeedsController.html","",""],["FeedsHelper","","FeedsHelper.html","",""],["FeedsIndexCache","","FeedsIndexCache.html","","<p>list of feeds\n"],["FeedsIndexPresenter","","FeedsIndexPresenter.html","","<p>Present a list of feeds for a user\n"],["FeedsShowCache","","FeedsShowCache.html","","<p>list of feed items\n"],["FeedsShowPresenter","","FeedsShowPresenter.html","","<p>Present the entries associated with a feed\n"],["FeedsTable","","FeedsTable.html","",""],["FilteredPresenter","","FilteredPresenter.html","",""],["FilteredPresenterHelper","","FilteredPresenterHelper.html","",""],["Finder","","Finder.html","",""],["FinderDecorator","","FinderDecorator.html","",""],["FinderServices","","FinderServices.html","",""],["FindersController","","FindersController.html","",""],["FindersHelper","","FindersHelper.html","",""],["Fixnum","","Fixnum.html","",""],["FlashHelper","","FlashHelper.html","","<p>Provide the capability of displaying closeable flash messages, either in a\ndialog or on the page. In …\n"],["FormsHelper","","FormsHelper.html","",""],["GenreReferent","","GenreReferent.html","",""],["Gleaning","","Gleaning.html","",""],["GleaningDecorator","","GleaningDecorator.html","",""],["GleaningsHelper","","GleaningsHelper.html","",""],["GlobalCollectionSuggestion","","GlobalCollectionSuggestion.html","",""],["GlobalCollectionSuggestionPresenter","","GlobalCollectionSuggestionPresenter.html","",""],["Hash","","Hash.html","",""],["HomepageReference","","HomepageReference.html","",""],["ImageReference","","ImageReference.html","",""],["ImagesHelper","","ImagesHelper.html","",""],["IngredientReferent","","IngredientReferent.html","",""],["IntegersCache","","IntegersCache.html","","<p>An IntegersCache presents the default ResultsCache behavior: no scope, no\ncache, degenerate partition …\n"],["IntegersController","","IntegersController.html","",""],["IntegersDecorator","","IntegersDecorator.html","",""],["IntegersHelper","","IntegersHelper.html","",""],["InterestReferent","","InterestReferent.html","",""],["InvitationAcceptedEvent","","InvitationAcceptedEvent.html","","<p>&lt;User&gt; accepted invitation &lt;InvitationSentEvent&gt;\n"],["InvitationAcceptedEventArticulator","","InvitationAcceptedEventArticulator.html","",""],["InvitationDivertedEvent","","InvitationDivertedEvent.html","","<p>&lt;User&gt; diverted invitation &lt;InvitationSentEvent&gt;\n"],["InvitationRespondedEvent","","InvitationRespondedEvent.html","",""],["InvitationResponseEvent","","InvitationResponseEvent.html","","<p>&lt;User&gt; responded to invitation &lt;InvitationSentEvent&gt;\n"],["InvitationSentEvent","","InvitationSentEvent.html","","<p>&lt;User&gt; invited &lt;User&gt; [with &lt;Shared Entity&gt;]\n"],["InvitationSentEventCreateArticulator","","InvitationSentEventCreateArticulator.html","",""],["InvitationsController","","InvitationsController.html","",""],["InvitationsHelper","","InvitationsHelper.html","",""],["ItemHelper","","ItemHelper.html","",""],["LinkHelper","","LinkHelper.html","",""],["List","","List.html","",""],["ListAssociator","","ListAssociator.html","",""],["ListDecorator","","ListDecorator.html","",""],["ListItem","","ListItem.html","",""],["ListPresenter","","ListPresenter.html","",""],["ListReferent","","ListReferent.html","",""],["ListSerializer","","ListSerializer.html","",""],["ListServices","","ListServices.html","",""],["ListedEvent","","ListedEvent.html","","<p>&lt;User&gt; listed &lt;Entity&gt; [in] &lt;Treasury&gt;\n"],["ListsAssociatedCache","","ListsAssociatedCache.html","",""],["ListsAssociatedPresenter","","ListsAssociatedPresenter.html","",""],["ListsContentsCache","","ListsContentsCache.html","",""],["ListsContentsPresenter","","ListsContentsPresenter.html","",""],["ListsController","","ListsController.html","",""],["ListsDecorator","","ListsDecorator.html","",""],["ListsHelper","","ListsHelper.html","",""],["ListsIndexCache","","ListsIndexCache.html","","<p>list of lists visible to the viewer\n"],["ListsIndexPresenter","","ListsIndexPresenter.html","","<p>Present the entries associated with a list\n"],["ListsShowCache","","ListsShowCache.html","","<p>list&#39;s content visible to current user (ListStreamer)\n"],["ListsShowPresenter","","ListsShowPresenter.html","",""],["ListsTable","","ListsTable.html","",""],["LoginEvent","","LoginEvent.html","","<p>&lt;User&gt; logged in\n"],["MasonryHelper","","MasonryHelper.html","",""],["MercuryData","","MercuryData.html","",""],["MercuryPageDecorator","","MercuryPageDecorator.html","",""],["ModelDecorator","","ModelDecorator.html","","<p>This class of Decorator handles ALL persisted object classes. It defines\nconvenience methods for deriving …\n"],["ModelSearch","","ModelSearch.html","","<p>…for a ResultsCache based on a table of a particular model, which\npresumably has scope for string searching …\n"],["MyConstants","","MyConstants.html","",""],["NavtabsHelper","","NavtabsHelper.html","",""],["NestedAttributesHelper","","NestedAttributesHelper.html","",""],["NestedBenchmark","","NestedBenchmark.html","",""],["NilClass","","NilClass.html","",""],["NotificationPresenter","","NotificationPresenter.html","",""],["NotificationsHelper","","NotificationsHelper.html","",""],["NotifsHelper","","NotifsHelper.html","",""],["NotifsSection","","NotifsSection.html","",""],["NullResults","","NullResults.html","","<p>A DefaultSearch is a shell for handling the case where there ARE no results\nto manage (eg., in a #show …\n"],["NutrientReferent","","NutrientReferent.html","",""],["Object","","Object.html","",""],["OccasionReferent","","OccasionReferent.html","",""],["OrgOptions","","OrgOptions.html","","<p>Repository for org options on ResultsCaches\n"],["PageRef","","PageRef.html","","<p>A PageRef is a record for storing the Mercury (nee Readability) summary of\na Web page. Besides storing …\n"],["PageRefDecorator","","PageRefDecorator.html","",""],["PageRefPresenter","","PageRefPresenter.html","",""],["PageRefServices","","PageRefServices.html","",""],["PageRefsController","","PageRefsController.html","",""],["PageRefsHelper","","PageRefsHelper.html","",""],["PageletsHelper","","PageletsHelper.html","",""],["Pagerefable","","Pagerefable.html","","<p>Manage a URL associated with a model such that the URL is unique across the\nmodel&#39;s class\n"],["Pagerefable::ClassMethods","","Pagerefable/ClassMethods.html","",""],["PagesController","","PagesController.html","",""],["PagesHelper","","PagesHelper.html","",""],["PanelHelper","","PanelHelper.html","",""],["PantrySectionReferent","","PantrySectionReferent.html","",""],["Partition","","Partition.html","","<p>A partition is an array of offsets within another array or a scope,\ndenoting the boundaries of groups …\n"],["PasswordsController","","PasswordsController.html","",""],["PasswordsHelper","","PasswordsHelper.html","",""],["PicPickerHelper","","PicPickerHelper.html","",""],["Picable","","Picable.html","","<p>A picable class has an associated image\n"],["Picable::ClassMethods","","Picable/ClassMethods.html","","<p>include Linkable\n"],["PostedEvent","","PostedEvent.html","","<p>&lt;Feed&gt; posted &lt;FeedEntry&gt;\n"],["PrivateSubscription","","PrivateSubscription.html","",""],["ProcessReferent","","ProcessReferent.html","",""],["Product","","Product.html","",""],["PublishedEvent","","PublishedEvent.html","","<p>&lt;User&gt; published &lt;List&gt; Published new list\n"],["QuerifyHelper","","QuerifyHelper.html","",""],["QueryHelper","","QueryHelper.html","",""],["Querytags","","Querytags.html","",""],["QuestionReferent","","QuestionReferent.html","",""],["RPCrypt","","RPCrypt.html","",""],["RPDOM","","RPDOM.html","","<p>Class RPDOM supports manipulation of the DOM tree in pursuit of parsing.\n"],["RPDeviseMailer","","RPDeviseMailer.html","",""],["Rating","","Rating.html","",""],["RatingsController","","RatingsController.html","",""],["RatingsHelper","","RatingsHelper.html","",""],["Rcpref","","Rcpref.html","","<p>Rcpref is the join table between users and entities, denoting that a user\nhas either collected the entity …\n"],["RcprefDecorator","","RcprefDecorator.html","",""],["RcprefServices","","RcprefServices.html","",""],["RcprefsHelper","","RcprefsHelper.html","",""],["RecentCollectionSuggestion","","RecentCollectionSuggestion.html","",""],["RecentCollectionSuggestionPresenter","","RecentCollectionSuggestionPresenter.html","",""],["Recipe","","Recipe.html","",""],["RecipeDecorator","","RecipeDecorator.html","",""],["RecipePresenter","","RecipePresenter.html","",""],["RecipeServices","","RecipeServices.html","",""],["RecipeSuggestion","","RecipeSuggestion.html","",""],["RecipeSuggestionPresenter","","RecipeSuggestionPresenter.html","",""],["RecipesAssociatedCache","","RecipesAssociatedCache.html","",""],["RecipesAssociatedPresenter","","RecipesAssociatedPresenter.html","",""],["RecipesController","","RecipesController.html","",""],["RecipesHelper","","RecipesHelper.html","",""],["RedirectController","","RedirectController.html","",""],["RedirectDecorator","","RedirectDecorator.html","",""],["RedirectHelper","","RedirectHelper.html","",""],["RefereeServices","","RefereeServices.html","",""],["Reference","","Reference.html","",""],["ReferenceCache","","ReferenceCache.html","",""],["ReferenceDecorator","","ReferenceDecorator.html","",""],["ReferenceServices","","ReferenceServices.html","",""],["ReferencesController","","ReferencesController.html","",""],["ReferencesHelper","","ReferencesHelper.html","",""],["ReferencesIndexCache","","ReferencesIndexCache.html","",""],["ReferencesIndexPresenter","","ReferencesIndexPresenter.html","","<p>Present the entries associated with a list\n"],["ReferencesTable","","ReferencesTable.html","",""],["Referent","","Referent.html","",""],["ReferentCache","","ReferentCache.html","",""],["ReferentDecorator","","ReferentDecorator.html","",""],["ReferentPresenter","","ReferentPresenter.html","",""],["ReferentRelation","","ReferentRelation.html","",""],["ReferentRelationValidator","","ReferentRelationValidator.html","",""],["ReferentServices","","ReferentServices.html","",""],["ReferentValidator","","ReferentValidator.html","",""],["ReferentsAssociatedCache","","ReferentsAssociatedCache.html","",""],["ReferentsAssociatedPresenter","","ReferentsAssociatedPresenter.html","",""],["ReferentsController","","ReferentsController.html","",""],["ReferentsHelper","","ReferentsHelper.html","",""],["ReferentsIndexCache","","ReferentsIndexCache.html","",""],["ReferentsIndexPresenter","","ReferentsIndexPresenter.html","","<p>Present the entries associated with a list\n"],["ReferentsTable","","ReferentsTable.html","",""],["Referment","","Referment.html","",""],["RefermentDecorator","","RefermentDecorator.html","",""],["RefermentServices","","RefermentServices.html","",""],["RefermentsController","","RefermentsController.html","",""],["RefermentsHelper","","RefermentsHelper.html","",""],["Referrable","","Referrable.html","","<p>A Referrable class can be linked to a Referent.  Referrable classes are\nsubclasses of PageRef, not including …\n"],["Registrar","","Registrar.html","","<p>The Registrar class registers scraping findings with the database\n"],["RegistrationsController","","RegistrationsController.html","",""],["RegistrationsHelper","","RegistrationsHelper.html","",""],["Reloader","","Reloader.html","",""],["Reloader::SSE","","Reloader/SSE.html","",""],["ResponseServices","","ResponseServices.html","","<p>Class to govern production of pages and dialogs depending on context and\nparams Format:\n<p>&gt; page\n<p>&gt; …\n"],["Result","","Result.html","",""],["ResultType","","ResultType.html","",""],["ResultTyping","","ResultTyping.html","","<p>Support for ResultsCache classes which filter by result_type and (possibly)\nsubtype Includes translation …\n"],["Results","","Results.html","",""],["ResultsCache","","ResultsCache.html","",""],["RoleReferent","","RoleReferent.html","",""],["RpEvent","","RpEvent.html","",""],["RpEventDecorator","","RpEventDecorator.html","",""],["RpEventsController","","RpEventsController.html","",""],["RpEventsHelper","","RpEventsHelper.html","",""],["RpMailer","","RpMailer.html","",""],["Sass","","Sass.html","",""],["Sass::Script","","Sass/Script.html","",""],["Sass::Script::Functions","","Sass/Script/Functions.html","","<p>This contains functions for use with a project <strong>only</strong> using\nCompass.\n"],["Scale","","Scale.html","",""],["ScalesController","","ScalesController.html","",""],["ScalesHelper","","ScalesHelper.html","",""],["Scraper","","Scraper.html","","<p>The scraper class exists to scrape pages: one per scraper. The scraper\neither: 1) generates more scrapers …\n"],["ScraperController","","ScraperController.html","",""],["ScraperDecorator","","ScraperDecorator.html","",""],["ScraperHelper","","ScraperHelper.html","",""],["SearchAggregator","","SearchAggregator.html","","<p>A SearchAggregator is a special SearchNode that collects the results of\nanother set of search nodes and …\n"],["SearchController","","SearchController.html","",""],["SearchDecorator","","SearchDecorator.html","",""],["SearchHelper","","SearchHelper.html","",""],["SearchIndexCache","","SearchIndexCache.html","",""],["SearchIndexPresenter","","SearchIndexPresenter.html","",""],["SearchNode","","SearchNode.html","","<p>This class implements a tree that searches for relevance-weighted items in\norder. Each node in the tree …\n"],["SeekerHelper","","SeekerHelper.html","",""],["SessionsController","","SessionsController.html","",""],["SessionsHelper","","SessionsHelper.html","",""],["SharedEvent","","SharedEvent.html","","<p>&lt;User&gt; shared &lt;Entity&gt; [with] &lt;User&gt;\n"],["SharedEventCreateArticulator","","SharedEventCreateArticulator.html","",""],["SignupEvent","","SignupEvent.html","","<p>&lt;User&gt; logged in\n"],["SignupEventArticulator","","SignupEventArticulator.html","",""],["Site","","Site.html","",""],["SiteAssociator","","SiteAssociator.html","",""],["SiteDecorator","","SiteDecorator.html","",""],["SitePresenter","","SitePresenter.html","",""],["SiteServices","","SiteServices.html","",""],["SitesAssociatedCache","","SitesAssociatedCache.html","",""],["SitesAssociatedPresenter","","SitesAssociatedPresenter.html","",""],["SitesController","","SitesController.html","",""],["SitesFeedsCache","","SitesFeedsCache.html","",""],["SitesFeedsPresenter","","SitesFeedsPresenter.html","",""],["SitesHelper","","SitesHelper.html","",""],["SitesIndexCache","","SitesIndexCache.html","",""],["SitesIndexPresenter","","SitesIndexPresenter.html","",""],["SitesRecipesCache","","SitesRecipesCache.html","",""],["SitesShowCache","","SitesShowCache.html","",""],["SitesTable","","SitesTable.html","",""],["SourceReferent","","SourceReferent.html","",""],["SpritesHelper","","SpritesHelper.html","",""],["StoreSectionReferent","","StoreSectionReferent.html","",""],["StreamController","","StreamController.html","",""],["StreamHelper","","StreamHelper.html","",""],["StreamPresentation","","StreamPresentation.html","",""],["String","","String.html","",""],["StringsHelper","","StringsHelper.html","",""],["Suggestion","","Suggestion.html","",""],["SuggestionDecorator","","SuggestionDecorator.html","",""],["SuggestionPresenter","","SuggestionPresenter.html","",""],["SuggestionServices","","SuggestionServices.html","",""],["SuggestionsController","","SuggestionsController.html","",""],["SuggestionsHelper","","SuggestionsHelper.html","",""],["TableHelper","","TableHelper.html","",""],["TablePresenter","","TablePresenter.html","",""],["Tag","","Tag.html","",""],["TagAssociator","","TagAssociator.html","",""],["TagDecorator","","TagDecorator.html","",""],["TagOwner","","TagOwner.html","",""],["TagOwnerServices","","TagOwnerServices.html","",""],["TagPresenter","","TagPresenter.html","",""],["TagSearch","","TagSearch.html","","<p>Search for tags, typically for TagsController#index\n"],["TagSearch::ClassMethods","","TagSearch/ClassMethods.html","",""],["TagSelection","","TagSelection.html","",""],["TagSelectionDecorator","","TagSelectionDecorator.html","",""],["TagSelectionsController","","TagSelectionsController.html","",""],["TagSelectionsHelper","","TagSelectionsHelper.html","",""],["TagServices","","TagServices.html","",""],["TagSuggestion","","TagSuggestion.html","",""],["TagSuggestionPresenter","","TagSuggestionPresenter.html","",""],["Taggable","","Taggable.html","",""],["TaggableAssociator","","TaggableAssociator.html","",""],["TaggableHelper","","TaggableHelper.html","",""],["TaggableSearch","","TaggableSearch.html","",""],["Tagging","","Tagging.html","",""],["TaggingDecorator","","TaggingDecorator.html","",""],["TaggingServices","","TaggingServices.html","",""],["TagsAssociatedCache","","TagsAssociatedCache.html","",""],["TagsAssociatedPresenter","","TagsAssociatedPresenter.html","","<p>Present the entries associated with a list\n"],["TagsCache","","TagsCache.html","",""],["TagsController","","TagsController.html","",""],["TagsHelper","","TagsHelper.html","",""],["TagsIndexCache","","TagsIndexCache.html","",""],["TagsIndexPresenter","","TagsIndexPresenter.html","",""],["TagsTable","","TagsTable.html","",""],["Tagset","","Tagset.html","",""],["TagsetDecorator","","TagsetDecorator.html","",""],["TagsetHelper","","TagsetHelper.html","",""],["TagsetsController","","TagsetsController.html","",""],["TagsetsHelper","","TagsetsHelper.html","",""],["TemplateDecorator","","TemplateDecorator.html","",""],["TemplateHelper","","TemplateHelper.html","",""],["Templateer","","Templateer.html","",""],["TimeReferent","","TimeReferent.html","",""],["TokenInput","","TokenInput.html","","<p>SimpleForm (github.com/plataformatec/simple_form) jQuery Tokenninput\n(loopj.com/jquery-tokeninput/)\n"],["TokenInputHelper","","TokenInputHelper.html","",""],["ToolReferent","","ToolReferent.html","",""],["ToutedEvent","","ToutedEvent.html","","<p>&lt;User&gt; touted &lt;Entity&gt; Touted an entity\n"],["TriggersHelper","","TriggersHelper.html","",""],["TypeMap","","TypeMap.html","",""],["Typeable","","Typeable.html","","<p>Management of type fields made easy\n"],["Typeable::ClassMethods","","Typeable/ClassMethods.html","",""],["UnitReferent","","UnitReferent.html","",""],["UploaderHelper","","UploaderHelper.html","",""],["User","","User.html","",""],["UserAssociator","","UserAssociator.html","",""],["UserCollectedListsCache","","UserCollectedListsCache.html","","<p>Provide the set of lists the user has collected, but only those visible to\nher\n"],["UserContentPresenter","","UserContentPresenter.html","","<p>Present a list of items for a user\n"],["UserDecorator","","UserDecorator.html","","<p>require “templateer.rb”\n"],["UserFeedsCache","","UserFeedsCache.html","",""],["UserFriendsCache","","UserFriendsCache.html","",""],["UserFunc","","UserFunc.html","","<p>A mixin for ResultsCaches responding to the User controller\n"],["UserListsCache","","UserListsCache.html","","<p>user&#39;s lists visible to current_user (UserListsStreamer\n"],["UserOwnedListsCache","","UserOwnedListsCache.html","","<p>Provide the set of lists the user owns\n"],["UserPresenter","","UserPresenter.html","",""],["UserRelation","","UserRelation.html","",""],["UserRelationValidator","","UserRelationValidator.html","",""],["UserServices","","UserServices.html","",""],["UserSuggestion","","UserSuggestion.html","",""],["UserSuggestionPresenter","","UserSuggestionPresenter.html","",""],["Users","","Users.html","",""],["Users::NotificationsController","","Users/NotificationsController.html","",""],["Users::NotificationsWithDeviseController","","Users/NotificationsWithDeviseController.html","",""],["Users::SubscriptionsController","","Users/SubscriptionsController.html","",""],["Users::SubscriptionsWithDeviseController","","Users/SubscriptionsWithDeviseController.html","",""],["UsersAssociatedCache","","UsersAssociatedCache.html","",""],["UsersBiglistCache","","UsersBiglistCache.html","","<p>user&#39;s collection visible to viewer (UserCollectionStreamer)\n"],["UsersBiglistPresenter","","UsersBiglistPresenter.html","",""],["UsersCollectionCache","","UsersCollectionCache.html","",""],["UsersCollectionPresenter","","UsersCollectionPresenter.html","",""],["UsersController","","UsersController.html","",""],["UsersController::ActiveRecord","","UsersController/ActiveRecord.html","",""],["UsersHelper","","UsersHelper.html","",""],["UsersIndexCache","","UsersIndexCache.html","","<p>users: list of users visible to current_user (UsersStreamer)\n"],["UsersIndexPresenter","","UsersIndexPresenter.html","",""],["UsersRecentCache","","UsersRecentCache.html","","<p>user&#39;s collection visible to current_user (UserCollectionStreamer)\n"],["UsersRecentPresenter","","UsersRecentPresenter.html","",""],["UsersShowCache","","UsersShowCache.html","","<p>Cache for facets of a user&#39;s collection, in fact just a stub for\nselecting other classes\n"],["UsersTable","","UsersTable.html","",""],["ViewParams","","ViewParams.html","","<p>This class bundles up the parameters used in views off the presenter.\n"],["Vote","","Vote.html","","<p>For going from votes to popularity, see \nwww.akitaonrails.com/2016/10/31/ruby-on-rails-implementation-of-a-proper-ranking-popularity-system?utm_source=rubyweekly&utm_medium=email\n…\n"],["VoteDecorator","","VoteDecorator.html","",""],["Voteable","","Voteable.html","",""],["VotesController","","VotesController.html","",""],["VotesHelper","","VotesHelper.html","",""],["Www_bbc_co_uk_Scraper","","Www_bbc_co_uk_Scraper.html","",""],["Www_seriouseats_com_Scraper","","Www_seriouseats_com_Scraper.html","","<p>Scraper for SeriousEats\n"],["DOMstrip","RPDOM","RPDOM.html#method-c-DOMstrip","(noko, level)","<p>Turn a Nokogiri document into a minimal HTML stream for parsing “Minimal”\nmeans that the HTML …\n"],["QA","SiteServices","SiteServices.html#method-c-QA","()","<p>Examine each site and confirm that its sample page URL matches a recipe\n"],["[]","Counts","Counts.html#method-i-5B-5D","(ix)",""],["about","PagesController","PagesController.html#method-i-about","()",""],["about","TagPresenter","TagPresenter.html#method-i-about","()",""],["about","UserPresenter","UserPresenter.html#method-i-about","()",""],["absolutize","Registrar","Registrar.html#method-i-absolutize","(link_or_path, attr=:href)","<p>Ensure that a given link (or Nokogiri spec or Mechanize node) has a valid\nurl\n"],["absorb","Collectible","Collectible.html#method-i-absorb","(other)","<p>One collectible is being merged into another, so add the new one to the\ncollectors of the old one\n"],["absorb","CollectibleController","CollectibleController.html#method-i-absorb","()","<p>Absorb another collectible of the same type, denoted by params NB:\nobviously, this only works if the …\n"],["absorb","PageRefServices","PageRefServices.html#method-i-absorb","(other, force=false)","<p>Eliminate redundancy in the PageRefs by folding two into one\n"],["absorb","Pagerefable","Pagerefable.html#method-i-absorb","(other)","<p>One linkable is being merged into another =&gt; transfer PageRefs\n"],["absorb","Picable","Picable.html#method-i-absorb","(other)","<p>One picable is being merged into another =&gt; transfer image\n"],["absorb","Recipe","Recipe.html#method-i-absorb","(other, destroy=true)","<p>Absorb another recipe\n"],["absorb","Referent","Referent.html#method-i-absorb","(other, nuke_it=true)",""],["absorb","Site","Site.html#method-i-absorb","(other, destroy=true)","<p>Merge another site into this one, optionally destroying the other\n"],["absorb","Tag","Tag.html#method-i-absorb","(other, delete=true)","<p>Use this tag instead of &#39;other&#39;, i.e., absorb its taggings,\nreferents, etc. Either delete the …\n"],["absorb","Taggable","Taggable.html#method-i-absorb","(other)","<p>One collectible is being merged into another =&gt; transfer taggings\n"],["absorb","User","User.html#method-i-absorb","(other)","<p>Absorb another user into self\n"],["absorb","Voteable","Voteable.html#method-i-absorb","(other)","<p>Absorb the votes from another into self\n"],["accept_if","ListServices","ListServices.html#method-c-accept_if","(list, status)",""],["accordions","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-accordions","(enclosure_selector=nil, extractions={})",""],["act","RpEvent","RpEvent.html#method-i-act","(notification, options={})","<p>The target user of the notification responds to the event. Do something…\n"],["act","SharedEvent","SharedEvent.html#method-i-act","(notification, options={})","<p>Act on a Shared event by adding the entity to the collection of the user\nshared with Return a string …\n"],["action_summary","ControllerUtils","ControllerUtils.html#method-i-action_summary","(controller, action)","<p>Craft a string for describing an action\n"],["active_record_class_from_association_method_name","Object","Object.html#method-i-active_record_class_from_association_method_name","(methstr)",""],["add_child","ReferentsController","ReferentsController.html#method-i-add_child","()","<p>/referents/connect?parent=&amp;child=\n"],["add_expression","Referent","Referent.html#method-i-add_expression","()","<p>This is a virtual attribute for the benefit of the referent editor, which\nhas a tokenInput field for …\n"],["add_expression=","Referent","Referent.html#method-i-add_expression-3D","(tag)",""],["add_followee","User","User.html#method-i-add_followee","(friend)",""],["add_to_list","Registrar","Registrar.html#method-c-add_to_list","(item, list, options={})",""],["admin","PagesController","PagesController.html#method-i-admin","()",""],["admin_view?","ResponseServices","ResponseServices.html#method-i-admin_view-3F","()",""],["admit_user","Tag","Tag.html#method-i-admit_user","(uid = nil)","<p>Expose this tag to the given user; if user is nil or super, make the tag\nglobal\n"],["adopt","PageRefServices","PageRefServices.html#method-i-adopt","(other, force=false)","<p>Use the attributes of another (presumably b/c a new, identical page_ref is\nbeing created)\n"],["adopt_gleaning","Recipe","Recipe.html#method-i-adopt_gleaning","()","<p>This is called when the page_ref finishes updating\n"],["adopt_gleaning","Site","Site.html#method-i-adopt_gleaning","()","<p>This is called when the page_ref finishes updating\n"],["adopt_gleaning","Taggable","Taggable.html#method-i-adopt_gleaning","()","<p>We can&#39;t get here if we&#39;re not Pagerefable\n"],["affiliates","Referent","Referent.html#method-i-affiliates","()",""],["affiliates","SourceReferent","SourceReferent.html#method-i-affiliates","()",""],["after","Backgroundable","Backgroundable.html#method-i-after","(job=nil)","<p>The #after hook is called after #success and #error At this point, the dj\nrecord persists iff there was …\n"],["after","Feed","Feed.html#method-i-after","(job)",""],["after","ImageReference","ImageReference.html#method-i-after","(dj)",""],["after","RpEvent","RpEvent.html#method-c-after","(time)","<p>Events occuring after the given time\n"],["after_accept_path_for","InvitationsController","InvitationsController.html#method-i-after_accept_path_for","(resource)",""],["after_gleaning","SiteDecorator","SiteDecorator.html#method-i-after_gleaning","(gleaning=object.gleaning)",""],["after_invite_path_for","InvitationsController","InvitationsController.html#method-i-after_invite_path_for","(resource)",""],["after_sign_out_path_for","SessionsController","SessionsController.html#method-i-after_sign_out_path_for","(resource)","<p>Normally we go back to the home page, but if a notification is waiting, we\ngo to its target (if any) …\n"],["aggregate_user_table_row","AdminHelper","AdminHelper.html#method-i-aggregate_user_table_row","(row, field)",""],["aliases","Tag","Tag.html#method-i-aliases","()","<p>Return a list of tags that “could be” a match for this one, as judged by\nlosing the distinction …\n"],["aliases_to?","UserDecorator","UserDecorator.html#method-i-aliases_to-3F","(user_or_id)","<p>Is the object an alias for another user\n"],["all_types","Typeable::ClassMethods","Typeable/ClassMethods.html#method-i-all_types","()","<p>Return a list of all valid types\n"],["allowable","RPDOM","RPDOM.html#method-c-allowable","(name)",""],["amend","ResponseServices","ResponseServices.html#method-i-amend","(origin_url)","<p>Change the response parameters to accommodate another URL, e.g. one that\ncame in via omniauth\n"],["analyze","AnalyticsServices","AnalyticsServices.html#method-c-analyze","(length=:monthly, num_cols=3, beforehand=true)","<p>Compile analytics over a series of intervals and return an array of\nresults, one for each interval.  …\n"],["analyze_request","Object","Object.html#method-i-analyze_request","(url, imposed_query={})","<p>Break a request into path and query components. Return a hash whose :path\nmember is the path and :query …\n"],["ancestor_path_to","ReferentServices","ReferentServices.html#method-i-ancestor_path_to","(other)","<p>Provide an array of referents denoting the lineage from &#39;other&#39; to\nthis referent\n"],["answers_to?","PageRef","PageRef.html#method-i-answers_to-3F","(qurl, kind=nil)","<p>Will this page_ref be found when looking for a page_ref of the given type\nand url?\n"],["applicable_finders","FinderServices","FinderServices.html#method-c-applicable_finders","(site=nil, *labels)","<p>Return the set of finders that apply to the site (those assigned to the\nsite, then global ones)\n"],["applies_to_url","Site","Site.html#method-c-applies_to_url","(link)","<p>Return a scope for sites that could apply to the given link\n"],["apply","Candihash","Candihash.html#method-i-apply","(newset, weight=1.0)","<p>Apply a new set of keys to the existing set\n"],["apply_omniauth","User","User.html#method-i-apply_omniauth","(omniauth)",""],["approve","ApplicationController","ApplicationController.html#method-i-approve","()","<p>Generic action for approving an entity\n"],["approved","FeedsIndexCache","FeedsIndexCache.html#method-i-approved","()",""],["approved","SitesIndexCache","SitesIndexCache.html#method-i-approved","()","<p>def max_window_size\n\n<pre class=\"ruby\"><span class=\"ruby-value\">10</span>\n</pre>\n<p>end\n"],["arity","CollectibleDecorator","CollectibleDecorator.html#method-i-arity","(fieldname)","<p>Define presentation-specific methods here. Helpers are accessed through\n`helpers` (aka `h`). You can …\n"],["arm_seeker_stream","SeekerHelper","SeekerHelper.html#method-i-arm_seeker_stream","(enclosing_element, querypath, options={})","<p>Set up a DOM element to receive a stream of seeker results\n"],["articulates","Articulator","Articulator.html#method-c-articulates","(*keys)",""],["assert","List","List.html#method-c-assert","(name, user, options={})","<p>Using the name string, either find an existing list or create a new one FOR\nTHE CURRENT USER\n"],["assert","PageRefServices","PageRefServices.html#method-c-assert","(kind, url)","<p>Ensure the existence of a page_ref of a particular kind with the given url\n"],["assert","Scraper","Scraper.html#method-c-assert","(url, what=nil, recur=true)","<p>Assert a scraper by url what: if given, it forces the class of scraper\n\n<pre>if not given, the scraper class ...</pre>\n"],["assert","Tag","Tag.html#method-c-assert","(tag_or_id_or_name, tagtype=nil, opts = {})","<p>Taking either a tag, a string or an id, make sure there&#39;s a\ncorresponding tag\n\n<pre>of the given type that&#39;s ...</pre>\n"],["assert","TaggingServices","TaggingServices.html#method-i-assert","(tag, owner_id)",""],["assert_feed","Site","Site.html#method-i-assert_feed","(url, approved=false)",""],["assert_image_for_referent","ReferenceServices","ReferenceServices.html#method-c-assert_image_for_referent","(uri, tag_or_referent)","<p>Assert an image, linking back to a referent\n"],["assert_kind","RefereeServices","RefereeServices.html#method-i-assert_kind","(kind, promote=false)","<p>Ensure a Pagerefable referee matches the kind of its page ref Return the\noriginal object (if the kind …\n"],["assert_query","Object","Object.html#method-i-assert_query","(url, format=nil, newparams={})","<p>Ensure that a hash of query parameters makes it into the given url. A\nformat may also be asserted\n"],["assert_referent","PageRef","PageRef.html#method-i-assert_referent","(rft)","<p>Associate this page_ref with the given referent. NB: had better be a\nReferrableReferent or subclass thereof …\n"],["assert_referment","ReferentServices","ReferentServices.html#method-i-assert_referment","(kind, url)","<p>Ensure the existence of a Referment of a particular kind with the given url\n"],["assert_result","Results","Results.html#method-i-assert_result","(label, val_or_vals)",""],["assert_tag","UserDecorator","UserDecorator.html#method-i-assert_tag","(tag, user=nil, status=nil)","<p>define method to add to the results array\n"],["assert_tagging","Taggable","Taggable.html#method-i-assert_tagging","(tag_or_id, uid)","<p>Manage taggings of a given user\n"],["assert_words","String","String.html#method-i-assert_words","(new)","<p>Ensure that the space-separated string of words includes those listed in\nnew\n"],["asset_url","Sass::Script::Functions","Sass/Script/Functions.html#method-i-asset_url","(asset, type)","<p>Define asset_url for Compass to allow use of sprites.\n"],["assimilate_finder_results","Gleaning","Gleaning.html#method-i-assimilate_finder_results","(results_hash)","<p>Add results (presumably from a new finder) to the results in a gleaning\n"],["associate","ListServices","ListServices.html#method-c-associate","(entity_or_decorator, ntags, uid)","<p>List tags are handled specially, due to ownership of lists\n"],["associate","Referent","Referent.html#method-i-associate","()","<p>The associate is the model associated with any particular class of\nreferent, if any By default, referents …\n"],["associate","SourceReferent","SourceReferent.html#method-i-associate","()",""],["associate","TagsController","TagsController.html#method-i-associate","()","<p>POST /id/associate Associate the tag with another, according to params:\n\n<pre>-- &#39;synonym&#39; means to make the ...</pre>\n"],["associated","CollectibleController","CollectibleController.html#method-i-associated","()",""],["associated","TagsController","TagsController.html#method-i-associated","()",""],["associated_lists","ListServices","ListServices.html#method-c-associated_lists","(entity_or_decorator, user_or_user_id=nil)","<p>Compile the set of lists, leaving the status intact but optionally\nuniquifying the lists\n"],["associated_lists_with_status","ListServices","ListServices.html#method-c-associated_lists_with_status","(entity_or_decorator, user_or_user_id=nil)","<p>Get the lists on which the entity appears, as visible to the user\n"],["at_left","NestedBenchmark","NestedBenchmark.html#method-c-at_left","(msg, indent)","<p>Make the string for embedding before the numbers\n"],["attrib_name","Typeable::ClassMethods","Typeable/ClassMethods.html#method-i-attrib_name","()",""],["attribute_choices","FinderServices","FinderServices.html#method-c-attribute_choices","()",""],["attribute_for","ModelDecorator","ModelDecorator.html#method-i-attribute_for","(what)","<p>Translation from label names to attribute names\n"],["attribute_name_for","CollectibleDecorator","CollectibleDecorator.html#method-i-attribute_name_for","(label)",""],["attributes_hash","Finder","Finder.html#method-i-attributes_hash","()",""],["attrmap","ModelDecorator","ModelDecorator.html#method-c-attrmap","()","<p>Define the attributes of the model in a way amenable to translating between\ntypes This is a hash whose …\n"],["attrmap","PageRefDecorator","PageRefDecorator.html#method-c-attrmap","()","<p>include Templateer delegate_all\n"],["attrmap","RecipeDecorator","RecipeDecorator.html#method-c-attrmap","()",""],["attrmap","SiteDecorator","SiteDecorator.html#method-c-attrmap","()",""],["attrmap_inverted","ModelDecorator","ModelDecorator.html#method-c-attrmap_inverted","()",""],["auth_possible","AuthenticationsHelper","AuthenticationsHelper.html#method-i-auth_possible","(service, origin, originator, intention, options = {})","<p>Offer an authentication option in the form of an icon and a title\n"],["autobuild","EntityAssociator","EntityAssociator.html#method-c-autobuild","(source_entity, target_entity_type, viewer, weight = 1.0, parent = nil)",""],["availability_query","ListServices","ListServices.html#method-c-availability_query","(user, with_owned=false)","\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Return the set of lists containing the entity (either directly or indrectly) that are visible to the ...</span>\n</pre>\n"],["available?","Tag","Tag.html#method-c-available-3F","(name, type_or_types=nil, options={})","<p>Check if a tag is already defined. type_or_types may specify a single type\nor an array of types. Options: …\n"],["backgroundable","Backgroundable::ClassMethods","Backgroundable/ClassMethods.html#method-i-backgroundable","(status_attribute=:status)",""],["bad!","Backgroundable","Backgroundable.html#method-i-bad-21","()",""],["bail","ReferentServices","ReferentServices.html#method-c-bail","(attribute, err)",""],["banner","Edition","Edition.html#method-i-banner","()",""],["base_class_name","ModelDecorator","ModelDecorator.html#method-i-base_class_name","()",""],["base_object","ModelDecorator","ModelDecorator.html#method-i-base_object","()","<p>Present an STI subclass as the base class\n"],["bbc_chef_home_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_chef_home_page","()",""],["bbc_chef_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_chef_recipes_page","()",""],["bbc_chefs_atoz_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_chefs_atoz_page","()",""],["bbc_chefs_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_chefs_page","()","<p>Recipes, by chef #####################\n"],["bbc_collection_home_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_collection_home_page","()",""],["bbc_course_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_course_recipes_page","()",""],["bbc_cuisine_home_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_cuisine_home_page","()","<p>def bbc_dish_home_page\n\n<pre>dish_name = page.search(&#39;div#column-1 h1&#39;).text.strip.sub /([-\\w]*) recipes/, &#39;\\1&#39; ...</pre>\n"],["bbc_cuisine_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_cuisine_recipes_page","()",""],["bbc_cuisines_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_cuisines_page","()",""],["bbc_define_collection","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_define_collection","(cname, home_link, image_link=nil)",""],["bbc_diet_home_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_diet_home_page","()",""],["bbc_diet_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_diet_recipes_page","()",""],["bbc_dish_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_dish_recipes_page","()",""],["bbc_dishes_atoz_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_dishes_atoz_page","()",""],["bbc_dishes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_dishes_page","()",""],["bbc_food_home_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_food_home_page","()","<p>Handler that covers dish and ingredient home pages, both of which are like\n&#39;/food/&lt;name&gt;&#39; …\n"],["bbc_food_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_food_page","()","<p>The BBC Food home page lists special diets\n"],["bbc_ingredients_by_letter","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_ingredients_by_letter","()",""],["bbc_ingredients_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_ingredients_page","()","<p>Ingredients ############\n"],["bbc_keyword_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_keyword_recipes_page","()",""],["bbc_occasion_home_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_occasion_home_page","()",""],["bbc_occasion_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_occasion_recipes_page","()",""],["bbc_occasions_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_occasions_page","()",""],["bbc_programme_home_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_programme_home_page","()",""],["bbc_programme_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_programme_recipes_page","()",""],["bbc_programmes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_programmes_page","()",""],["bbc_recipe_home_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_recipe_home_page","()",""],["bbc_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_recipes_page","()",""],["bbc_season_home_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_season_home_page","()",""],["bbc_seasons_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_seasons_page","()",""],["bbc_tag_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_tag_recipes_page","(tagtype)","<p>How to process a recipes page due to a search on a tag (after determining\nthe type of tag)\n"],["bbc_technique_home_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_technique_home_page","()",""],["bbc_technique_recipes_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_technique_recipes_page","()",""],["bbc_techniques_page","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-bbc_techniques_page","()",""],["be_collected","Collectible","Collectible.html#method-i-be_collected","(newval=true)",""],["before","Backgroundable","Backgroundable.html#method-i-before","(job=nil)","<p>Before the job is performed, set the object&#39;s status to :processing to\nforestall redundant processing …\n"],["before","RpEvent","RpEvent.html#method-c-before","(time)","<p>Events occuring before the given time\n"],["biglist","UsersController","UsersController.html#method-i-biglist","()","<p>Show the user&#39;s recently-viewed recipes\n"],["bkg_kill","Backgroundable","Backgroundable.html#method-i-bkg_kill","()","<p>Cancel the job nicely, i.e. if it&#39;s running wait till it completes\n"],["bkg_land","Backgroundable","Backgroundable.html#method-i-bkg_land","(force=false)","<p>Glean results synchronously, returning only when status is definitive (good\nor bad) run_early =&gt; do …\n"],["bkg_land","ImageReference","ImageReference.html#method-i-bkg_land","(force=false)",""],["bkg_land","PageRef","PageRef.html#method-i-bkg_land","(force=false)","<p>Glean info synchronously, i.e. don&#39;t return until it&#39;s done force\n=&gt; do the job even if it …\n"],["bkg_land","Pagerefable","Pagerefable.html#method-i-bkg_land","(force=false)","<p>Glean info synchronously, i.e. don&#39;t return until it&#39;s done force\n=&gt; do the job even if it …\n"],["bkg_land!","Backgroundable","Backgroundable.html#method-i-bkg_land-21","(force=false)","<p>Run the job to completion (synchronously) whether it&#39;s due or not\n"],["bkg_launch","Backgroundable","Backgroundable.html#method-i-bkg_launch","(refresh=false, djopts = {})","<p>bkg_launch(refresh, djopts={}) fires off a DelayedJob job as necessary. NB:\nMUST NOT BE CALLED ON AN …\n"],["bkg_launch","ImageReference","ImageReference.html#method-i-bkg_launch","(force=false)","<p>Ensure the thumbdata is up to date, optionally forcing an update even if\npreviously processed\n"],["bkg_launch","PageRef","PageRef.html#method-i-bkg_launch","(force=false)","<p>Glean info from the page in background as a DelayedJob job force =&gt; do\nthe job even if it was priorly …\n"],["block_to_submit","LinkHelper","LinkHelper.html#method-i-block_to_submit","(path_or_options, options={})",""],["body_partial","FilteredPresenter","FilteredPresenter.html#method-i-body_partial","()",""],["body_partial","UserContentPresenter","UserContentPresenter.html#method-i-body_partial","()",""],["bookmarklet","ApplicationHelper","ApplicationHelper.html#method-i-bookmarklet","()",""],["bookmarklet_script","ApplicationHelper","ApplicationHelper.html#method-i-bookmarklet_script","()",""],["bootstrap_button_options","BootstrapHelper","BootstrapHelper.html#method-i-bootstrap_button_options","(options)","<p>Modify an options hash, setting the :class option to reflect :button_size\nand :button_style SIDE EFFECT: …\n"],["bootstrap_css_include_tag","ApplicationHelper","ApplicationHelper.html#method-i-bootstrap_css_include_tag","(use_cdn=true)","<p>The Bootstrap version is that provided by bootstrap-sass\n"],["bootstrap_js_include_tag","ApplicationHelper","ApplicationHelper.html#method-i-bootstrap_js_include_tag","(use_cdn=true)","<p>The Bootstrap version is that provided by bootstrap-sass\n"],["buffer_test","StreamController","StreamController.html#method-i-buffer_test","()",""],["build","CollectibleDecorator","CollectibleDecorator.html#method-c-build","(entity_type, entity_id)","<p>Build an entity and its decorator based on type and ID of an existing\nobject\n"],["build","EntityAssociator","EntityAssociator.html#method-c-build","(source_entity, target_entity_type, viewer, weight = 1.0, parent = nil)",""],["build","FilteredPresenter","FilteredPresenter.html#method-c-build","(view_context, response_service, params, decorator=nil)","<p>Build an instance of the appropriate subclass, given the entity, controller\nand action\n"],["build_by_url","PageRef","PageRef.html#method-c-build_by_url","(url)","<p>Make a new PageRef (poss. of some subclass), carefully avoiding any extant\nURL\n"],["build_child","EntityAssociator","EntityAssociator.html#method-i-build_child","(source_entity, weight = 1.0)",""],["build_child_of_class","EntityAssociator","EntityAssociator.html#method-i-build_child_of_class","(klass, source_entity, weight = 1.0)",""],["build_query","Object","Object.html#method-i-build_query","(params)","<p>Inverse of CGI.parse: take a hash of key/array-of-value pairs and produce a\nquery string NB: THIS ESCAPES …\n"],["build_resource","ApplicationController","ApplicationController.html#method-i-build_resource","(*args)",""],["build_root","EntityAssociator","EntityAssociator.html#method-c-build_root","(target_entity_type, viewer)",""],["button_to_submit","LinkHelper","LinkHelper.html#method-i-button_to_submit","(label, path_or_options, kind='default', size=nil, options={})","<p>A wrapper for flavored_link which asserts either 1) button options for\nBootstrap, or 2) glyphs via sprites …\n"],["buttons","CollectiblePresenter","CollectiblePresenter.html#method-i-buttons","()",""],["by_name","User","User.html#method-c-by_name","(name)","<p>Make sure we have this particular user (who had better be in the seed list)\n"],["cache_and_partition","ResultsCache","ResultsCache.html#method-i-cache_and_partition","()","<p>Convert the scope to a cache of entries, as needed. Two cases: 1) The data\ncan be provided by a single …\n"],["cached_ref","Collectible","Collectible.html#method-i-cached_ref","(force=true)","<p>Return the reference for the given user and this entity, creating a new one\nas necessary If &#39;force&#39; …\n"],["cached_ref_valid?","Collectible","Collectible.html#method-i-cached_ref_valid-3F","()",""],["can_absorb","Tag","Tag.html#method-i-can_absorb","(other)","<p>Pre-check to determine whether a tag can absorb another tag\n"],["cancel_fix","TagDecorator","TagDecorator.html#method-i-cancel_fix","(explanation)",""],["cancel_fix_if","TagDecorator","TagDecorator.html#method-i-cancel_fix_if","(bool, explanation)",""],["canonical_expression=","Referent","Referent.html#method-i-canonical_expression-3D","(tag_or_string)","<p>alias_method :orig_canonical_expression=, :canonical_expression=\n"],["capture","CollectibleController","CollectibleController.html#method-i-capture","()",""],["capture","RecipesController","RecipesController.html#method-i-capture","()","<p>include ApplicationHelper include ActionView::Helpers::TextHelper\n"],["card_aspect","CardPresentation","CardPresentation.html#method-i-card_aspect","(which)",""],["card_aspect","CollectiblePresenter","CollectiblePresenter.html#method-i-card_aspect","(which)",""],["card_aspect","ListPresenter","ListPresenter.html#method-i-card_aspect","(which)",""],["card_aspect","RecipePresenter","RecipePresenter.html#method-i-card_aspect","(which)",""],["card_aspect","ReferentPresenter","ReferentPresenter.html#method-i-card_aspect","(which)",""],["card_aspect","SitePresenter","SitePresenter.html#method-i-card_aspect","(which)",""],["card_aspect","TagPresenter","TagPresenter.html#method-i-card_aspect","(which)",""],["card_aspect","UserPresenter","UserPresenter.html#method-i-card_aspect","(which)",""],["card_aspect_editor","CardPresentation","CardPresentation.html#method-i-card_aspect_editor","(which)",""],["card_aspect_editor_replacement","CardPresentation","CardPresentation.html#method-i-card_aspect_editor_replacement","(which)",""],["card_aspect_enclosure","CardPresentation","CardPresentation.html#method-i-card_aspect_enclosure","(which, contents, label=nil)",""],["card_aspect_rendered","CardPresentation","CardPresentation.html#method-i-card_aspect_rendered","(which)",""],["card_aspect_replacement","CardPresentation","CardPresentation.html#method-i-card_aspect_replacement","(which)",""],["card_aspect_selector","CardPresentation","CardPresentation.html#method-i-card_aspect_selector","(which)",""],["card_aspects","CardPresentation","CardPresentation.html#method-i-card_aspects","(for_column=nil)","<p>Enumerate the possible aspects of the card\n"],["card_aspects","CollectiblePresenter","CollectiblePresenter.html#method-i-card_aspects","(which_column=nil)","<p>def present_field_label what\n\n<pre>label = what.sub &#39;_tags&#39;, &#39;&#39;\ncase field_count(what)\n  when nil, false\n   ...</pre>\n"],["card_aspects","ListPresenter","ListPresenter.html#method-i-card_aspects","(which_column=nil)","<p>Provide a list of aspects for display in the entity&#39;s panel, suitable\nfor passing to card_aspect …\n"],["card_aspects","RecipePresenter","RecipePresenter.html#method-i-card_aspects","(which_column=nil)",""],["card_aspects","ReferentPresenter","ReferentPresenter.html#method-i-card_aspects","(which_column=nil)",""],["card_aspects","SitePresenter","SitePresenter.html#method-i-card_aspects","()",""],["card_aspects","TagPresenter","TagPresenter.html#method-i-card_aspects","(which_column=nil)","<p>Report the aspects for a card on the tag If a block is given, call it for\neach aspect\n"],["card_aspects","UserPresenter","UserPresenter.html#method-i-card_aspects","(which_column=nil)",""],["card_aspects_filtered","CardPresentation","CardPresentation.html#method-i-card_aspects_filtered","(*args)","<p>Select available aspects according to the given arguments The arguments are\nstrings selecting particular …\n"],["card_avatar","CardPresentation","CardPresentation.html#method-i-card_avatar","(options={})",""],["card_avatar","CollectiblePresenter","CollectiblePresenter.html#method-i-card_avatar","(options={})",""],["card_avatar","RecipePresenter","RecipePresenter.html#method-i-card_avatar","(options={})","<p>The recipe&#39;s avatar can be either a video or a straight image\n"],["card_avatar","TagPresenter","TagPresenter.html#method-i-card_avatar","(options={})",""],["card_avatar","UserPresenter","UserPresenter.html#method-i-card_avatar","(options={})","<p>Present the user&#39;s avatar, optionally with a form for uploading the\nimage (if they&#39;re the viewer) …\n"],["card_avatar?","TagPresenter","TagPresenter.html#method-i-card_avatar-3F","()","<p>Does this presenter have an avatar to present on cards, etc?\n"],["card_avatar_accompaniment","CollectiblePresenter","CollectiblePresenter.html#method-i-card_avatar_accompaniment","()",""],["card_avatar_accompaniment","ListPresenter","ListPresenter.html#method-i-card_avatar_accompaniment","()",""],["card_avatar_accompaniment","UserPresenter","UserPresenter.html#method-i-card_avatar_accompaniment","()",""],["card_avatar_column","CardPresentation","CardPresentation.html#method-i-card_avatar_column","()",""],["card_avatar_column","CollectiblePresenter","CollectiblePresenter.html#method-i-card_avatar_column","()","<p>Present the card column in which is embedded the avatar for the entity, and\nthat of is first collector, …\n"],["card_header","CardPresentation","CardPresentation.html#method-i-card_header","()",""],["card_header_content","CardPresentation","CardPresentation.html#method-i-card_header_content","()",""],["card_header_content","SitePresenter","SitePresenter.html#method-i-card_header_content","()",""],["card_header_content","TagPresenter","TagPresenter.html#method-i-card_header_content","()",""],["card_header_content","UserPresenter","UserPresenter.html#method-i-card_header_content","()",""],["card_homelink","CardPresentation","CardPresentation.html#method-i-card_homelink","(options={})","<p>Provide the card&#39;s title with a link to the entity involved NB This is\nmeant to be overridden by …\n"],["card_homelink","TagPresenter","TagPresenter.html#method-i-card_homelink","(options={})",""],["card_homelink","UserPresenter","UserPresenter.html#method-i-card_homelink","(options={})",""],["card_label","BasePresenter","BasePresenter.html#method-i-card_label","()","<p>Recipes don&#39;t have a tab on their card\n"],["card_label","FeedPresenter","FeedPresenter.html#method-i-card_label","()",""],["card_label","ListPresenter","ListPresenter.html#method-i-card_label","()","<p>Lists don&#39;t have a ribbon on their card\n"],["card_label","RecipePresenter","RecipePresenter.html#method-i-card_label","()","<p>Recipes don&#39;t have a tab on their card\n"],["card_label","UserPresenter","UserPresenter.html#method-i-card_label","()","<p>Users don&#39;t have a tab on their card\n"],["card_ncolumns","CardPresentation","CardPresentation.html#method-i-card_ncolumns","()","<p>How many columns does the card have (next to the avatar)\n"],["card_ncolumns","TagPresenter","TagPresenter.html#method-i-card_ncolumns","()",""],["card_ncolumns","UserPresenter","UserPresenter.html#method-i-card_ncolumns","()",""],["card_show_avatar","CollectiblePresenter","CollectiblePresenter.html#method-i-card_show_avatar","()","<p>By default, show the card if there&#39;s an avatar OR a backup avatar\n"],["card_show_avatar","RecipePresenter","RecipePresenter.html#method-i-card_show_avatar","()","<p>Show the avatar on a recipe card only if there&#39;s direct image data\n(i.e., no fallback)\n"],["card_subhead","CardPresentation","CardPresentation.html#method-i-card_subhead","()",""],["card_subhead_content","CardPresentation","CardPresentation.html#method-i-card_subhead_content","()",""],["card_subhead_content","ListPresenter","ListPresenter.html#method-i-card_subhead_content","()",""],["card_video","CardPresentation","CardPresentation.html#method-i-card_video","()",""],["card_video","RecipePresenter","RecipePresenter.html#method-i-card_video","()",""],["card_video?","CardPresentation","CardPresentation.html#method-i-card_video-3F","()",""],["change_tag","ExpressionServices","ExpressionServices.html#method-c-change_tag","(from_id, to_id)","<p>Transfer the expressions of a tag to another by revising their tag_id\n"],["change_tag","ReferentServices","ReferentServices.html#method-c-change_tag","(fromid, toid)","\n<pre># Return the transitive closure of the referent&#39;s ancestors\ndef ancestor_ids &amp;block\n  newset = @referent.parent_ids ...</pre>\n"],["change_tag","TagOwnerServices","TagOwnerServices.html#method-c-change_tag","(from_id, to_id)","<p>Change the owned tag for each record from one tag to another, by id\n"],["change_tag","TaggingServices","TaggingServices.html#method-c-change_tag","(fromid, toid)","<p>Eliminate all references to one tag in favor of another\n"],["check_flash","ApplicationController","ApplicationController.html#method-i-check_flash","()",""],["check_for_notifications","NotificationsHelper","NotificationsHelper.html#method-i-check_for_notifications","()",""],["check_popup","ApplicationHelper","ApplicationHelper.html#method-i-check_popup","(name)",""],["checkbox_menu_item_label","NavtabsHelper","NavtabsHelper.html#method-i-checkbox_menu_item_label","(label, check=false)",""],["child_attenuation","SearchNode","SearchNode.html#method-i-child_attenuation","()","<p>The attenuation at a child is the product of this node&#39;s attenuation\nand its weight\n"],["child_ids","TagServices","TagServices.html#method-c-child_ids","(ids)",""],["child_ids","TagServices","TagServices.html#method-i-child_ids","(unique=false)",""],["child_ids_of_tags","ExpressionServices","ExpressionServices.html#method-c-child_ids_of_tags","(tag_ids, unique=false)","<p>Return all the semantic children of the tag(s) as an array of arrays\n&#39;unique&#39; stipulates that …\n"],["child_referents","TagServices","TagServices.html#method-i-child_referents","()",""],["child_tag_tokens","Referent","Referent.html#method-i-child_tag_tokens","()",""],["child_tag_tokens=","Referent","Referent.html#method-i-child_tag_tokens-3D","(tokenlist)",""],["child_tags","Referent","Referent.html#method-i-child_tags","()",""],["children","TagServices","TagServices.html#method-i-children","(unique=false)",""],["choice_alert","DialogsHelper","DialogsHelper.html#method-i-choice_alert","(title, style, options={})","<p>Construct a dialog that offers the user a choice of actions. Each choice\nwill be expressed as a button …\n"],["clashing_tag","Tag","Tag.html#method-i-clashing_tag","()","<p>Identify a tag that clashes with the (probably new) name and type of this\none (if any)\n"],["clashing_tag?","Tag","Tag.html#method-i-clashing_tag-3F","()","<p>Is there a tag that clashes with the (probably new) name and type of this\none?\n"],["class_for","Articulator","Articulator.html#method-c-class_for","(notifiable, key)",""],["class_name","ModelDecorator","ModelDecorator.html#method-i-class_name","()",""],["class_name","PageRefDecorator","PageRefDecorator.html#method-i-class_name","()","<p>The name for the decorator devolves to the PageRef&#39;s type, since we may\nbe dealing with a subclass …\n"],["classify_listtags","UsersHelper","UsersHelper.html#method-i-classify_listtags","(tokeninputs)","<p>Operate on a set of tag specifications as defined in UserDecorator for\ndirecting a list search Enhance …\n"],["cleanpath","Object","Object.html#method-i-cleanpath","(url)","<p>string -&gt; string If the URL is valid, return only its path, including\ndomain Examples: jibit.com =&gt; …\n"],["cleanupstr","FinderServices","FinderServices.html#method-i-cleanupstr","(str)","<p>Canonicalize strings by collapsing whitespace into a single space\ncharacter, and eliminating spaces immediately …\n"],["clear_all","Scraper","Scraper.html#method-c-clear_all","()",""],["clip","Partition","Partition.html#method-i-clip","(v, range=nil)","<p>Clip a value to the bounds of the partition\n"],["close","Reloader::SSE","Reloader/SSE.html#method-i-close","(data = {})",""],["collect","CollectibleController","CollectibleController.html#method-i-collect","()","<p>protect_from_forgery except: :capture\n"],["collect","PagesController","PagesController.html#method-i-collect","()","<p>Present dialog for collecting a cookmark in a super-simple layout\n"],["collect","User","User.html#method-i-collect","(entity)","<p>Include the entity in the user&#39;s collection\n"],["collect_button","CardPresentation","CardPresentation.html#method-i-collect_button","()",""],["collect_button","CollectiblePresenter","CollectiblePresenter.html#method-i-collect_button","()",""],["collected_by?","ListsDecorator","ListsDecorator.html#method-i-collected_by-3F","(uid)","<p>Define presentation-specific methods here. Helpers are accessed through\n`helpers` (aka `h`). You can …\n"],["collected_lists","UserDecorator","UserDecorator.html#method-i-collected_lists","(viewer=user)",""],["collectible","User","User.html#method-c-collectible","(collectible_class)","<p>has_many :recipes, :through=&gt;:collection_pointers, :source =&gt;\n:entity, :source_type =&gt; &#39;Recipe&#39;, …\n"],["collectible_buttons_all","CollectibleHelper","CollectibleHelper.html#method-i-collectible_buttons_all","()","<p>Styling hash asserting all buttons\n"],["collectible_buttons_available","CollectibleHelper","CollectibleHelper.html#method-i-collectible_buttons_available","()","<p>List of buttons in the panel\n"],["collectible_buttons_panel","CollectibleHelper","CollectibleHelper.html#method-i-collectible_buttons_panel","(decorator, size=nil, styling={})","<p>Render the set of collectible buttons\n"],["collectible_buttons_panel_replacement","CollectibleHelper","CollectibleHelper.html#method-i-collectible_buttons_panel_replacement","(decorator)",""],["collectible_collect_button","CollectibleHelper","CollectibleHelper.html#method-i-collectible_collect_button","(decorator, size = nil, options={})",""],["collectible_collect_button_replacement","CollectibleHelper","CollectibleHelper.html#method-i-collectible_collect_button_replacement","(decorator, size = nil, options={})",""],["collectible_collected?","Collectible","Collectible.html#method-i-collectible_collected-3F","(uid=nil)","<p>Does the entity appear in the user&#39;s collection?\n"],["collectible_comment","Collectible","Collectible.html#method-i-collectible_comment","()",""],["collectible_comment=","Collectible","Collectible.html#method-i-collectible_comment-3D","(str)",""],["collectible_destroy_button","CollectibleHelper","CollectibleHelper.html#method-i-collectible_destroy_button","(decorator, size = nil, options={})",""],["collectible_edit_button","CollectibleHelper","CollectibleHelper.html#method-i-collectible_edit_button","(decorator, size=nil, styling={})","<p>Standardized glyph buttons for collectibles ##########################\n"],["collectible_editpic_button","CollectibleHelper","CollectibleHelper.html#method-i-collectible_editpic_button","(decorator, size=nil, styling={})","<p>Provide the button for uploading an image\n"],["collectible_from_card?","CardPresentation","CardPresentation.html#method-i-collectible_from_card-3F","()",""],["collectible_from_card?","CollectiblePresenter","CollectiblePresenter.html#method-i-collectible_from_card-3F","()",""],["collectible_from_card?","UserPresenter","UserPresenter.html#method-i-collectible_from_card-3F","()",""],["collectible_info_icon","RecipesHelper","RecipesHelper.html#method-i-collectible_info_icon","(decorator)",""],["collectible_lists_button","CollectibleHelper","CollectibleHelper.html#method-i-collectible_lists_button","(decorator, size=nil, options={})",""],["collectible_masonry_datablock","RecipesHelper","RecipesHelper.html#method-i-collectible_masonry_datablock","(decorator)",""],["collectible_private","Collectible","Collectible.html#method-i-collectible_private","()",""],["collectible_private=","Collectible","Collectible.html#method-i-collectible_private-3D","(newval)","<p>Gatekeeper for the privacy value to interpret strings from checkbox fields\n"],["collectible_share_button","CollectibleHelper","CollectibleHelper.html#method-i-collectible_share_button","(decorator, size=nil, options={})","<p>Define and return a share button for the collectible\n"],["collectible_show_thumbnail","RecipesHelper","RecipesHelper.html#method-i-collectible_show_thumbnail","(decorator)",""],["collectible_source","CollectibleHelper","CollectibleHelper.html#method-i-collectible_source","(decorator, options={})","<p>End of standardized buttons ##########################\n"],["collectible_source_link","RecipesHelper","RecipesHelper.html#method-i-collectible_source_link","(decorator)",""],["collectible_tablink","RecipesHelper","RecipesHelper.html#method-i-collectible_tablink","(decorator)",""],["collectible_tag_button","CollectibleHelper","CollectibleHelper.html#method-i-collectible_tag_button","(decorator, size=nil, options={})",""],["collectible_taglist","CollectibleHelper","CollectibleHelper.html#method-i-collectible_taglist","(decorator)","<p>Provide a list of the tags attached to the collectible, ending with the\ntagging button\n"],["collectible_title_link","RecipesHelper","RecipesHelper.html#method-i-collectible_title_link","(decorator, pclass='title')",""],["collectible_tools_menu","CollectibleHelper","CollectibleHelper.html#method-i-collectible_tools_menu","(decorator, size=nil, styling={})",""],["collectible_tools_menu_replacement","CollectibleHelper","CollectibleHelper.html#method-i-collectible_tools_menu_replacement","(decorator)",""],["collectible_user_id","Collectible","Collectible.html#method-i-collectible_user_id","()",""],["collectible_user_id=","Collectible","Collectible.html#method-i-collectible_user_id-3D","(id)",""],["collectible_vote_buttons","CollectibleHelper","CollectibleHelper.html#method-i-collectible_vote_buttons","(entity, options={})","<p>Declare the voting buttons for a collectible\n"],["collection","UsersController","UsersController.html#method-i-collection","()","<p>Show the user&#39;s entire collection\n"],["collection_entities","UserDecorator","UserDecorator.html#method-i-collection_entities","(entity_type, viewer=user)","<p>Return the set of entities of a given type that the user has collected, as\nvisible to some other\n"],["collection_itemtitle","CollectionsHelper","CollectionsHelper.html#method-i-collection_itemtitle","()",""],["collection_link","CollectibleHelper","CollectibleHelper.html#method-i-collection_link","(decorator, label, styling, query_options={})",""],["collection_lists","UserDecorator","UserDecorator.html#method-i-collection_lists","(viewer=user)","<p>Return the set of lists that the user has collected, as visible to some\nother viewer NB: excludes lists …\n"],["collection_name","ModelDecorator","ModelDecorator.html#method-i-collection_name","()","<p>Recipe =&gt; &#39;recipes&#39; FeedEntry =&gt; &#39;feed_entries&#39;\n"],["collection_pointers","UserDecorator","UserDecorator.html#method-i-collection_pointers","(entity_type_or_types=nil, viewer=user)","<p>Get the user&#39;s Rcprefs that point to a given entity_type (or types, in\nan Array) and/or are visible …\n"],["collection_scope","User","User.html#method-i-collection_scope","(options={})","<p>Scope for items from the user&#39;s collection. Options: :in_collection:\nwhether they&#39;re collected …\n"],["collection_size","User","User.html#method-i-collection_size","(entity_type=nil)","<p>Get the number of entities of a given type (or all types) in self&#39;s\ncollection\n"],["collection_updater","CollectionsHelper","CollectionsHelper.html#method-i-collection_updater","()",""],["collections_navtab","NavtabsHelper","NavtabsHelper.html#method-i-collections_navtab","(mode = :full)",""],["collectors","CollectibleServices","CollectibleServices.html#method-i-collectors","()","<p>Return the list of users who have collected this entity\n"],["column","CardPresentation","CardPresentation.html#method-i-column","(which_column)","<p>Render the n-th column (limited by card_ncolumns)\n"],["comment","Collectible","Collectible.html#method-i-comment","(uid=nil)","<p>Get THIS USER&#39;s comment on an entity\n"],["comment_for","User","User.html#method-i-comment_for","(entity)",""],["commentable","Commentable::ClassMethods","Commentable/ClassMethods.html#method-i-commentable","(attr_name=:comment)",""],["condense_strings","Object","Object.html#method-i-condense_strings","(arr)","<p>Reduce the array to eliminate strings that are just extensions\n<p>-&gt; []\n<p> &#39;a&#39;  &mdash; -&gt; [ &#39;a&#39; …\n"],["const_for","Object","Object.html#method-i-const_for","(object, qualifier=nil)","<p>Look up a constant for a particular kind of, e.g., Presenter, related to a\nclass or its ancestors\n"],["contact","PagesController","PagesController.html#method-i-contact","()",""],["container_selector","ResponseServices","ResponseServices.html#method-i-container_selector","()","<p>Used for targeting a stream to either the page or part of a dialog\n"],["content","BasePresenter","BasePresenter.html#method-i-content","()",""],["content","PageRefPresenter","PageRefPresenter.html#method-i-content","()",""],["contents","FeedsController","FeedsController.html#method-i-contents","()",""],["contents","ListsController","ListsController.html#method-i-contents","()",""],["contents_scope","Site","Site.html#method-i-contents_scope","(model_class)","<p>Return a scope for finding references of a given type\n"],["control","AdminController","AdminController.html#method-i-control","()",""],["controller_model_class","ResponseServices","ResponseServices.html#method-i-controller_model_class","()","<p>What model is the controller addressing?\n"],["controller_model_name","ResponseServices","ResponseServices.html#method-i-controller_model_name","()",""],["convertTypesByIndex","Tag","Tag.html#method-c-convertTypesByIndex","(tagids, fromindex, toindex, globalize = false)","<p>Respond to a directive to move tags from one category to another\n"],["convert_all_to_references","UserServices","UserServices.html#method-c-convert_all_to_references","(n=-1)",""],["convert_references","SiteServices","SiteServices.html#method-i-convert_references","()","<p>Used twice in sites.rake\n"],["convert_tagtype","TokenInputHelper","TokenInputHelper.html#method-i-convert_tagtype","(tt)",""],["convert_to_sti","ReferenceServices","ReferenceServices.html#method-c-convert_to_sti","(n=-1)","<p>Convert ALL references to STI specification\n"],["cookmark","PagesController","PagesController.html#method-i-cookmark","()",""],["cookmark_count","RecipesHelper","RecipesHelper.html#method-i-cookmark_count","(collectible_entity, user)","<p>Provide the cookmark-count line\n"],["copy_tag","ExpressionServices","ExpressionServices.html#method-c-copy_tag","(from_id, to_id)","<p>Duplicate the expressions of a tag by fetching all of its expressions and\nassigning copies to the other …\n"],["copy_tag","TagOwnerServices","TagOwnerServices.html#method-c-copy_tag","(from_id, to_id)","<p>Copy tag ownership from a tag with from_id to another tag with to_id\n"],["correct","Feed","Feed.html#method-c-correct","()",""],["correct_url_or_destroy","RecipeServices","RecipeServices.html#method-i-correct_url_or_destroy","()","<p>Check to see that a recipe can be reached. Three possibilities: good: carry\non (return nil) bad and consequently …\n"],["count_report","ApplicationHelper","ApplicationHelper.html#method-i-count_report","(number, name, preface='', postscript='', threshold=1)","<p>Nicely format a report of some quantity\n"],["count_tag","CollectibleSearch","CollectibleSearch.html#method-i-count_tag","(tag, counts, iscope)",""],["count_tag","DefaultSearch","DefaultSearch.html#method-i-count_tag","(tag, counts, iscope)","<p>This is the end of the superclass hierarchy for counting a tag, so we\nreturn the unmodified counts\n"],["count_tag","ModelSearch","ModelSearch.html#method-i-count_tag","(tag, counts, iscope)","<p>This is a prototypical count_tag method, which digests the itemscope in\nlight of a tag, incrementing …\n"],["count_tag","TagSearch","TagSearch.html#method-i-count_tag","(tag, counts, iscope)","<p>Tags don&#39;t go through Taggings, so we just use/count them directly\n"],["count_tag","TaggableSearch","TaggableSearch.html#method-i-count_tag","(tag, counts, iscope)","<p>Filter an entity scope by tag contents\n"],["create","AnswersController","AnswersController.html#method-i-create","()","<p>POST /answers\n"],["create","AuthenticationsController","AuthenticationsController.html#method-i-create","()","<p>Callback after omniauth authentication\n"],["create","CollectibleController","CollectibleController.html#method-i-create","()","<p>Action for creating a new entity in response to the the &#39;new&#39; page:\n"],["create","EditionsController","EditionsController.html#method-i-create","()","<p>POST /editions\n"],["create","ExpressionsController","ExpressionsController.html#method-i-create","()","<p>POST /expressions POST /expressions.json\n"],["create","FeedbackController","FeedbackController.html#method-i-create","()",""],["create","FeedsController","FeedsController.html#method-i-create","()","<p>POST /feeds POST /feeds.json\n"],["create","FindersController","FindersController.html#method-i-create","()",""],["create","InvitationsController","InvitationsController.html#method-i-create","()","<p>POST /resource/invitation Respond to dialog for issuing a share/invitation\n"],["create","ListsController","ListsController.html#method-i-create","()",""],["create","PageRefsController","PageRefsController.html#method-i-create","()","<p>POST /page_refs Soecial, super-simple page for collecting a cookmark With\nno parameters, we display the …\n"],["create","PasswordsController","PasswordsController.html#method-i-create","()",""],["create","RatingsController","RatingsController.html#method-i-create","()","<p>POST /ratings POST /ratings.xml\n"],["create","ReferencesController","ReferencesController.html#method-i-create","()","<p>POST /references POST /references.json\n"],["create","Referent","Referent.html#method-c-create","(*params)",""],["create","ReferentsController","ReferentsController.html#method-i-create","()","<p>POST /referents?tagid=1&amp;mode={over,before,after}&amp;target=referentid\nPOST\n/referents.json?tagid=1&amp;mode={over,before,after}&amp;target=referentid\n…\n"],["create","RefermentsController","RefermentsController.html#method-i-create","()","<p>Creating a Referment is quite flexible. The url may denote a Referrable\nobject internal to RecipePower …\n"],["create","RegistrationsController","RegistrationsController.html#method-i-create","()",""],["create","RpEventsController","RpEventsController.html#method-i-create","()",""],["create","ScalesController","ScalesController.html#method-i-create","()","<p>POST /scales POST /scales.xml\n"],["create","ScraperController","ScraperController.html#method-i-create","()",""],["create","SessionsController","SessionsController.html#method-i-create","()",""],["create","SitesController","SitesController.html#method-i-create","()","<p>POST /sites POST /sites.json\n"],["create","SuggestionsController","SuggestionsController.html#method-i-create","()","<p>POST /suggestions\n"],["create","TagSelectionsController","TagSelectionsController.html#method-i-create","()",""],["create","TagsController","TagsController.html#method-i-create","()","<p>POST /tags POST /tags.xml Since we don&#39;t actually create tags using the\nform, this action is used …\n"],["create","TagsetsController","TagsetsController.html#method-i-create","()","<p>POST /tagsets\n"],["create","UsersController","UsersController.html#method-i-create","()","<p>With devise handling user creation, the only way we get here is from the\n&#39;identify&#39; page. If …\n"],["create","VotesController","VotesController.html#method-i-create","()","<p>POST /votes\n"],["css_class","FinderServices","FinderServices.html#method-c-css_class","(label)",""],["cssclass","NotificationPresenter","NotificationPresenter.html#method-i-cssclass","()",""],["current","Vote","Vote.html#method-c-current","(entity)","<p>Return the current vote-state on the entity by the user: :up, :down, or nil\nNB: EXPECTS THE ENTITY TO …\n"],["current_user_or_guest","ControllerAuthentication","ControllerAuthentication.html#method-i-current_user_or_guest","()",""],["current_user_or_guest_id","ControllerAuthentication","ControllerAuthentication.html#method-i-current_user_or_guest_id","()",""],["data","AdminController","AdminController.html#method-i-data","()",""],["data","Templateer","Templateer.html#method-i-data","(needed=nil)","<p>Return a hash intended to be passed to the client for template substitution\nWe assume certain field values; …\n"],["data_to_add_fields","ApplicationHelper","ApplicationHelper.html#method-i-data_to_add_fields","(f, association, *initializers)",""],["debug_dump","ApplicationHelper","ApplicationHelper.html#method-i-debug_dump","(params)",""],["decodeHTML","ApplicationHelper","ApplicationHelper.html#method-i-decodeHTML","(str)",""],["decorate_path","ResponseServices","ResponseServices.html#method-i-decorate_path","(path=nil, options={})","<p>Modify a path to match the current request, asserting other options as\nprovided If path is not provided, …\n"],["decrypt","RPCrypt","RPCrypt.html#method-i-decrypt","(encrypted_string, password)",""],["default_next_path","ApplicationController","ApplicationController.html#method-i-default_next_path","()","<p>This replaces the old collections path, providing a path to either the\ncurrent user&#39;s collection …\n"],["defer_invitation","ApplicationController","ApplicationController.html#method-i-defer_invitation","()","<p>Simple path to remove a pending invitation (can still be re-invoked later)\n"],["defer_request","ControllerDeference","ControllerDeference.html#method-i-defer_request","(spec={})","<p>Save the current request pending (presumably) a login, such that\ndeferred_request and deferred_trigger …\n"],["defer_welcome_dialogs","ApplicationController","ApplicationController.html#method-i-defer_welcome_dialogs","()","\n<pre class=\"ruby\"><span class=\"ruby-comment\"># This is an override of the Devise method to determine where to go after login.</span>\n<span class=\"ruby-comment\"># If there was a redirect ...</span>\n</pre>\n"],["deferred_request","ControllerDeference","ControllerDeference.html#method-i-deferred_request","(specs=nil)","<p>Recall an earlier, deferred, request that can be redirected to in the\ncurrent context . This isn&#39;t …\n"],["define","TagServices","TagServices.html#method-c-define","(tag_or_tagname, options={})","<p>Given a name (or the tag thereof), ensure the existence of: – a tag of the\ntagtype – a referent “defining” …\n"],["define_linked_tag","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-define_linked_tag","(header_name, li)",""],["definitive?","ImageReference","ImageReference.html#method-i-definitive-3F","()","<p>Is the reference un-gleanable? No further attention need be paid\n"],["delete_followee","User","User.html#method-i-delete_followee","(f)",""],["dependent_page_refs","Site","Site.html#method-i-dependent_page_refs","()",""],["description","CollectiblePresenter","CollectiblePresenter.html#method-i-description","()",""],["description","FeedEntryDecorator","FeedEntryDecorator.html#method-i-description","()",""],["description","ListDecorator","ListDecorator.html#method-i-description","(fallback=false)",""],["description","TagPresenter","TagPresenter.html#method-i-description","()","<p>Provide a text meaning of a tag by getting a description from one of its\nreferent(s), if any–preferentially …\n"],["description","UserDecorator","UserDecorator.html#method-i-description","()",""],["destroy","AnswersController","AnswersController.html#method-i-destroy","()","<p>DELETE /answers/1\n"],["destroy","ApplicationController","ApplicationController.html#method-i-destroy","()","<p>Generic action for destroying an entity\n"],["destroy","AuthenticationsController","AuthenticationsController.html#method-i-destroy","()",""],["destroy","EditionsController","EditionsController.html#method-i-destroy","()","<p>DELETE /editions/1\n"],["destroy","ExpressionsController","ExpressionsController.html#method-i-destroy","()","<p>DELETE /expressions/1 DELETE /expressions/1.json\n"],["destroy","ListsController","ListsController.html#method-i-destroy","()",""],["destroy","RatingsController","RatingsController.html#method-i-destroy","()","<p>DELETE /ratings/1 DELETE /ratings/1.xml\n"],["destroy","ReferencesController","ReferencesController.html#method-i-destroy","()","<p>DELETE /references/1 DELETE /references/1.json\n"],["destroy","ReferentsController","ReferentsController.html#method-i-destroy","()","<p>DELETE /referents/1 DELETE /referents/1.json\n"],["destroy","RefermentsController","RefermentsController.html#method-i-destroy","()",""],["destroy","RpEventsController","RpEventsController.html#method-i-destroy","()",""],["destroy","ScalesController","ScalesController.html#method-i-destroy","()","<p>DELETE /scales/1 DELETE /scales/1.xml\n"],["destroy","SessionsController","SessionsController.html#method-i-destroy","()",""],["destroy","SiteDecorator","SiteDecorator.html#method-i-destroy","()","<p>Managed deletion of site\n"],["destroy","SuggestionsController","SuggestionsController.html#method-i-destroy","()","<p>DELETE /suggestions/1\n"],["destroy","TagsController","TagsController.html#method-i-destroy","()",""],["destroy","TagsetsController","TagsetsController.html#method-i-destroy","()","<p>DELETE /tagsets/1\n"],["destroy","UsersController","UsersController.html#method-i-destroy","()","<p>DELETE /users/1 DELETE /users/1.xml\n"],["destroy","VotesController","VotesController.html#method-i-destroy","()","<p>DELETE /votes/1\n"],["detached?","Referent","Referent.html#method-i-detached-3F","()","<p>Can the referent be destroyed, ie., is it empty of all connections?\n"],["detached?","SourceReferent","SourceReferent.html#method-i-detached-3F","()",""],["devise_mapping","ApplicationHelper","ApplicationHelper.html#method-i-devise_mapping","()",""],["di_select","UsersHelper","UsersHelper.html#method-i-di_select","()",""],["dialog?","ResponseServices","ResponseServices.html#method-i-dialog-3F","()",""],["dialogFooter","DialogsHelper","DialogsHelper.html#method-i-dialogFooter","()",""],["dialogHeader","DialogsHelper","DialogsHelper.html#method-i-dialogHeader","(which, ttl=nil, options={})","<p>Place the header for a dialog, including setting its Onload function.\nCurrently handled this way (e.g., …\n"],["dialog_answer_button","DialogsHelper","DialogsHelper.html#method-i-dialog_answer_button","(label = nil, options={})",""],["dialog_cancel_button","DialogsHelper","DialogsHelper.html#method-i-dialog_cancel_button","(label = nil, options={})",""],["dialog_close_button","DialogsHelper","DialogsHelper.html#method-i-dialog_close_button","(do_cancel = true, options={})","<p>Present an &#39;X&#39; close button at the top right of a dialog\n"],["dialog_has_pane","DialogPanes","DialogPanes.html#method-i-dialog_has_pane","(topic)",""],["dialog_pane","DialogsHelper","DialogsHelper.html#method-i-dialog_pane","(pane_spec, inner_col=true, form_params={}, &block)",""],["dialog_pane_buttons","DialogsHelper","DialogsHelper.html#method-i-dialog_pane_buttons","(decorator)","<p>Declare the buttons for switching amongst panes in the dialog\n"],["dialog_pane_list","DialogPanes","DialogPanes.html#method-i-dialog_pane_list","()","<p>Provide a list of the editing panes available for the object\n"],["dialog_pane_list","ReferentDecorator","ReferentDecorator.html#method-i-dialog_pane_list","()",""],["dialog_pane_spec","DialogPanes","DialogPanes.html#method-i-dialog_pane_spec","(topic)",""],["dialog_pane_spec","ReferentDecorator","ReferentDecorator.html#method-i-dialog_pane_spec","(topic)",""],["dialog_submit_button","DialogsHelper","DialogsHelper.html#method-i-dialog_submit_button","(label = nil, options={})",""],["digested_reference","Reference","Reference.html#method-i-digested_reference","()","<p>By default, the reference gives up its url, but may want to use something\nelse, like image data\n"],["dim_scale","Object","Object.html#method-i-dim_scale","(given, sf)","<p>Take a CSS dimension value and scale it by the given numerical factor\n"],["direct_child_ids","ReferentServices","ReferentServices.html#method-c-direct_child_ids","(ref_id_or_ids)","<p>Return the ids of referents directly descended from those given (as an id\nor ids)\n"],["direct_object","InvitationAcceptedEventArticulator","InvitationAcceptedEventArticulator.html#method-i-direct_object","()",""],["direct_object","InvitationSentEventCreateArticulator","InvitationSentEventCreateArticulator.html#method-i-direct_object","()",""],["direct_object","SharedEventCreateArticulator","SharedEventCreateArticulator.html#method-i-direct_object","()","<p>what was shared\n"],["direct_parent_ids","ReferentServices","ReferentServices.html#method-c-direct_parent_ids","(ref_id_or_ids)",""],["display_style","ViewParams","ViewParams.html#method-i-display_style","(specific=true)",""],["divclass","CollectiblePresenter","CollectiblePresenter.html#method-i-divclass","()",""],["divert","InvitationsController","InvitationsController.html#method-i-divert","()","<p>When the user gets distracted by the recipe link in a sharing notice\n"],["divide","AnalyticsServices","AnalyticsServices.html#method-i-divide","(a, b)",""],["do_notification","ResponseServices","ResponseServices.html#method-i-do_notification","()","<p>Process the current notification and provide an alert\n"],["do_notifs","NotifsHelper","NotifsHelper.html#method-i-do_notifs","()","<p>To go with any page: provide the SignIn/SignUp/AcceptInvitation floater\n"],["dom_id","RcprefDecorator","RcprefDecorator.html#method-i-dom_id","()",""],["dom_id","ReferenceDecorator","ReferenceDecorator.html#method-i-dom_id","()",""],["dom_id","Templateer","Templateer.html#method-i-dom_id","()",""],["domain","Site","Site.html#method-i-domain","()",""],["domain_from_url","Object","Object.html#method-i-domain_from_url","(url)","<p>Remove the noise from a url to extract the domain\n"],["done!","Partition","Partition.html#method-i-done-21","()",""],["done?","Partition","Partition.html#method-i-done-3F","()",""],["downvotes","Voteable","Voteable.html#method-i-downvotes","()",""],["drop","Referent","Referent.html#method-i-drop","(tag_or_id)","<p>Remove uses of this tag by this referent A tagid may be passed\n"],["due?","Backgroundable","Backgroundable.html#method-i-due-3F","()",""],["due_for_update","Feed","Feed.html#method-i-due_for_update","()","<p>Is the feed stale?\n"],["dump","ListItem","ListItem.html#method-c-dump","(li)",""],["dump","ListSerializer","ListSerializer.html#method-c-dump","(list)",""],["dump","Referent","Referent.html#method-i-dump","(indent = \"\", path = [])","<p>Dump a specified referent with the given indent\n"],["dump","Referent","Referent.html#method-c-dump","(tagtype=4)","<p>Dump the contents of the database to stdout\n"],["dump?","FilteredPresenter","FilteredPresenter.html#method-i-dump-3F","()","<p>This is a stub for future use in eliding streaming\n"],["during","RpEvent","RpEvent.html#method-c-during","(timerange)",""],["edit","AnswersController","AnswersController.html#method-i-edit","()","<p>GET /answers/1/edit\n"],["edit","ApplicationController","ApplicationController.html#method-i-edit","()",""],["edit","EditionsController","EditionsController.html#method-i-edit","()","<p>GET /editions/1/edit\n"],["edit","ExpressionsController","ExpressionsController.html#method-i-edit","()","<p>GET /expressions/1/edit\n"],["edit","FeedsController","FeedsController.html#method-i-edit","()",""],["edit","InvitationsController","InvitationsController.html#method-i-edit","()","<p>GET /resource/invitation/accept?invitation_token=abcdef Accept an\ninvitation\n"],["edit","ListsController","ListsController.html#method-i-edit","()",""],["edit","PageRefsController","PageRefsController.html#method-i-edit","()","<p>GET /page_refs/1/edit\n"],["edit","PasswordsController","PasswordsController.html#method-i-edit","()",""],["edit","RatingsController","RatingsController.html#method-i-edit","()","<p>GET /ratings/1/edit\n"],["edit","ReferencesController","ReferencesController.html#method-i-edit","()","<p>GET /references/1/edit\n"],["edit","ReferentsController","ReferentsController.html#method-i-edit","()","<p>GET /referents/1/edit\n"],["edit","RegistrationsController","RegistrationsController.html#method-i-edit","()",""],["edit","ScalesController","ScalesController.html#method-i-edit","()","<p>GET /scales/1/edit\n"],["edit","SuggestionsController","SuggestionsController.html#method-i-edit","()","<p>GET /suggestions/1/edit\n"],["edit","TagsController","TagsController.html#method-i-edit","()","<p>GET /tags/1/edit\n"],["edit","TagsetsController","TagsetsController.html#method-i-edit","()","<p>GET /tagsets/1/edit\n"],["edit","UsersController","UsersController.html#method-i-edit","()",""],["edit","VotesController","VotesController.html#method-i-edit","()","<p>GET /votes/1/edit\n"],["edit_button","CardPresentation","CardPresentation.html#method-i-edit_button","()",""],["edit_button","CollectiblePresenter","CollectiblePresenter.html#method-i-edit_button","()",""],["edit_class","Templateer","Templateer.html#method-i-edit_class","()",""],["edit_path","Templateer","Templateer.html#method-i-edit_path","()",""],["editable_entity","PageRefServices","PageRefServices.html#method-i-editable_entity","(called_for=nil, params={})","<p>Get a collectible, taggable entity for the PageRef. Five possibilities: 1)\nIf it has an accompanying …\n"],["editable_from_card?","CardPresentation","CardPresentation.html#method-i-editable_from_card-3F","()","<p>Entities are editable, sharable, votable and collectible from the card by\ndefault\n"],["editable_from_card?","CollectiblePresenter","CollectiblePresenter.html#method-i-editable_from_card-3F","()","<p>Entities are editable, sharable, votable and collectible from the card by\ndefault\n"],["editable_from_card?","UserPresenter","UserPresenter.html#method-i-editable_from_card-3F","()",""],["editable_tagtypes","CollectibleDecorator","CollectibleDecorator.html#method-i-editable_tagtypes","()",""],["editor","TagsController","TagsController.html#method-i-editor","()","<p>GET /tags/editor?tabindex=index Return HTML for the editor for classifying\ntags\n"],["editpic","CollectibleController","CollectibleController.html#method-i-editpic","()",""],["element_id","Templateer","Templateer.html#method-i-element_id","(what)","<p>Define presentation-specific methods here. Helpers are accessed through\n`helpers` (aka `h`). You can …\n"],["element_item","SeekerHelper","SeekerHelper.html#method-i-element_item","(selector, elmt)",""],["element_name","ModelDecorator","ModelDecorator.html#method-i-element_name","()","<p>Recipe =&gt; &#39;recipe&#39; FeedEntry =&gt; &#39;feed_entry&#39;\n"],["elide_meaning","Tag","Tag.html#method-i-elide_meaning","(ref)","<p>Ensure that we no longer use this ref as a meaning\n"],["eligible_tagtypes","CollectibleDecorator","CollectibleDecorator.html#method-i-eligible_tagtypes","()","<p>What types of tag are selectable for tagging the entity, i.e., pertain to\nthe type of collectible we&#39;re …\n"],["eligible_tagtypes","FeedDecorator","FeedDecorator.html#method-i-eligible_tagtypes","()",""],["eligible_tagtypes","ListDecorator","ListDecorator.html#method-i-eligible_tagtypes","()","<p>What types of tag are selectable for tagging the entity, i.e., pertain to\nthe type of collectible we&#39;re …\n"],["eligible_tagtypes","PageRefDecorator","PageRefDecorator.html#method-i-eligible_tagtypes","()",""],["eligible_tagtypes","RecipeDecorator","RecipeDecorator.html#method-i-eligible_tagtypes","()",""],["eligible_tagtypes","SiteDecorator","SiteDecorator.html#method-i-eligible_tagtypes","()",""],["email_image_tag","EmailHelper","EmailHelper.html#method-i-email_image_tag","(image, **options)",""],["emplace_leader","SearchNode","SearchNode.html#method-i-emplace_leader","()",""],["empty_msg","ApplicationHelper","ApplicationHelper.html#method-i-empty_msg","()",""],["encodeHTML","ApplicationHelper","ApplicationHelper.html#method-i-encodeHTML","(str)",""],["encrypt","RPCrypt","RPCrypt.html#method-i-encrypt","(string)",""],["ensure_site","Pagerefable","Pagerefable.html#method-i-ensure_site","()",""],["ensure_status","PageRefServices","PageRefServices.html#method-i-ensure_status","(force=false)","<p>So a PageRef exists; ensure that it has valid status and http_status\n"],["ensure_tagtypes","Referent","Referent.html#method-i-ensure_tagtypes","()","<p>After saving, check that all tags are of our type\n"],["ensure_unique","Rating","Rating.html#method-i-ensure_unique","()","<p>When saving a “new” rating, make sure it&#39;s unique\n"],["ensure_unique","Rcpref","Rcpref.html#method-i-ensure_unique","()","<p>When saving a “new” use, make sure it&#39;s unique\n"],["ensure_unique","Tagging","Tagging.html#method-i-ensure_unique","()","<p>From tagref: When saving a “new” Tag, make sure the tagging is unique\n"],["entities","List","List.html#method-i-entities","()","<p>Get all the entities from the list, in order, ignoring those which\ncan&#39;t be fetched to cache\n"],["entities","ListServices","ListServices.html#method-i-entities","(viewerid=nil)","<p>Return an array of the entities in the list, visible to the given viewer\n"],["entity=","ListItem","ListItem.html#method-i-entity-3D","(newe)","<p>Set the entity, caching its id and class also\n"],["entity_approval","ApplicationHelper","ApplicationHelper.html#method-i-entity_approval","(decorator)",""],["entity_approval_replacement","ApplicationHelper","ApplicationHelper.html#method-i-entity_approval_replacement","(decorator)",""],["entity_count","List","List.html#method-i-entity_count","()",""],["entity_links","CardPresentation","CardPresentation.html#method-i-entity_links","(entities, options={})","<p>Provide a list of links to a partial for the home of each entity\n"],["entity_params","ResultType","ResultType.html#method-i-entity_params","()",""],["entity_scope","ListServices","ListServices.html#method-i-entity_scope","(type, viewer)","<p>Return a scope on a given type of entity for list members visible by the\nviewer\n"],["entries","Feed","Feed.html#method-i-entries","()",""],["entry_ids","Feed","Feed.html#method-c-entry_ids","(feedlist)","<p>Return list of feed_entries by id for all feeds in the feedlist\n"],["entry_ids","Feed","Feed.html#method-i-entry_ids","()","<p>Return list of feed_entries by id for this feed\n"],["err_breakdown","FinderServices","FinderServices.html#method-c-err_breakdown","(url, msg)","<p>Analyze the error coming from a gleaning\n"],["error","Backgroundable","Backgroundable.html#method-i-error","(job, exception)","<p>When an unhandled error occurs, record it among the object&#39;s errors We\nget here EITHER because: 1) …\n"],["error","Scraper","Scraper.html#method-i-error","(job, exception)","<p>Handle performance errors This is the place for Backgroundables to record\nany persistent error state …\n"],["event_trigger_data","RpEvent","RpEvent.html#method-c-event_trigger_data","( subject, direct_object=nil, indirect_object=nil, data = {} )","<p>Provide a structure for embedding a trigger in a URL for automatically\nfiring an event upon a click\n"],["exclude","ListServices","ListServices.html#method-i-exclude","(entity, user_or_id)",""],["exclude_by","ListServices","ListServices.html#method-i-exclude_by","(entity_type, entity_id, user_id)","<p>Remove an entity from the list based on parameters\n"],["excluded_tag_types","List","List.html#method-c-excluded_tag_types","()",""],["exists?","TaggingServices","TaggingServices.html#method-i-exists-3F","(tag_or_tags_or_id_or_ids, owners_or_ids=nil)","<p>Does a tagging exist for the given entity, tag and owner? Sets of each are\nallowed, whether id numbers …\n"],["express","Referent","Referent.html#method-i-express","(tag_or_id_or_name, args = {})","<p>Add a tag to the expressions of this referent, returning the tag id\n"],["express","Referent","Referent.html#method-c-express","(tag_or_id_or_string, tagtype = nil, args = {})","<p>Class method to create a referent of a given type under the given tag, or\nto find an existing one. Parameters: …\n"],["express_base_errors","ErrorsHelper","ErrorsHelper.html#method-i-express_base_errors","(resource)","<p>Summarize base errors from a resource transaction\n"],["express_error_context","ControllerUtils","ControllerUtils.html#method-i-express_error_context","(resource)","<p>Default broad-level error report based on controller and action\n"],["express_resource_errors","ErrorsHelper","ErrorsHelper.html#method-i-express_resource_errors","(resource, options={})","<p>If no preface is provided, use the generic error context NB: preface can be\nlocked out entirely by passing …\n"],["expression","Referent","Referent.html#method-i-expression","(args = {})","<p>Return the tag expressing this referent according to the given form and\nlocale, if any\n"],["expression_ids","ExpressionServices","ExpressionServices.html#method-c-expression_ids","(ref_ids, unique=false)",""],["expression_link","ExpressionsHelper","ExpressionsHelper.html#method-i-expression_link","(expr)",""],["expression_name","ExpressionsHelper","ExpressionsHelper.html#method-i-expression_name","(expr)",""],["expression_tags_from_ids","ExpressionServices","ExpressionServices.html#method-c-expression_tags_from_ids","(ref_ids, unique=false)",""],["extend_fields","User","User.html#method-i-extend_fields","()","<p>Fill in blank fields from existing ones\n"],["extensions_to_classes","String","String.html#method-i-extensions_to_classes","()",""],["extensions_to_selector","String","String.html#method-i-extensions_to_selector","()",""],["external_link","FeedEntryDecorator","FeedEntryDecorator.html#method-i-external_link","()",""],["external_link","PageRefDecorator","PageRefDecorator.html#method-i-external_link","()",""],["external_link","RecipeDecorator","RecipeDecorator.html#method-i-external_link","()",""],["external_link","SiteDecorator","SiteDecorator.html#method-i-external_link","()",""],["extract","CollectibleDecorator","CollectibleDecorator.html#method-i-extract","(fieldname)",""],["extract","ListDecorator","ListDecorator.html#method-i-extract","(fieldname)",""],["extract1","Gleaning","Gleaning.html#method-i-extract1","(label)",""],["extract_all","Gleaning","Gleaning.html#method-i-extract_all","(*labels)",""],["extract_params","ExtractParams::ClassMethods","ExtractParams/ClassMethods.html#method-i-extract_params","(result_type=nil, params={})",""],["failure","AuthenticationsController","AuthenticationsController.html#method-i-failure","()",""],["failure","SessionsController","SessionsController.html#method-i-failure","()",""],["fake_url","ImageReference","ImageReference.html#method-c-fake_url","()","<p>Provide the phony (but unique) URL that&#39;s used for a data-only image\n"],["faq","PagesController","PagesController.html#method-i-faq","()",""],["feed","FeedsShowCache","FeedsShowCache.html#method-i-feed","()",""],["feed_buttons_replacement","FeedsHelper","FeedsHelper.html#method-i-feed_buttons_replacement","(decorator, options={})",""],["feed_collectible_buttons","FeedsHelper","FeedsHelper.html#method-i-feed_collectible_buttons","(decorator, options={})",""],["feed_entries_report","FeedsHelper","FeedsHelper.html#method-i-feed_entries_report","(feed)",""],["feed_entries_status","FeedsHelper","FeedsHelper.html#method-i-feed_entries_status","(feed)",""],["feed_entry","FeedEntriesHelper","FeedEntriesHelper.html#method-i-feed_entry","(entity)",""],["feed_entry_replacement","FeedEntriesHelper","FeedEntriesHelper.html#method-i-feed_entry_replacement","(entity, destroyed=false)",""],["feed_list_element_class","ApplicationHelper","ApplicationHelper.html#method-i-feed_list_element_class","(entry)",""],["feed_status_report","FeedsHelper","FeedsHelper.html#method-i-feed_status_report","(feed, querytags)",""],["feed_status_report_replacement","FeedsHelper","FeedsHelper.html#method-i-feed_status_report_replacement","(feed, querytags)",""],["feed_status_summary","FeedsHelper","FeedsHelper.html#method-i-feed_status_summary","(feed)","<p>Summarize the number of entries/latest entry for a feed\n"],["feed_subscribe_button","FeedsHelper","FeedsHelper.html#method-i-feed_subscribe_button","(item, options={})",""],["feed_update_button","FeedsHelper","FeedsHelper.html#method-i-feed_update_button","(feed, force=false)",""],["feed_wait_msg","FeedsHelper","FeedsHelper.html#method-i-feed_wait_msg","(feed, force=false)",""],["feedback","FeedbackMailer","FeedbackMailer.html#method-i-feedback","(feedback)",""],["feedback","RpMailer","RpMailer.html#method-i-feedback","(feedback)",""],["feedback_init","FeedbackHelper","FeedbackHelper.html#method-i-feedback_init","(options = {})",""],["feedback_link","FeedbackHelper","FeedbackHelper.html#method-i-feedback_link","(text, options = {})",""],["feedback_tab","FeedbackHelper","FeedbackHelper.html#method-i-feedback_tab","(options = {})",""],["feeds","SitesController","SitesController.html#method-i-feeds","()",""],["feeds_navtab","NavtabsHelper","NavtabsHelper.html#method-i-feeds_navtab","(mode = :full)","<p>def other_lists_navtab mode = :full\n\n<pre>navtab :other_lists, &#39;More Treasuries&#39;, lists_path(access: &#39;collected&#39;), ...</pre>\n"],["feedtype_selection","Feed","Feed.html#method-c-feedtype_selection","()","<p>return an array of status/value pairs for passing to select()\n"],["feedtypename","Feed","Feed.html#method-i-feedtypename","()",""],["fetch","Feed","Feed.html#method-i-fetch","()","<p>Get the external feed, setting the @fetched instance variable to point\nthereto\n"],["fetch","PageRef","PageRef.html#method-c-fetch","(url)","<p>String =&gt; PageRef Return a (possibly newly-created) PageRef on the given\nURL NB Since the derived …\n"],["fetch","Reference","Reference.html#method-i-fetch","(starter=nil)","<p>Get data from the reference via HTTP\n"],["field_count","CardPresentation","CardPresentation.html#method-i-field_count","(what)",""],["field_count","CollectiblePresenter","CollectiblePresenter.html#method-i-field_count","(what)",""],["field_label_counted","CardPresentation","CardPresentation.html#method-i-field_label_counted","(what, count)","<p>def present_field_label\n\n<pre>label = what.sub &#39;_tags&#39;, &#39;&#39;\ncase field_count(what)\n  when nil, false\n    &quot;%%#{what}_label_plural%%&quot;+&quot;%%#{what}_label_singular%%&quot; ...</pre>\n"],["field_name","Templateer","Templateer.html#method-i-field_name","(what)",""],["field_value","CardPresentation","CardPresentation.html#method-i-field_value","(what=nil)",""],["field_value","CollectiblePresenter","CollectiblePresenter.html#method-i-field_value","(what=nil)",""],["fields","TablePresenter","TablePresenter.html#method-i-fields","()","<p>Return a list of the fields (in the original order) by name and symbol\n"],["filter_field","FilteredPresenter","FilteredPresenter.html#method-i-filter_field","(opt_param={})","<p>Provide a tokeninput field for specifying tags, with or without the ability\nto free-tag The options are …\n"],["filter_type_selector","FilteredPresenter","FilteredPresenter.html#method-i-filter_type_selector","()","<p>Include a (tag) type selector in the query field?\n"],["filter_type_selector","TagsIndexPresenter","TagsIndexPresenter.html#method-i-filter_type_selector","()",""],["filtered_presenter_header_label","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_header_label","(viewparams)",""],["filtered_presenter_header_label_replacement","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_header_label_replacement","(viewparams)",""],["filtered_presenter_org_buttons","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_org_buttons","(viewparams, context='panels', options={})",""],["filtered_presenter_org_buttons_replacement","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_org_buttons_replacement","(viewparams, context='panels')",""],["filtered_presenter_panel_results","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_panel_results","(viewparams)",""],["filtered_presenter_panel_results_placeholder","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_panel_results_placeholder","(type)",""],["filtered_presenter_panel_results_replacement","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_panel_results_replacement","(viewparams)",""],["filtered_presenter_table_results","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_table_results","(viewparams)",""],["filtered_presenter_table_results_placeholder","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_table_results_placeholder","(viewparams)",""],["filtered_presenter_table_results_replacement","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_table_results_replacement","(viewparams)",""],["filtered_presenter_tail","FilteredPresenterHelper","FilteredPresenterHelper.html#method-i-filtered_presenter_tail","(viewparams)",""],["filtered_taggings","TaggingServices","TaggingServices.html#method-i-filtered_taggings","(options={})","<p>Shop for taggings according to various criteria\n"],["filtered_tags","Taggable","Taggable.html#method-i-filtered_tags","(opts = {})","<p>Fetch the tags associated with the entity, with various optional\nconstraints (including userid via @tagging_user_id) …\n"],["filtered_tags","TaggingServices","TaggingServices.html#method-i-filtered_tags","(options={})",""],["find_by_invitee","InvitationSentEvent","InvitationSentEvent.html#method-c-find_by_invitee","(invitee)",""],["find_by_selector","Scraper","Scraper.html#method-i-find_by_selector","(selector, attribute_name=nil)",""],["find_by_url","PageRef","PageRef.html#method-c-find_by_url","(url, single_query=true)","<p>Lookup a PageRef. We undergo two queries, on the theory that\n\n<pre>a direct lookup is faster if the search url ...</pre>\n"],["find_first_by_auth_conditions","User","User.html#method-c-find_first_by_auth_conditions","(warden_conditions)",""],["find_for","Site","Site.html#method-c-find_for","(link)",""],["find_or_create","CollectibleServices","CollectibleServices.html#method-c-find_or_create","(params_or_page_ref, extractions = nil, klass=Recipe)","<p>Either fetch an existing object or make a new one, of the given klass,\nbased on the params. If the params …\n"],["find_or_create","Expression","Expression.html#method-c-find_or_create","(refid, tagid, args = {})","<p>Make a new expression according to the arguments, trying first to find a\nmatch. The trick is that when …\n"],["find_or_create","Site","Site.html#method-c-find_or_create","(homelink, do_glean = true, options={})","<p>Produce a Site for a given url(s) whether one already exists or not\n"],["find_or_create_for","Site","Site.html#method-c-find_or_create_for","(link)","<p>Produce a Site that maps to a given url(s) whether one already exists or\nnot\n"],["find_or_initialize","ImageReference","ImageReference.html#method-c-find_or_initialize","(url, params={})","<p>Since the URL is never written once established, this method uniquely\nhandles both data URLs (for images …\n"],["find_or_initialize","Reference","Reference.html#method-c-find_or_initialize","(url, params = {})","<p>Return a (perhaps unsaved) reference for the given url params contains\nname-value pairs for initializing …\n"],["find_or_initialize","Site","Site.html#method-c-find_or_initialize","(homelink, options={})","<p>Produce a Site for a given url(s) whether one already exists or not,\nWITHOUT SAVING IT\n"],["find_or_make","Suggestion","Suggestion.html#method-c-find_or_make","(user, viewer, queryparams, session_id)","<p>Typically, one or more entries will be placeholders for later streaming\nwith a results_cache\n"],["find_view","ResponseServices","ResponseServices.html#method-i-find_view","(ctrl_class=nil, file=nil)","<p>Return the appropriate template for the current controller and action,\nsuitable for render :template …\n"],["finderlabels","CollectibleDecorator","CollectibleDecorator.html#method-i-finderlabels","()","<p>Declare the set of gleanings labels that we can handle\n"],["finderlabels","RecipeDecorator","RecipeDecorator.html#method-i-finderlabels","()",""],["finderlabels","SiteDecorator","SiteDecorator.html#method-i-finderlabels","()",""],["finderlabels","UserDecorator","UserDecorator.html#method-i-finderlabels","()",""],["findings=","CollectibleDecorator","CollectibleDecorator.html#method-i-findings-3D","(findings)","<p>Here&#39;s where we incorporate findings from a page into the corresponding\nentity\n"],["first_collector","CollectibleDecorator","CollectibleDecorator.html#method-i-first_collector","()","<p>Get the user who first collected the recipe (or at least the one with the\noldest Rcpref)\n"],["first_collector","UserDecorator","UserDecorator.html#method-i-first_collector","()",""],["first_member","SearchNode","SearchNode.html#method-i-first_member","(clear=true)","<p>Get the next result from the tree, if any\n"],["fix_expression_tokens","ReferentsController","ReferentsController.html#method-i-fix_expression_tokens","(tokens, tagtype)",""],["fix_fragment","Object","Object.html#method-i-fix_fragment","(url)","<p>Since URI can&#39;t handle diacriticals in the fragment, encode them\n"],["fix_names","UserServices","UserServices.html#method-c-fix_names","()",""],["fix_redundant","RecipeServices","RecipeServices.html#method-c-fix_redundant","()","<p>Find all recipes that are redundant (ie., they have the same canonical url\nas another) and merge them …\n"],["fix_root","SiteServices","SiteServices.html#method-i-fix_root","()","<p>Used twice in sites.rake\n"],["fix_type","Expression","Expression.html#method-i-fix_type","()",""],["fix_user","UserServices","UserServices.html#method-c-fix_user","(id, name)",""],["flash_all","FlashHelper","FlashHelper.html#method-i-flash_all","()","<p>Collect all flash message panels and join them together\n"],["flash_notifications_div","FlashHelper","FlashHelper.html#method-i-flash_notifications_div","()","<p>Emit the flash_notifications for the page in a div. If there are no\nnotifications, present an empty, …\n"],["flash_notifications_replacement","FlashHelper","FlashHelper.html#method-i-flash_notifications_replacement","()","<p>Returns a selector-value pair for replacing the notifications panel to\nreport errors and status\n"],["flash_notify","FlashHelper","FlashHelper.html#method-i-flash_notify","(resource=nil, popup_only=false)","<p>Provide a hash suitable for including in a JSON response to present a flash\nnotification by replacing …\n"],["flash_one","FlashHelper","FlashHelper.html#method-i-flash_one","(level, message)","<p>Emit a single error panel as a div of classes defined for Bootstrap\nRETURNS: an empty, html_safe string …\n"],["flash_strings","FlashHelper","FlashHelper.html#method-i-flash_strings","()","<p>Collect all flash messages joined with a line-break\n"],["follow","UsersController","UsersController.html#method-i-follow","()","<p>Add a user to the friends of the current user\n"],["follow_url","Feed","Feed.html#method-i-follow_url","()","<p>When a feed is built, the url may be valid for getting to a feed, but it\nmay also alias to the url of …\n"],["followee_tokens=","User","User.html#method-i-followee_tokens-3D","(flist)","<p>Presents a hash of IDs with a switch value for whether to include that\nfollowee\n"],["followees_list","UsersHelper","UsersHelper.html#method-i-followees_list","(f, me)","\n<pre>def user_homelink user, options={}\n  homelink user, options.merge(:action =&gt; :collection, :class =&gt; &quot;#{options[:class]} ...</pre>\n"],["follows?","User","User.html#method-i-follows-3F","(user)",""],["form_actions","ApplicationHelper","ApplicationHelper.html#method-i-form_actions","(f, options = {})","<p>Generic termination buttons for dialogs–or any other forms\n"],["form_errors_helper","FlashHelper","FlashHelper.html#method-i-form_errors_helper","(f, object=nil)","<p>Incorporate error reporting for a resource within a form, preferring any\nbase error from the resource …\n"],["format_card_summary","CardHelper","CardHelper.html#method-i-format_card_summary","(contentstrs, options)","<p>Present one section of the tag info using a label, a (possibly empty)\ncollection of descriptive strings, …\n"],["format_class","ResponseServices","ResponseServices.html#method-i-format_class","()","<p>Return the class specifier for styling according to the mode\n"],["format_table_tree","ApplicationHelper","ApplicationHelper.html#method-i-format_table_tree","(strtree, indent=''.html_safe)",""],["formname","Expression","Expression.html#method-i-formname","()","<p>Return the name for the type of self\n"],["formname","Expression","Expression.html#method-c-formname","(tt)","<p>Get the name for the type, taking any of the accepted datatypes\n"],["formname=","Expression","Expression.html#method-i-formname-3D","(f)",""],["formnum","Expression","Expression.html#method-c-formnum","(tt)","<p>Get the type number, taking any of the accepted datatypes\n"],["forms","Expression","Expression.html#method-c-forms","()","<p>Return a list of name/type pairs, suitable for making a selection list\n"],["formsym","Expression","Expression.html#method-c-formsym","(tt)","<p>Get the symbol for the type, taking any of the accepted datatypes\n"],["formsym","Expression","Expression.html#method-i-formsym","()","<p>Return the symbol for the type of self\n"],["found","Result","Result.html#method-i-found","()",""],["friend_candidates","User","User.html#method-i-friend_candidates","()","<p>Who is eligible to be a followee NB Currently out of use except in\nfollowees_list, which is also out …\n"],["friend_lists_on_tag","ListServices","ListServices.html#method-c-friend_lists_on_tag","(decorator, tag, user)","<p>Tagging by a friend on a list they own\n"],["friends_navtab","NavtabsHelper","NavtabsHelper.html#method-i-friends_navtab","(mode = :full)",""],["from_extractions","FinderServices","FinderServices.html#method-c-from_extractions","(params, extractions=nil)","<p>Build a finder using controller params and an optional set of extractions\nderived from the page\n"],["full_size","ResultsCache","ResultsCache.html#method-i-full_size","()","<p>Return the total number of items in the result. This doesn&#39;t have to be\nevery possible item, just …\n"],["gen_intervals","AnalyticsServices","AnalyticsServices.html#method-c-gen_intervals","(num, dt, intvl, beforehand)","<p>Generate intervals (month is 0-based)\n"],["generate","AnalyticsServices","AnalyticsServices.html#method-c-generate","(period=:monthly, num_cols=3, beforehand=true)","<p>Generate a new instance for each interval as stipulated\n"],["get_attribute_from_omniauth","User","User.html#method-i-get_attribute_from_omniauth","(attrname, uiname=nil)",""],["get_input","SiteServices","SiteServices.html#method-i-get_input","(prompt='? ')",""],["get_response","Reference","Reference.html#method-i-get_response","(url)",""],["getpic","UsersController","UsersController.html#method-i-getpic","()",""],["glean","CollectibleController","CollectibleController.html#method-i-glean","()","<p>Extract images, etc from a URL\n"],["glean","CollectibleDecorator","CollectibleDecorator.html#method-i-glean","(force=false)","<p>Wrap a Linkable&#39;s glean method, returning the gleaning iff there is\none, and it&#39;s not bad Also …\n"],["glean","FinderServices","FinderServices.html#method-c-glean","(url, site=nil, *finders_or_labels)","<p>Return the raw mapping from finders to arrays of hits\n"],["glean","Gleaning","Gleaning.html#method-c-glean","(url_or_decorator, *labels)","<p>Crack a url (or the home page for a decorator) for the information denoted\nby the set of labels\n"],["glean_atag","Result","Result.html#method-i-glean_atag","(matchstr, atag, site_home)",""],["glean_names","UserServices","UserServices.html#method-i-glean_names","()","<p>Infer default first and last names from the full name, and vice versa\n"],["glean_names","UserServices","UserServices.html#method-c-glean_names","()",""],["gleaning_attributes=","Pagerefable","Pagerefable.html#method-i-gleaning_attributes-3D","(attrhash)",""],["gleaning_attributes=","Site","Site.html#method-i-gleaning_attributes-3D","(attrhash)","<p>When attributes are selected directly and returned as gleaning attributes,\nassert them into the model …\n"],["gleaning_field","GleaningsHelper","GleaningsHelper.html#method-i-gleaning_field","(decorator, what, gleaning=nil)","<p>Declare an element that either provides gleaned choices, or waits for a\nreplacement request to come in …\n"],["gleaning_field_class","GleaningsHelper","GleaningsHelper.html#method-i-gleaning_field_class","(what)",""],["gleaning_field_declaration","GleaningsHelper","GleaningsHelper.html#method-i-gleaning_field_declaration","(decorator, what, gleaning=nil)",""],["gleaning_field_enclosure","GleaningsHelper","GleaningsHelper.html#method-i-gleaning_field_enclosure","(what, content, target=nil)",""],["gleaning_field_replacement","GleaningsHelper","GleaningsHelper.html#method-i-gleaning_field_replacement","(decorator, what, gleaning=nil)",""],["global_querytags","FilteredPresenter","FilteredPresenter.html#method-i-global_querytags","()","<p>This method will be over-ridden by any class that takes its querytags from\nthe global query box\n"],["global_querytags","SearchIndexPresenter","SearchIndexPresenter.html#method-i-global_querytags","()","<p>The global query will be maintained\n"],["globstring","ApplicationHelper","ApplicationHelper.html#method-i-globstring","(hsh)",""],["go","Gleaning","Gleaning.html#method-i-go","(url, site=nil)","<p>Execute a gleaning on the given url, RIGHT NOW (maybe in an asynchronous\nexecution, maybe not)\n"],["go","RedirectController","RedirectController.html#method-i-go","()","<p>The redirect controller has the sole purpose of turning a JSON or JS\nrequest into an HTML request by …\n"],["good!","Backgroundable","Backgroundable.html#method-i-good-21","()",""],["grab_recipe_link","RecipesHelper","RecipesHelper.html#method-i-grab_recipe_link","(label, recipe)",""],["grabtag","TagsHelper","TagsHelper.html#method-i-grabtag","(tag)",""],["guest","User","User.html#method-c-guest","()",""],["guest?","User","User.html#method-i-guest-3F","()",""],["guest_id","User","User.html#method-c-guest_id","()","<p>Simply return the id of the guest\n"],["h","CollectiblePresenter","CollectiblePresenter.html#method-i-h","()",""],["handle","User","User.html#method-i-handle","()","<p>Return the string by which this user is referred. Preferentially return (in\norder) – username – fullname …\n"],["handle_invitation","NotifsHelper","NotifsHelper.html#method-i-handle_invitation","(partial, advise=true)","<p>Deal with an invitation, rendering it to the given partial if there&#39;s\naction to be taken. If no action …\n"],["handle_unverified_request","AuthenticationsController","AuthenticationsController.html#method-i-handle_unverified_request","()",""],["handler","En_wikibooks_org_Scraper","En_wikibooks_org_Scraper.html#method-c-handler","(url_or_uri)",""],["handler","Scraper","Scraper.html#method-i-handler","()",""],["handler","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-c-handler","(url_or_uri)","<p>Predict what handler will scrape the page\n"],["handler","Www_seriouseats_com_Scraper","Www_seriouseats_com_Scraper.html#method-c-handler","(url_or_uri)",""],["hard_save","Feed","Feed.html#method-i-hard_save","()",""],["has_editable","ReferentPresenter","ReferentPresenter.html#method-i-has_editable","(kind)","<p>Does this kind of Referent have an editable field for\n"],["has_image","TagServices","TagServices.html#method-i-has_image","(image_ref)",""],["has_in_collection?","User","User.html#method-i-has_in_collection-3F","(entity)",""],["has_query?","NullResults","NullResults.html#method-i-has_query-3F","()",""],["has_query?","ResultsCache","ResultsCache.html#method-i-has_query-3F","()",""],["has_worker?","ResponseServices","ResponseServices.html#method-c-has_worker-3F","()",""],["header","SitePresenter","SitePresenter.html#method-i-header","()",""],["header_partial","FilteredPresenter","FilteredPresenter.html#method-i-header_partial","()",""],["header_partial","SearchIndexPresenter","SearchIndexPresenter.html#method-i-header_partial","()",""],["header_partial","UserContentPresenter","UserContentPresenter.html#method-i-header_partial","()",""],["header_result","Object","Object.html#method-i-header_result","(link, resource=nil)","<p>Probe a URL with its server, returning the result code for a head request\n"],["headered_list_items","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-headered_list_items","(header_selector, sibling_tag='ul', title=nil, &block)","<p>Process the items of a list that is preceded by a header\n"],["hit_on_attributes","Gleaning","Gleaning.html#method-i-hit_on_attributes","(attrhash, site)",""],["hit_on_finder","Site","Site.html#method-i-hit_on_finder","(label, selector, attribute_name)","<p>When a result from one of the site&#39;s finders gets hit, vote it up\n"],["home","PagesController","PagesController.html#method-i-home","()",""],["home=","Site","Site.html#method-i-home-3D","(url)","<p>We need to point the page_ref back to us so that it doesn&#39;t create a\nredundant site.\n"],["home_navtab","NavtabsHelper","NavtabsHelper.html#method-i-home_navtab","(mode = :full)","<p>def news_navtab mode = :full\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">navtab</span> :<span class=\"ruby-identifier\">news</span>, <span class=\"ruby-string\">&#39;News&#39;</span>, <span class=\"ruby-node\">&quot;/users/#{current_user_or_guest_id}/news&quot;</span>, <span class=\"ruby-identifier\">mode</span>\n</pre>\n<p>end …\n"],["home_page?","ResponseServices","ResponseServices.html#method-i-home_page-3F","()",""],["homelink","LinkHelper","LinkHelper.html#method-i-homelink","(decorator, options={})","<p>Provide an internal link to an object&#39;s #associated, #contents or #show\nmethods, as available\n"],["host","PageRef","PageRef.html#method-i-host","()","<p>alias_method :host, :domain\n"],["host_forbidden","Object","Object.html#method-i-host_forbidden","(url)","<p>We don&#39;t record urls from any of our hosts\n"],["host_url","Object","Object.html#method-i-host_url","(url)","<p>Parse the url and return the protocol, host and port portion\n"],["hover_menu","ListsHelper","ListsHelper.html#method-i-hover_menu","(label, options={})",""],["human_name","ModelDecorator","ModelDecorator.html#method-i-human_name","(plural=false, capitalize=true)","<p>Recipe =&gt; &#39;Recipe&#39; FeedEntry =&gt; &#39;Feed entry&#39;\n"],["human_name","PageRefDecorator","PageRefDecorator.html#method-i-human_name","(plural=false, capitalize=true)","<p>def name\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The name by which the reference is referred to is either</span>\n<span class=\"ruby-comment\"># 1) the link_text of the reference ...</span>\n</pre>\n"],["human_name","ReferentDecorator","ReferentDecorator.html#method-i-human_name","(plural=false, capitalize=true)",""],["human_name","Templateer","Templateer.html#method-i-human_name","(plural=false, capitalize=true)",""],["id_path","ReferentServices","ReferentServices.html#method-c-id_path","(path, higher_id)","<p>Return the ontological parentage from one referent id to another, if such a\npath exists Result: an ordered …\n"],["identify","UsersController","UsersController.html#method-i-identify","()","<p>Ask user for an email address for login purposes\n"],["ie_hex_str","Sass::Script::Functions","Sass/Script/Functions.html#method-i-ie_hex_str","(color)","<p>LARS: Snatched from compass - 2011-11-29 - used for gradients in IE6-9\nreturns an IE hex string for a …\n"],["if_empty","String","String.html#method-i-if_empty","(fallback=nil)",""],["if_present","Array","Array.html#method-i-if_present","(default=nil)","<p>Return nil if the string is empty. Also defined on NilClass, so empty\nstrings and nil both return nil …\n"],["if_present","NilClass","NilClass.html#method-i-if_present","(default=nil)","<p>if_present is defined for the benefit of String class\n"],["if_present","String","String.html#method-i-if_present","(default=nil)","<p>Return nil if the string is empty. Also defined on NilClass, so empty\nstrings and nil both return nil …\n"],["image","PageRefDecorator","PageRefDecorator.html#method-i-image","()",""],["image","RecipeDecorator","RecipeDecorator.html#method-i-image","()",""],["image","SiteDecorator","SiteDecorator.html#method-i-image","()",""],["image=","PageRefDecorator","PageRefDecorator.html#method-i-image-3D","(img)",""],["image=","RecipeDecorator","RecipeDecorator.html#method-i-image-3D","(img)",""],["image=","SiteDecorator","SiteDecorator.html#method-i-image-3D","(img)",""],["image_class","CollectibleDecorator","CollectibleDecorator.html#method-i-image_class","()",""],["image_enclosure","ImagesHelper","ImagesHelper.html#method-i-image_enclosure","(decorator, tag=:div, opts_in={})","<p>Define a div or other content tag for enclosing an image. options\n:fill_mode, :explain and :fallback_img …\n"],["image_from_decorator","ImagesHelper","ImagesHelper.html#method-i-image_from_decorator","(decorator, options={})",""],["image_with_error_recovery","ImagesHelper","ImagesHelper.html#method-i-image_with_error_recovery","(url_or_object, opts_in={})","<p>Define an image tag which responds reasonably to image failure using\npics.js. url_or_object: either a …\n"],["images","TagServices","TagServices.html#method-i-images","()","<p>Look up all the images attached to all the referents of the tag\n"],["imgdata","FeedDecorator","FeedDecorator.html#method-i-imgdata","()",""],["imgdata","ImageReference","ImageReference.html#method-i-imgdata","(force=false)","<p>Provide suitable content for an &lt;img&gt; element: preferably data, but\npossibly a url or even (if …\n"],["imgdata","ListDecorator","ListDecorator.html#method-i-imgdata","()",""],["imgdata","Picable","Picable.html#method-i-imgdata","(fallback_to_url=true)","\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">picuri_problem</span>\n  <span class=\"ruby-identifier\">picref</span> <span class=\"ruby-operator\">&amp;&amp;</span> <span class=\"ruby-operator\">!</span><span class=\"ruby-identifier\">picref</span>.<span class=\"ruby-identifier\">usable_url</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p># Return the image for the entity, either as a  …\n"],["imgdata","ReferentDecorator","ReferentDecorator.html#method-i-imgdata","()","<p>A referent gets its picture from either 1) a directly-associated\nImageReference, or an image from one …\n"],["imgurl","ImageReference","ImageReference.html#method-i-imgurl","()","<p>Provide a url that&#39;s valid anywhere. It may come direct from the IR or,\nif there&#39;s only thumbdata, …\n"],["imgurl","Picable","Picable.html#method-i-imgurl","()","<p>Ignore the thumbnail and return a url\n"],["include","Counts","Counts.html#method-i-include","(key_or_keys, pluck_key_or_increment=1, accumulate=true)",""],["include","ListServices","ListServices.html#method-i-include","(entity, user_or_id)","<p>Append an entity to the list, which involves: 1) ensuring that the entity\nappears in the ordering, appending …\n"],["include?","ListServices","ListServices.html#method-i-include-3F","(entity, user_or_id, with_pullins=true)","<p>A list “includes” an item if 1) it is stored directly in the list, or 2) it\nis tagged by the …\n"],["include_by","ListServices","ListServices.html#method-i-include_by","(entity_type, entity_id, user_id)","<p>Add an entity to the list based on parameters\n"],["included","Backgroundable","Backgroundable.html#method-c-included","(base)",""],["included","ControllerAuthentication","ControllerAuthentication.html#method-c-included","(controller)",""],["included","ExtractParams","ExtractParams.html#method-c-included","(base)",""],["included","Pagerefable","Pagerefable.html#method-c-included","(base)",""],["included","Picable","Picable.html#method-c-included","(base)",""],["included","TagSearch","TagSearch.html#method-c-included","(base)",""],["included","Typeable","Typeable.html#method-c-included","(base)",""],["included_tag_tokens=","List","List.html#method-i-included_tag_tokens-3D","(idstring)",""],["incoming_attributes","Taggable","Taggable.html#method-i-incoming_attributes","(keys)",""],["index","AnswersController","AnswersController.html#method-i-index","()","<p>GET /answers\n"],["index","AuthenticationsController","AuthenticationsController.html#method-i-index","()",""],["index","CollectionController","CollectionController.html#method-i-index","()",""],["index","EditionsController","EditionsController.html#method-i-index","()","<p>GET /editions\n"],["index","ExpressionsController","ExpressionsController.html#method-i-index","()","<p>GET /expressions GET /expressions.json\n"],["index","FeedsController","FeedsController.html#method-i-index","()","<p>GET /feeds GET /feeds.json\n"],["index","IntegersController","IntegersController.html#method-i-index","()",""],["index","ListsController","ListsController.html#method-i-index","()",""],["index","PageRefsController","PageRefsController.html#method-i-index","()","<p>GET /page_refs\n"],["index","RatingsController","RatingsController.html#method-i-index","()","<p>GET /ratings GET /ratings.xml\n"],["index","RecipesController","RecipesController.html#method-i-index","()",""],["index","ReferencesController","ReferencesController.html#method-i-index","()","<p>GET /references GET /references.json\n"],["index","ReferentsController","ReferentsController.html#method-i-index","()","<p>GET /referents GET /referents.json\n"],["index","RpEventsController","RpEventsController.html#method-i-index","()",""],["index","ScalesController","ScalesController.html#method-i-index","()","<p>GET /scales GET /scales.xml\n"],["index","SearchController","SearchController.html#method-i-index","()",""],["index","SitesController","SitesController.html#method-i-index","()","<p>GET /sites GET /sites.json\n"],["index","SuggestionsController","SuggestionsController.html#method-i-index","()","<p>GET /suggestions\n"],["index","TagsController","TagsController.html#method-i-index","()","<p>GET /tags GET /tags.xml\n"],["index","TagsetsController","TagsetsController.html#method-i-index","()","<p>GET /tagsets\n"],["index","Users::NotificationsWithDeviseController","Users/NotificationsWithDeviseController.html#method-i-index","()","<p># Authenticate devise resource by Devise (e.g. calling authenticate_user!\nmethod). # @api protected # …\n"],["index","UsersController","UsersController.html#method-i-index","()","<p>GET /users GET /users.xml\n"],["index","VotesController","VotesController.html#method-i-index","()","<p>GET /votes\n"],["index_to_type","Typeable::ClassMethods","Typeable/ClassMethods.html#method-i-index_to_type","(index)","<p>Taking an index into the table of tag types, return the symbol for that\ntype (used to build a set of …\n"],["indexing_url","Object","Object.html#method-i-indexing_url","(url)","<p>This is the version of a url used in indexing PageRefs: no target, no lone\nslash for a path\n"],["indirect_object","SharedEventCreateArticulator","SharedEventCreateArticulator.html#method-i-indirect_object","()",""],["individual_tagtypes","CollectibleDecorator","CollectibleDecorator.html#method-i-individual_tagtypes","()","<p>Specify the types of tag that get displayed individually on the card. :Misc\nis a special “grab bag” …\n"],["individual_tagtypes","ListDecorator","ListDecorator.html#method-i-individual_tagtypes","()","<p>Specify the types of tag that get displayed individually on the card. :Misc\nis a special “grab bag” …\n"],["individual_tagtypes","RecipeDecorator","RecipeDecorator.html#method-i-individual_tagtypes","()",""],["ingreds","Object","Object.html#method-i-ingreds","()",""],["init","ScraperController","ScraperController.html#method-i-init","()","<p>Reset the database in preparation for scraping\n"],["init_child_search","SearchNode","SearchNode.html#method-i-init_child_search","(child, weight=nil)","<p>Accept a child of a given weight\n"],["init_children","CollectibleAssociator","CollectibleAssociator.html#method-i-init_children","()",""],["init_children","EntityAssociator","EntityAssociator.html#method-i-init_children","()","<p>This is a stub for any associators that want to pre-build their results\n"],["init_children","FeedAssociator","FeedAssociator.html#method-i-init_children","()",""],["init_children","ListAssociator","ListAssociator.html#method-i-init_children","()",""],["init_children","SiteAssociator","SiteAssociator.html#method-i-init_children","()",""],["init_children","TagAssociator","TagAssociator.html#method-i-init_children","()",""],["init_children","TaggableAssociator","TaggableAssociator.html#method-i-init_children","()",""],["init_children","UserAssociator","UserAssociator.html#method-i-init_children","()",""],["init_search","SearchNode","SearchNode.html#method-i-init_search","(weight=nil, cutoff = nil)","<p>Initialize a search associate of a specific weight. There is no\nlocal-to-global scale factor at this …\n"],["init_stream","StreamPresentation","StreamPresentation.html#method-i-init_stream","(rc)",""],["initialize","Registrar","Registrar.html#method-c-initialize","(url)","<p>Initialize the Registrar for a particular url\n"],["injector?","ResponseServices","ResponseServices.html#method-i-injector-3F","()","<p>Returns true if we&#39;re in the context of a foreign page\n"],["injector_cancel_button","DialogsHelper","DialogsHelper.html#method-i-injector_cancel_button","(name, options={})",""],["injector_dialog","DialogsHelper","DialogsHelper.html#method-i-injector_dialog","(which=:generic, hdr_text='', options={})",""],["input","TokenInput","TokenInput.html#method-i-input","()",""],["input_html_classes","TokenInput","TokenInput.html#method-i-input_html_classes","()",""],["invitation_acceptance_label","NotifsHelper","NotifsHelper.html#method-i-invitation_acceptance_label","()",""],["invitation_diversion_link","ApplicationHelper","ApplicationHelper.html#method-i-invitation_diversion_link","(url, invitee)","<p>Wrap a link in a link to invitations/diversion, so as to report the invitee\ngetting diverted to the reference …\n"],["invitation_token=","ResponseServices","ResponseServices.html#method-i-invitation_token-3D","(it)","<p>Set the invitation_token and store it in the @session\n"],["invitee_tokens=","User","User.html#method-i-invitee_tokens-3D","(tokenstr)",""],["isPrivate","User","User.html#method-c-isPrivate","(id)",""],["is_for","Result","Result.html#method-i-is_for","(label)",""],["is_injector","ResponseServices","ResponseServices.html#method-i-is_injector","()",""],["is_viewer?","TagPresenter","TagPresenter.html#method-i-is_viewer-3F","()",""],["is_viewer?","UserPresenter","UserPresenter.html#method-i-is_viewer-3F","()",""],["item_container_selector","ItemHelper","ItemHelper.html#method-i-item_container_selector","(entity_or_string=nil, context=nil)","<p>container_selector and wrapper_selector are adopted from masonry_helper.rb\nand are currently only for …\n"],["item_deleter","ItemHelper","ItemHelper.html#method-i-item_deleter","(item_or_decorator_or_specs=nil, item_mode=nil, context=nil)","<p>Define a :replacements item to delete the item node for @decorator\n"],["item_deleters","ItemHelper","ItemHelper.html#method-i-item_deleters","(item_or_decorator_or_specs, context=nil)","<p>Generate deleters for all versions of an item, and, if we&#39;re on its\npage, a pagelet replacement returning …\n"],["item_insertion","ItemHelper","ItemHelper.html#method-i-item_insertion","(decorator, context=nil)",""],["item_insertions","ItemHelper","ItemHelper.html#method-i-item_insertions","(decorator, context=nil)","<p>TODO: should apply to other aggregates, not just :masonry (i.e., :table and\n:slider)\n"],["item_mode","FeedsShowPresenter","FeedsShowPresenter.html#method-i-item_mode","()",""],["item_mode","UserContentPresenter","UserContentPresenter.html#method-i-item_mode","()",""],["item_partial_class","ItemHelper","ItemHelper.html#method-i-item_partial_class","(item_mode, decorator=@decorator)",""],["item_partial_name","ItemHelper","ItemHelper.html#method-i-item_partial_name","(item_or_decorator_or_specs=nil, item_mode=nil)","<p>The item partial depends on the item mode (:table, :modal, :masonry,\n:slider), defaulting to just “_show” …\n"],["item_partial_selector","ItemHelper","ItemHelper.html#method-i-item_partial_selector","(item_or_decorator_or_specs=nil, item_mode=nil, context=nil)",""],["item_preflight","ItemHelper","ItemHelper.html#method-i-item_preflight","(item_or_decorator_or_specs=nil, item_mode=nil)","<p>Prep for rendering an item in a particular mode: sort out the parameters\nand initialize @decorator\n"],["item_replacement","ItemHelper","ItemHelper.html#method-i-item_replacement","(item_or_decorator_or_specs=nil, item_mode=nil, locals={})","<p>Define a :replacements item to replace a particular item under an item mode\n(defaulting to the item_mode …\n"],["item_replacements","ItemHelper","ItemHelper.html#method-i-item_replacements","(item_or_decorator_or_specs, types=[:table, :masonry, :slider, :card, :homelink])","<p>Generate replacements for all versions of the item\n"],["item_to_render","ItemHelper","ItemHelper.html#method-i-item_to_render","(*args)","<p>Syntactic sugar to package up the parameters to render_item for recursive\ndescription\n"],["item_wrapper_selector","ItemHelper","ItemHelper.html#method-i-item_wrapper_selector","(decorator, context=nil)","<p>Provide a selector that finds the wrapper for a specific masonry item\n(given by entity_or_string)\n"],["itemscope","CollectionCache","CollectionCache.html#method-i-itemscope","()",""],["itemscope","DefaultSearch","DefaultSearch.html#method-i-itemscope","()","<p>Every meaningful ResultsCache MUST define an itemscope for the base set of\nresults Return a scope or …\n"],["itemscope","FeedsIndexCache","FeedsIndexCache.html#method-i-itemscope","()",""],["itemscope","FeedsShowCache","FeedsShowCache.html#method-i-itemscope","()",""],["itemscope","IntegersCache","IntegersCache.html#method-i-itemscope","()",""],["itemscope","ListsIndexCache","ListsIndexCache.html#method-i-itemscope","()","<p>A listcache may define an itemscope to let the superclass#items method do\npagination\n"],["itemscope","ListsShowCache","ListsShowCache.html#method-i-itemscope","()","<p>The itemscope is the initial query for all possible items\n"],["itemscope","NullResults","NullResults.html#method-i-itemscope","()","<p>Every meaningful ResultsCache MUST define an itemscope for the base set of\nresults Return a scope or …\n"],["itemscope","ReferencesIndexCache","ReferencesIndexCache.html#method-i-itemscope","()",""],["itemscope","ReferentsAssociatedCache","ReferentsAssociatedCache.html#method-i-itemscope","()","<p>Everything tagged by any of the referent&#39;s tags, EXCEPT page_refs,\nlists, feeds and sites\n"],["itemscope","ReferentsIndexCache","ReferentsIndexCache.html#method-i-itemscope","()",""],["itemscope","ResultTyping","ResultTyping.html#method-i-itemscope","()","<p>Default itemscope by result_type is to just search the model table\n"],["itemscope","SitesFeedsCache","SitesFeedsCache.html#method-i-itemscope","()",""],["itemscope","SitesIndexCache","SitesIndexCache.html#method-i-itemscope","()",""],["itemscope","SitesRecipesCache","SitesRecipesCache.html#method-i-itemscope","()",""],["itemscope","SitesShowCache","SitesShowCache.html#method-i-itemscope","()",""],["itemscope","TagSearch","TagSearch.html#method-i-itemscope","()",""],["itemscope","TagsAssociatedCache","TagsAssociatedCache.html#method-i-itemscope","()",""],["itemscope","UserCollectedListsCache","UserCollectedListsCache.html#method-i-itemscope","()",""],["itemscope","UserFeedsCache","UserFeedsCache.html#method-i-itemscope","()",""],["itemscope","UserFriendsCache","UserFriendsCache.html#method-i-itemscope","()",""],["itemscope","UserListsCache","UserListsCache.html#method-i-itemscope","()",""],["itemscope","UserOwnedListsCache","UserOwnedListsCache.html#method-i-itemscope","()",""],["itemscope","UsersBiglistCache","UsersBiglistCache.html#method-i-itemscope","()",""],["itemscope","UsersIndexCache","UsersIndexCache.html#method-i-itemscope","()",""],["itemscopes","CollectionCache","CollectionCache.html#method-i-itemscopes","()","<p>The itemscope is one or more scopes on the relevant models\n"],["itemscopes","DefaultSearch","DefaultSearch.html#method-i-itemscopes","()",""],["itemscopes","ListsShowCache","ListsShowCache.html#method-i-itemscopes","()",""],["itemstubs","Counts","Counts.html#method-i-itemstubs","(sorted=true)","<p>Define an array of itemstubs: strings denoting entity type/value pairs\n"],["join_urls","PageRefServices","PageRefServices.html#method-c-join_urls","(what)","<p>Convert any relative paths in PageRef urls by resort to aliases\n"],["jquery_include_tag","ApplicationHelper","ApplicationHelper.html#method-i-jquery_include_tag","(use_cdn=true, use_jq2=false)","<p>Get jQuery from the Google CDN, falling back to the version in jquery-rails\nif unavailable\n"],["js_finders","FinderServices","FinderServices.html#method-c-js_finders","(site=nil)","<p>Provide the finders in a form suitable for passing to a Javascript\nprocessor (see capture.js.erb)\n"],["kind_as_fixnum","PageRef","PageRef.html#method-i-kind_as_fixnum","()",""],["kind_selections","PageRefServices","PageRefServices.html#method-c-kind_selections","(options={})","<p>Provide an array of label/type pairs for selecting the type of a pageref\n"],["kind_to_name","PageRefServices","PageRefServices.html#method-c-kind_to_name","(kind)","<p>Try to translate a PageRef kind into English\n"],["label","OrgOptions","OrgOptions.html#method-i-label","(orgval)","<p>For a valid org choice, provide a human-friendly label\n"],["label_choices","FinderServices","FinderServices.html#method-c-label_choices","()",""],["labelled_avatar","ImagesHelper","ImagesHelper.html#method-i-labelled_avatar","(decorator, options={})",""],["labelled_quantity","Object","Object.html#method-i-labelled_quantity","(count, label, empty_msg = nil)",""],["labels","Gleaning","Gleaning.html#method-i-labels","()",""],["labelsym","Finder","Finder.html#method-i-labelsym","()",""],["launch_update","Feed","Feed.html#method-i-launch_update","(hard=false)","<p>Launch an update as “necessary”\n"],["letsencrypt","PagesController","PagesController.html#method-i-letsencrypt","()",""],["lexical_similars","TagServices","TagServices.html#method-i-lexical_similars","()","<p># ———————————————– # Return tags that match any of the given tags\nlexically, …\n"],["link_to_add_fields","ApplicationHelper","ApplicationHelper.html#method-i-link_to_add_fields","(name, f, association, *initializers)",""],["link_to_dialog","LinkHelper","LinkHelper.html#method-i-link_to_dialog","(label, path, options={})","<p>Provide a link to run a dialog\n"],["link_to_redirect","TriggersHelper","TriggersHelper.html#method-i-link_to_redirect","(label, url, options={} )",""],["link_to_remove_fields","RatingsHelper","RatingsHelper.html#method-i-link_to_remove_fields","(name, f)",""],["link_to_submit","LinkHelper","LinkHelper.html#method-i-link_to_submit","(label, path_or_options, options={})",""],["linkpath","LinkHelper","LinkHelper.html#method-i-linkpath","(object_or_decorator, action=nil)","<p>Provide a sensible internal link to the object\n"],["linkto_options","LinkHelper","LinkHelper.html#method-i-linkto_options","(path_or_options, options={})","<p>Provide a hash of options for link_to to hit a URL using the RP.submit\njavascript module, with options …\n"],["list","ListsShowCache","ListsShowCache.html#method-i-list","()",""],["list","TypeMap","TypeMap.html#method-i-list","()","<p>Return a list of name/value pairs, suitable for building a select list\n"],["list_availability","UserDecorator","UserDecorator.html#method-i-list_availability","(viewer)",""],["list_lists_with_status","ListsHelper","ListsHelper.html#method-i-list_lists_with_status","(lists_with_status)","<p>Describe all the lists and their statuses\n"],["list_menu_item","ListsHelper","ListsHelper.html#method-i-list_menu_item","(l, entity, styling)",""],["list_menu_item_replacement","ListsHelper","ListsHelper.html#method-i-list_menu_item_replacement","(list, entity, styling)",""],["list_tags","UserDecorator","UserDecorator.html#method-i-list_tags","(decorator=nil, options={})","<p>Define presentation-specific methods here. Helpers are accessed through\n`helpers` (aka `h`). You can …\n"],["list_tags_for_collectible","TagsHelper","TagsHelper.html#method-i-list_tags_for_collectible","(taglist, collectible_decorator=nil)",""],["lists","CollectibleController","CollectibleController.html#method-i-lists","()","<p>Replace the set of lists that the entity is on (as viewed by the current\nuser)\n"],["liststrs","Object","Object.html#method-i-liststrs","(strs)","<p>Join strings into a “i, j and k” list\n"],["load","ListItem","ListItem.html#method-c-load","(str)",""],["load","ListSerializer","ListSerializer.html#method-c-load","(list_string)",""],["load!","Bootstrap","Bootstrap.html#method-c-load-21","()","<p>Inspired by Kaminari\n"],["localename","Expression","Expression.html#method-i-localename","()",""],["localename","Expression","Expression.html#method-c-localename","(tt)",""],["localename=","Expression","Expression.html#method-i-localename-3D","(tt)",""],["localenum","Expression","Expression.html#method-c-localenum","(tt)",""],["locales","Expression","Expression.html#method-c-locales","()",""],["localesym","Expression","Expression.html#method-i-localesym","()",""],["localesym","Expression","Expression.html#method-c-localesym","(tt)",""],["logged_in?","ControllerAuthentication","ControllerAuthentication.html#method-i-logged_in-3F","()",""],["login_choices","UsersHelper","UsersHelper.html#method-i-login_choices","(user)",""],["login_required","ApplicationController","ApplicationController.html#method-i-login_required","(options={})","<p>before_filter on controller that needs login to do anything\n"],["logo","ApplicationHelper","ApplicationHelper.html#method-i-logo","(small=false)",""],["longname","Referent","Referent.html#method-i-longname","()","<p>Return the name, appended with all associated forms\n"],["lookup","OrgOptions","OrgOptions.html#method-c-lookup","(val)",""],["lookup","Reference","Reference.html#method-c-lookup","(url_or_urls, partial=false)","<p>Index a Reference by URL or URLs, assuming it exists (i.e., no\ninitialization or creation)\n"],["make","Articulator","Articulator.html#method-c-make","(notification)","<p>Determine the class that articulates the given notifiable/key pair\n"],["make_parent_of","Referent","Referent.html#method-i-make_parent_of","(child_ref, move=true)","<p>Assert a parent-child relationship in the tree, taking care not to\nintroduce cycles If &#39;move&#39; …\n"],["make_parent_of","TagServices","TagServices.html#method-i-make_parent_of","(child_tag, move=true)","<p>Ensure that the child tag has a referent that is a child of our referent\n"],["make_polymorphic","RefermentServices","RefermentServices.html#method-c-make_polymorphic","()",""],["make_ready","Suggestion","Suggestion.html#method-i-make_ready","()","<p>Take a shot at making the results. If it can&#39;t be done directly, throw\nit into background\n"],["match","RcprefServices","RcprefServices.html#method-c-match","(matchstr, type, scope=nil)","<p>Find matches for the given string among entities of the given type, in the\ncontext of an optional scope …\n"],["match","TaggingServices","TaggingServices.html#method-c-match","(matchstr, scope=nil, type_or_types=nil)","<p>Find matches for the given string among entities of the given type, in the\ncontext of an optional scope …\n"],["match","TagsController","TagsController.html#method-i-match","()","<p>GET /tags/match This action is for remotely querying the tags that match a\ngiven string. It gets used …\n"],["match_friends","User","User.html#method-i-match_friends","(txt)","<p>Return a list of my friends who match the input text\n"],["match_friends","UsersController","UsersController.html#method-i-match_friends","()","<p>Take a tokenInput query string and match the input against the given\nuser&#39;s set of friends\n"],["max_index","TypeMap","TypeMap.html#method-i-max_index","()",""],["max_window_size","FeedsIndexCache","FeedsIndexCache.html#method-i-max_window_size","()",""],["max_window_size","ReferencesIndexCache","ReferencesIndexCache.html#method-i-max_window_size","()",""],["max_window_size","ReferentsIndexCache","ReferentsIndexCache.html#method-i-max_window_size","()",""],["max_window_size","ResultsCache","ResultsCache.html#method-i-max_window_size","()",""],["max_window_size","TagsIndexCache","TagsIndexCache.html#method-i-max_window_size","()","<p>include EntitiesCache Use the org parameter and the ASC/DESC attribute to\nassert an ordering\n"],["max_window_size","UsersIndexCache","UsersIndexCache.html#method-i-max_window_size","()",""],["meaning","Tag","Tag.html#method-i-meaning","()",""],["meaning=","Tag","Tag.html#method-i-meaning-3D","(ref)",""],["meaning_ids","ExpressionServices","ExpressionServices.html#method-c-meaning_ids","(tag_ids)","<p>Deliver referents for the (set of) tags\n"],["measure","NestedBenchmark","NestedBenchmark.html#method-c-measure","(msg)",""],["member_since","UserPresenter","UserPresenter.html#method-i-member_since","()",""],["menu","ApplicationController","ApplicationController.html#method-i-menu","()","<p>Generate a navtab menu as denoted by params NB: JSON ONLY!!!\n"],["mercury_attributes","PageRef","PageRef.html#method-c-mercury_attributes","()","<p>What attributes are obtained from Mercury?\n"],["merge_counts","Counts","Counts.html#method-i-merge_counts","(extant_counts)",""],["merge_counts","ResultsCache","ResultsCache.html#method-i-merge_counts","(prior_counts, new_counts)","<p>Incorporate the counts from a tag into existing counts, if any\n"],["merge_word_strings","Object","Object.html#method-i-merge_word_strings","(str1, str2)","<p>Two strings with space-separated words: merge them uniquely\n"],["message_key","Articulator","Articulator.html#method-i-message_key","(finals)","<p>message_key specifies the place in the locale table where the message is\nfound\n"],["message_key","SharedEventCreateArticulator","SharedEventCreateArticulator.html#method-i-message_key","(contents)","<p>Our message key discriminates depending on whether there&#39;s a message or\nnot\n"],["method_missing","Articulator","Articulator.html#method-i-method_missing","(namesym, *args, &block)",""],["method_missing","CollectibleDecorator","CollectibleDecorator.html#method-i-method_missing","(namesym, *args)","<p>Here&#39;s where we define misc_tag_types, misc_tags_label,\nlocked_misc_tags and editable_misc_tags\n"],["method_missing","Gleaning","Gleaning.html#method-i-method_missing","(namesym, *args)","<p>Access the results by label; singular =&gt; return first result, plural\n=&gt; return all\n"],["method_missing","Tag","Tag.html#method-i-method_missing","(meth, *args, &block)","<p>The Tag class defines taggable-entity association methods here. The\nTaggable class is consulted, and …\n"],["method_missing","Taggable","Taggable.html#method-i-method_missing","(namesym, *args)","<p>Here we corral methods of the form visible,editable,lockedtags,tag_tokens\nvisible means the user can …\n"],["method_missing","Templateer","Templateer.html#method-i-method_missing","(meth, *args, &block)","<p>Return EITHER the value of an object attribute OR a placeholder for use in\na template and defined by …\n"],["method_missing","User","User.html#method-i-method_missing","(meth, *args, &block)","<p>The User class defines collectible-entity association methods here. The\nCollectible class is cocnsulted, …\n"],["misc_tags_name_expanded","CollectibleDecorator","CollectibleDecorator.html#method-i-misc_tags_name_expanded","(misc_name)",""],["misc_tagtypes","CollectibleDecorator","CollectibleDecorator.html#method-i-misc_tagtypes","()","<p>The types of tag that appear under the &#39;Misc. Tags&#39; heading are the\neligible ones, without those …\n"],["modal_body","DialogsHelper","DialogsHelper.html#method-i-modal_body","(options={})",""],["modal_dialog","DialogsHelper","DialogsHelper.html#method-i-modal_dialog","(which, ttl=nil, options={}, &block)","<p>Present a modal dialog which: CSS class for dialog, including color scheme,\none of &#39;green&#39;, &#39;salmon&#39;, …\n"],["modal_footer","DialogsHelper","DialogsHelper.html#method-i-modal_footer","(options={}, &block)",""],["modal_header","DialogsHelper","DialogsHelper.html#method-i-modal_header","(ttl, options={})",""],["model_class","ResultType","ResultType.html#method-i-model_class","()",""],["model_name","ResultType","ResultType.html#method-i-model_name","()","<p>Express a user-friendly name string as a class name for purposes of naming\na result_type\n"],["move","Users::NotificationsWithDeviseController","Users/NotificationsWithDeviseController.html#method-i-move","()","<p>Moves to notifiable_path of the notification.\n<p>GET /:target_type/:target_id/notifications/:id/move @overload …\n"],["my_lists_navtab","NavtabsHelper","NavtabsHelper.html#method-i-my_lists_navtab","(mode = :full)",""],["na_menu","NestedAttributesHelper","NestedAttributesHelper.html#method-i-na_menu","(f, id, tag_selections)",""],["name","List","List.html#method-i-name","()",""],["name","ReferenceDecorator","ReferenceDecorator.html#method-i-name","()",""],["name","Referent","Referent.html#method-i-name","(args = {})","<p>Return the name of the referent\n"],["name","RpEventDecorator","RpEventDecorator.html#method-i-name","()","<p>Define presentation-specific methods here. Helpers are accessed through\n`helpers` (aka `h`). You can …\n"],["name","Site","Site.html#method-i-name","()",""],["name","TagPresenter","TagPresenter.html#method-i-name","(withtype = false, do_link = true)",""],["name","TypeMap","TypeMap.html#method-i-name","(tt)",""],["name","User","User.html#method-i-name","()","<p>&#39;name&#39; is just an alias for handle, for use by Channel referents\n"],["name=","List","List.html#method-i-name-3D","(new_name)",""],["name=","Site","Site.html#method-i-name-3D","(str)",""],["names","Referent","Referent.html#method-i-names","()","<p>Provide an array of all the names of all the tags for this referent\n"],["names","SiteServices","SiteServices.html#method-c-names","(id=nil)","\n<pre># Return the raw mapping from finders to arrays of hits\ndef gleaning_results url, finders=nil\n  PageTags.new(url, ...</pre>\n"],["navmenu_id","NavtabsHelper","NavtabsHelper.html#method-i-navmenu_id","(which)","<p>The CSS ID of the navmenu\n"],["navmenu_replacement","NavtabsHelper","NavtabsHelper.html#method-i-navmenu_replacement","(which)","<p>Package the navtab up to be replaced via AJAX\n"],["navtab","NavtabsHelper","NavtabsHelper.html#method-i-navtab","(which, menu_label, go_path, mode, booger=nil)","<p>Define one element of the navbar. Could be a – simple label (no go_path and\nno block given) – link …\n"],["navtab_id","NavtabsHelper","NavtabsHelper.html#method-i-navtab_id","(which)","<p>The CSS ID of the navtab\n"],["new","AnalyticsServices","AnalyticsServices.html#method-c-new","(name, interval, prior_interval = nil)",""],["new","AnswersController","AnswersController.html#method-i-new","()","<p>GET /answers/new\n"],["new","Articulator","Articulator.html#method-c-new","(notification)",""],["new","AuthenticationsController","AuthenticationsController.html#method-i-new","()","<p>Get a new authentication (==login)\n"],["new","BasePresenter","BasePresenter.html#method-c-new","(decorator_or_object, template, viewer)",""],["new","Candihash","Candihash.html#method-c-new","(startset)","<p>Initialize the candihash to a set of keys\n"],["new","CollectibleController","CollectibleController.html#method-i-new","()",""],["new","CollectibleServices","CollectibleServices.html#method-c-new","(entity)",""],["new","EditionsController","EditionsController.html#method-i-new","()","<p>GET /editions/new\n"],["new","EntityAssociator","EntityAssociator.html#method-c-new","(source_entity, target_entity_type, viewer)",""],["new","ExpressionServices","ExpressionServices.html#method-c-new","(expression)",""],["new","ExpressionsController","ExpressionsController.html#method-i-new","()","<p>GET /expressions/new GET /expressions/new.json\n"],["new","FeedbackController","FeedbackController.html#method-i-new","()",""],["new","FeedsController","FeedsController.html#method-i-new","()","<p>GET /feeds/new GET /feeds/new.json\n"],["new","FilteredPresenter","FilteredPresenter.html#method-c-new","(view_context, response_service, params, decorator=nil)",""],["new","FinderServices","FinderServices.html#method-c-new","(finder=nil)",""],["new","InvitationsController","InvitationsController.html#method-i-new","()","<p>GET /resource/invitation/new Create a new invitation–with or without a\nshared entity–and throw up a …\n"],["new","ListItem","ListItem.html#method-c-new","(*h)",""],["new","ListServices","ListServices.html#method-c-new","(list_or_decorator)",""],["new","ListsController","ListsController.html#method-i-new","()",""],["new","MercuryData","MercuryData.html#method-c-new","(url)",""],["new","NotificationPresenter","NotificationPresenter.html#method-c-new","(notification, template, viewer)",""],["new","NullResults","NullResults.html#method-c-new","(params={})",""],["new","OrgOptions","OrgOptions.html#method-c-new","(keys)",""],["new","PageRefServices","PageRefServices.html#method-c-new","(page_ref)",""],["new","PageRefsController","PageRefsController.html#method-i-new","()","<p>GET /page_refs/new\n"],["new","Partition","Partition.html#method-c-new","(range, mws=max_window_size)",""],["new","PasswordsController","PasswordsController.html#method-i-new","()","<p>GET /resource/password/new\n"],["new","RPCrypt","RPCrypt.html#method-c-new","( public_file, private_file )","<p>Create a new crypt object, initializing it with public and private keys\n"],["new","RatingsController","RatingsController.html#method-i-new","()","<p>GET /ratings/new GET /ratings/new.xml\n"],["new","RecipeServices","RecipeServices.html#method-c-new","(recipe, current_user=nil)",""],["new","RefereeServices","RefereeServices.html#method-c-new","(referee)",""],["new","ReferenceServices","ReferenceServices.html#method-c-new","(reference)",""],["new","ReferencesController","ReferencesController.html#method-i-new","()","<p>GET /references/new GET /references/new.json\n"],["new","ReferentServices","ReferentServices.html#method-c-new","(referent)",""],["new","ReferentsController","ReferentsController.html#method-i-new","()","<p>Get a new referent based on the given tag id GET /referents/new GET\n/referents/new.json?tagid=1&amp;mode={over,before,after}&amp;parent=referentid\n…\n"],["new","RefermentServices","RefermentServices.html#method-c-new","(referment)",""],["new","RegistrationsController","RegistrationsController.html#method-i-new","()",""],["new","Reloader::SSE","Reloader/SSE.html#method-c-new","(io)",""],["new","ResponseServices","ResponseServices.html#method-c-new","(params, session, request)",""],["new","Result","Result.html#method-c-new","(f=nil)",""],["new","ResultType","ResultType.html#method-c-new","(val)",""],["new","Results","Results.html#method-c-new","(*labels)",""],["new","RpEventsController","RpEventsController.html#method-i-new","()",""],["new","ScalesController","ScalesController.html#method-i-new","()","<p>GET /scales/new GET /scales/new.xml\n"],["new","ScraperController","ScraperController.html#method-i-new","()",""],["new","SearchAggregator","SearchAggregator.html#method-c-new","(*associates)",""],["new","SessionsController","SessionsController.html#method-i-new","()","<p>GET /resource/sign_in\n"],["new","SitePresenter","SitePresenter.html#method-c-new","(decorator, template, viewer)",""],["new","SiteServices","SiteServices.html#method-c-new","(site=nil)",""],["new","SuggestionServices","SuggestionServices.html#method-c-new","(target_type, viewer, basis=nil, context=nil, querytags = [])","<p>Build a suggestions finder for the given elements: &#39;target_type&#39; is\nan entity type (class of …\n"],["new","SuggestionsController","SuggestionsController.html#method-i-new","()","<p>GET /suggestions/new\n"],["new","TablePresenter","TablePresenter.html#method-c-new","(name, stats_hash, field_labels = {})",""],["new","TagServices","TagServices.html#method-c-new","(tag, user=nil)",""],["new","TaggingServices","TaggingServices.html#method-c-new","(taggable_entity)",""],["new","TagsController","TagsController.html#method-i-new","()","<p>GET /tags/new GET /tags/new.xml\n"],["new","TagsetsController","TagsetsController.html#method-i-new","()","<p>GET /tagsets/new\n"],["new","Templateer","Templateer.html#method-c-new","(class_or_obj=nil, options={})",""],["new","TypeMap","TypeMap.html#method-c-new","(init_table, nullname=\"unclassified\")",""],["new","UserServices","UserServices.html#method-c-new","(user)",""],["new","UsersController","UsersController.html#method-i-new","()",""],["new","ViewParams","ViewParams.html#method-c-new","(fp, qparams={})","<p>Use a filtered presenter and a subtype to define the parameters\n"],["new","VotesController","VotesController.html#method-i-new","()","<p>GET /votes/new\n"],["new_child","SearchNode","SearchNode.html#method-i-new_child","()","<p>new_child is a hook that allows an associate to dynamically add child\nassociates on demand\n"],["newsletter","RpMailer","RpMailer.html#method-i-newsletter","(edition, recipient)",""],["next_index","Partition","Partition.html#method-i-next_index","(hold=false)","<p>Get the index of the next element, relative to the current window,\noptionally incrementing the current …\n"],["next_item","ResultsCache","ResultsCache.html#method-i-next_item","()","<p>Return the next item in the current window, incrementing the cur_position\n"],["next_members","SearchAggregator","SearchAggregator.html#method-i-next_members","(n=10)",""],["next_path","FilteredPresenter","FilteredPresenter.html#method-i-next_path","()","<p>This is the path that will go into the “more items” link\n"],["next_range","Partition","Partition.html#method-i-next_range","()","<p>Provide the stream parameter for the “next page” link. Will be null if\nwe&#39;ve passed the …\n"],["next_range","ResultsCache","ResultsCache.html#method-i-next_range","(force=false)","\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">bust</span> <span class=\"ruby-identifier\">session_id</span>\n  <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-identifier\">session_id</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-identifier\">session_id</span>).<span class=\"ruby-identifier\">each</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">rc</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">rc</span>.<span class=\"ruby-identifier\">destroy</span> }\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p># Return the …\n"],["nmatches","ResultsCache","ResultsCache.html#method-i-nmatches","()",""],["no_action_error","ApplicationController","ApplicationController.html#method-i-no_action_error","()",""],["normalizeName","Tag","Tag.html#method-c-normalizeName","(str)","<p>Remove gratuitous characters, diacriticals, punctuation and capitalization\nfor search purposes\n"],["normalize_and_test_url","Object","Object.html#method-i-normalize_and_test_url","(url, href=nil)",""],["normalize_url","Object","Object.html#method-i-normalize_url","(url)",""],["normalize_urls","Object","Object.html#method-i-normalize_urls","(url_or_urls, strip_protocol=false)","<p>Map url or urls into their normalized form, optionally removing the\nprotocol &#39;ganga.com&#39; -&gt; …\n"],["normalized_name","Referent","Referent.html#method-i-normalized_name","(args = {})","<p>Return the name of the referent\n"],["normalized_uri","Object","Object.html#method-i-normalized_uri","(url)","<p>Return nil if anything is amiss, including nil or empty url\n"],["not_found","UsersController","UsersController.html#method-i-not_found","()",""],["notes","ListDecorator","ListDecorator.html#method-i-notes","(fallback=false)",""],["notifiable_path","RpEvent","RpEvent.html#method-i-notifiable_path","(event, key)","<p>notifiable path defaults to nil, subject to override\n"],["notifiable_path","SharedEvent","SharedEvent.html#method-i-notifiable_path","(event, key)",""],["notification_token=","ResponseServices","ResponseServices.html#method-i-notification_token-3D","(it)","<p>Set the notification_token and store it in the @session\n"],["notifications_format","NotificationsHelper","NotificationsHelper.html#method-i-notifications_format","(articulator)","<p>Given a notification, return a hash of attribute replacements for the\narticulator&#39;s summary\n"],["notifications_format_subject","NotificationsHelper","NotificationsHelper.html#method-i-notifications_format_subject","(notification, subject)",""],["notifications_locator","NotificationsHelper","NotificationsHelper.html#method-i-notifications_locator","()",""],["notifications_replacement","NotificationsHelper","NotificationsHelper.html#method-i-notifications_replacement","(target, options={})",""],["notifs_replacement","NotifsHelper","NotifsHelper.html#method-i-notifs_replacement","()",""],["notifs_section","NotifsHelper","NotifsHelper.html#method-i-notifs_section","(what, options={})",""],["nuke_message","SiteServices","SiteServices.html#method-i-nuke_message","(button)","<p>Evaluate the site&#39;s suitability for deletion\n"],["num","TypeMap","TypeMap.html#method-i-num","(tt)",""],["num_cookmarks","Collectible","Collectible.html#method-i-num_cookmarks","()","<p>Return the number of times a recipe&#39;s been marked\n"],["nvotes","Voteable","Voteable.html#method-i-nvotes","()",""],["object_path","Templateer","Templateer.html#method-i-object_path","()",""],["object_type","Templateer","Templateer.html#method-i-object_type","(plural=false)",""],["omniauth_pending","ResponseServices","ResponseServices.html#method-i-omniauth_pending","(clear = false)",""],["open","Users::NotificationsWithDeviseController","Users/NotificationsWithDeviseController.html#method-i-open","()","<p>POST /:target_type/:target_id/notifications/:id/open\n"],["options_for","Gleaning","Gleaning.html#method-i-options_for","(label)",""],["or_alias","UserDecorator","UserDecorator.html#method-i-or_alias","()","<p>If a user is aliased to another, return the latter\n"],["or_fallback","NilClass","NilClass.html#method-i-or_fallback","()",""],["or_fallback","String","String.html#method-i-or_fallback","()","<p>If a string has content, provide it, otherwise execute an attached block\n"],["orderingscope","CollectibleSearch","CollectibleSearch.html#method-i-orderingscope","(iscope=itemscope)","<p>What to sort on AND what to pass to #pluck for manual sorting\n"],["orderingscope","DefaultSearch","DefaultSearch.html#method-i-orderingscope","(iscope=itemscope)","<p>Provide an array consisting of\n\n<pre>-- a scope for fetching ordered items,\n-- a key suitable for passing to ...</pre>\n"],["orderingscope","FeedsIndexCache","FeedsIndexCache.html#method-i-orderingscope","(iscope=itemscope)",""],["orderingscope","FeedsShowCache","FeedsShowCache.html#method-i-orderingscope","(iscope=itemscope)",""],["orderingscope","ListsShowCache","ListsShowCache.html#method-i-orderingscope","(iscope=itemscope)","<p>TODO: offer option of ordering by list order\n"],["orderingscope","SearchIndexCache","SearchIndexCache.html#method-i-orderingscope","(iscope=itemscope)",""],["orderingscope","SitesIndexCache","SitesIndexCache.html#method-i-orderingscope","(iscope=itemscope)",""],["orderingscope","TagSearch","TagSearch.html#method-i-orderingscope","(iscope=itemscope)",""],["orderingscope","UserFeedsCache","UserFeedsCache.html#method-i-orderingscope","(iscope=itemscope)",""],["orderingscope","UsersIndexCache","UsersIndexCache.html#method-i-orderingscope","(iscope=itemscope)",""],["org=","ResultsCache","ResultsCache.html#method-i-org-3D","(orgscheme)","<p>Assert an organization scheme, which must be among those declared in\n#supported_org_options\n"],["org_buttons","FilteredPresenter","FilteredPresenter.html#method-i-org_buttons","(context, &block)","<p>Define buttons used in the search/redirect header above the presenter&#39;s\nresults\n"],["org_buttons","SearchIndexPresenter","SearchIndexPresenter.html#method-i-org_buttons","(context, &block)","<p>Define buttons used in the search/redirect header above the presenter&#39;s\nresults\n"],["org_options","ResultsCache","ResultsCache.html#method-i-org_options","()","<p>What to present as choices for sorting the results\n"],["orig_save","Feed","Feed.html#method-i-orig_save","(options={})","<p>The updated_at timestamp will denote when the feed entries were last\nupdated Thus, saving will not alter …\n"],["originator","ResponseServices","ResponseServices.html#method-i-originator","()","<p>Provide a URL that reproduces the current request\n"],["orphantagid","ApplicationController","ApplicationController.html#method-i-orphantagid","(tagid)",""],["owned_lists","UserDecorator","UserDecorator.html#method-i-owned_lists","(viewer=user)","<p>What lists that I own can be seen by the viewer?\n"],["owned_taggings","UserDecorator","UserDecorator.html#method-i-owned_taggings","(entity_type=nil)","<p>Filter the user&#39;s taggings by entity_type\n"],["owned_tags","UserDecorator","UserDecorator.html#method-i-owned_tags","(entity_type=nil)",""],["ownership_status","RecipesHelper","RecipesHelper.html#method-i-ownership_status","(rcp)","<p>If the recipe doesn&#39;t belong to the current user&#39;s collection,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">provide</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">link</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">add</span> <span class=\"ruby-identifier\">it</span>\n</pre>\n"],["page","Scraper","Scraper.html#method-i-page","()","<p>Get the page data via Mechanize\n"],["page_or_modal","ApplicationHelper","ApplicationHelper.html#method-i-page_or_modal","(options={})","<p>Render content, either for a page or a dialog\n"],["page_ref","PageRef","PageRef.html#method-i-page_ref","()","<p>def self.types\n\n<pre>@@prtypes ||= %w{ recipe definition article newsitem tip video homepage product offering ...</pre>\n"],["page_ref_identifier","PageRefsHelper","PageRefsHelper.html#method-i-page_ref_identifier","(pr, label=nil)",""],["page_refs","ReferentDecorator","ReferentDecorator.html#method-i-page_refs","(kind=nil)","<p>Provide the PageRef&#39;s associated with a referent. These come directly\nfrom Referments, and indirectly …\n"],["page_refs_of_kind","TagServices","TagServices.html#method-i-page_refs_of_kind","(kind)","<p>Get all the PageRefs associated with the tag, which consists of two\npopulations 1) PageRefs that are …\n"],["page_title","ViewParams","ViewParams.html#method-i-page_title","()","<p>For use in the address bar\n"],["page_with_trigger","ActionMailer::MailHelper","ActionMailer/MailHelper.html#method-i-page_with_trigger","(page, dialog=nil)",""],["page_with_trigger","TriggersHelper","TriggersHelper.html#method-i-page_with_trigger","(page, dialog=nil)","<p>Provide a link to a full page with a builtin trigger to a certain dialog\n"],["pagelet_body_id","PageletsHelper","PageletsHelper.html#method-i-pagelet_body_id","(entity=nil)","<p>Hang an id on the pagelet body for future conditional replacement\n"],["pagelet_body_replacement","PageletsHelper","PageletsHelper.html#method-i-pagelet_body_replacement","(entity_or_decorator=nil, to_delete=false)",""],["pagelet_body_selector","PageletsHelper","PageletsHelper.html#method-i-pagelet_body_selector","(entity=nil)",""],["pagelet_class","PageletsHelper","PageletsHelper.html#method-i-pagelet_class","()","<p>The class of the pagelet body, which depends on\n"],["pagelet_followup","PageletsHelper","PageletsHelper.html#method-i-pagelet_followup","(decorator, destroyed=false)","<p>Return the followup after updating or destroying an entity: replace its\npagelet with either an update, …\n"],["pagerefable","Pagerefable::ClassMethods","Pagerefable/ClassMethods.html#method-i-pagerefable","(url_attribute, options = {})",""],["pageurl","CollectibleDecorator","CollectibleDecorator.html#method-i-pageurl","()",""],["pageurl","FeedDecorator","FeedDecorator.html#method-i-pageurl","()","<p>Define presentation-specific methods here. Helpers are accessed through\n`helpers` (aka `h`). You can …\n"],["pane_dialog","DialogsHelper","DialogsHelper.html#method-i-pane_dialog","(decorator, options={})","<p>Produce a modal dialog divided into panes according to the decorator, as\nprovided by the DialogPanes …\n"],["panel_body","PanelHelper","PanelHelper.html#method-i-panel_body","(section)",""],["panel_body_replacement","PanelHelper","PanelHelper.html#method-i-panel_body_replacement","(signature)",""],["panel_collapse_button","PanelHelper","PanelHelper.html#method-i-panel_collapse_button","(type, item_mode)","<p>The collapse button will be to collapse down (for masonry display) or up\n(for slider)\n"],["panel_collapse_button_replacement","PanelHelper","PanelHelper.html#method-i-panel_collapse_button_replacement","(type, item_mode)",""],["panel_expand_link","PanelHelper","PanelHelper.html#method-i-panel_expand_link","(url, type)",""],["panel_label","ReferentsAssociatedPresenter","ReferentsAssociatedPresenter.html#method-i-panel_label","()",""],["panel_label","TagsAssociatedPresenter","TagsAssociatedPresenter.html#method-i-panel_label","()",""],["panel_label","ViewParams","ViewParams.html#method-i-panel_label","()",""],["panel_org_menu","PanelHelper","PanelHelper.html#method-i-panel_org_menu","(url, type, cur_org)",""],["panel_org_menu_replacement","PanelHelper","PanelHelper.html#method-i-panel_org_menu_replacement","(url, type, org)",""],["panel_suggestions","PanelHelper","PanelHelper.html#method-i-panel_suggestions","(partial)",""],["panel_suggestions_placeholder","PanelHelper","PanelHelper.html#method-i-panel_suggestions_placeholder","(type)","<p>def panel_suggestion_button url, type\n\n<pre>querify_link &#39;&#39;, url, class: &quot;suggest #{type.to_s.extensions_to_classes} ...</pre>\n"],["panel_suggestions_replacement","PanelHelper","PanelHelper.html#method-i-panel_suggestions_replacement","(type, partial=nil)",""],["panel_title","ListsShowPresenter","ListsShowPresenter.html#method-i-panel_title","()",""],["panel_title","SearchIndexPresenter","SearchIndexPresenter.html#method-i-panel_title","()",""],["panel_title","TagsIndexPresenter","TagsIndexPresenter.html#method-i-panel_title","()",""],["panel_title","ViewParams","ViewParams.html#method-i-panel_title","(short=false)",""],["param","ResultsCache","ResultsCache.html#method-i-param","(sym)","<p>Report a previously-saved parameter (or, in fact, any instance variable)\n"],["param_key","ModelDecorator","ModelDecorator.html#method-i-param_key","()","<p>Recipe =&gt; &#39;recipe&#39; FeedEntry =&gt; &#39;feed_entry&#39;\n"],["params","ResultType","ResultType.html#method-i-params","()",""],["params","ResultType","ResultType.html#method-c-params","(type)","<p>A convenience method to declare params w/o creating an object\n"],["params_needed","FeedsIndexCache","FeedsIndexCache.html#method-c-params_needed","()","<p>Declare a different default org\n"],["params_needed","FilteredPresenter","FilteredPresenter.html#method-i-params_needed","()","<p>Declare the parameters that we adopt as instance variables. subclasses\nwould add to this list\n"],["params_needed","NullResults","NullResults.html#method-c-params_needed","()","<p>Declare the parameters needed for this class\n"],["params_needed","ReferencesIndexCache","ReferencesIndexCache.html#method-c-params_needed","()",""],["params_needed","ReferentsIndexCache","ReferentsIndexCache.html#method-c-params_needed","()",""],["params_needed","ResultTyping","ResultTyping.html#method-c-params_needed","()",""],["params_needed","ResultsCache","ResultsCache.html#method-c-params_needed","()","<p>Declare the parameters needed for this class\n"],["params_needed","SitesIndexCache","SitesIndexCache.html#method-c-params_needed","()",""],["params_needed","StreamPresentation","StreamPresentation.html#method-i-params_needed","()",""],["params_needed","TagSearch::ClassMethods","TagSearch/ClassMethods.html#method-i-params_needed","()",""],["params_needed","UserFeedsCache","UserFeedsCache.html#method-c-params_needed","()",""],["parent_ids","TagServices","TagServices.html#method-i-parent_ids","(unique=false)",""],["parent_ids","TagServices","TagServices.html#method-c-parent_ids","(ids, unique=false)",""],["parent_ids_of_tags","ExpressionServices","ExpressionServices.html#method-c-parent_ids_of_tags","(tag_ids, unique=false)","<p>Return all the semantic parents of the tag(s) as an array of arrays\n"],["parent_tag_tokens","Referent","Referent.html#method-i-parent_tag_tokens","()","<p>Virtual attributes for parent, child and related referents. These are\nrepresented by tags, so getting …\n"],["parent_tag_tokens=","Referent","Referent.html#method-i-parent_tag_tokens-3D","(tokenlist)",""],["parent_tags","Referent","Referent.html#method-i-parent_tags","()",""],["parent_tags_of_tags","ExpressionServices","ExpressionServices.html#method-c-parent_tags_of_tags","(tag_ids, unique=false)","<p>Return all the semantic parents of the tag(s) as an array of arrays\n"],["parents","TagServices","TagServices.html#method-i-parents","(unique=false)",""],["parse","RecipesController","RecipesController.html#method-i-parse","()","<p>parse a recipe fragment, tagging it with the named class and (possibly)\n\n<pre>looking for substrings to match</pre>\n"],["parse_referment_params","ReferentServices","ReferentServices.html#method-i-parse_referment_params","(params)","<p>The referment params require special processing, since 1) The Kind of a\nreferment may have been changed …\n"],["parse_tokens","TokenInput","TokenInput.html#method-c-parse_tokens","(idstring)","<p>An iterator over the elements of a token string, calling the block on\neither an integer key, or a string. …\n"],["partition","Counts","Counts.html#method-i-partition","(bounds)",""],["partition_of","Partition","Partition.html#method-i-partition_of","(ix)","<p>Find the index of the partition containing &#39;ix&#39;, or nil if outside\nthe range\n"],["partition_on_scope?","ResultsCache","ResultsCache.html#method-i-partition_on_scope-3F","()","<p>Can the entities be presented as a partition on a single scope? …not if\nthere are querytags (which …\n"],["partition_range","Partition","Partition.html#method-i-partition_range","(ix)","<p>Return the range enclosing ix. Returns an empty range for ix above the\npartition\n"],["password_required?","User","User.html#method-i-password_required-3F","()",""],["path_from_url","Object","Object.html#method-i-path_from_url","(url)","<p>Remove the noise from a url to extract the domain\n"],["paths_to","Referent","Referent.html#method-i-paths_to","(inText = true, collected = [])","<p>Return an array of all paths leading to this leaf node\n"],["pct_positive","Voteable","Voteable.html#method-i-pct_positive","()",""],["pending","DeferredRequest","DeferredRequest.html#method-c-pending","(sessid)","<p>What&#39;s the next deferred request for this session?\n"],["pending?","Backgroundable","Backgroundable.html#method-i-pending-3F","()","<p>Awaiting execution\n"],["pending_invitee","ResponseServices","ResponseServices.html#method-i-pending_invitee","()","<p>Lookup the user to whom the current invitation token pertains\n"],["pending_modal_trigger","ControllerDeference","ControllerDeference.html#method-i-pending_modal_trigger","()","<p>If there&#39;s a deferred request that can be expressed as a trigger, do\nso.\n"],["pending_notification","ResponseServices","ResponseServices.html#method-i-pending_notification","()",""],["perform","Edition","Edition.html#method-i-perform","()","<p>The edition performs by mailing all subscribed users, one every 20 minutes\n(to conform to MailGun limitations) …\n"],["perform","Feed","Feed.html#method-i-perform","()",""],["perform","Gleaning","Gleaning.html#method-i-perform","()",""],["perform","ImageReference","ImageReference.html#method-i-perform","()","<p>Try to fetch thumbnail data for the record. Status code assigned in\nImageReference#fetchable and Reference#fetch …\n"],["perform","PageRef","PageRef.html#method-i-perform","()",""],["perform","Pagerefable","Pagerefable.html#method-i-perform","()","<p>The site performs its delayed job by forcing the associated page_ref to do\nits job (synchronously)\n"],["perform","Scraper","Scraper.html#method-i-perform","()","<p>perform with error catching\n"],["perform","Suggestion","Suggestion.html#method-i-perform","()",""],["perform","User","User.html#method-i-perform","()",""],["perform_without_dj","Backgroundable","Backgroundable.html#method-i-perform_without_dj","()","<p>Run the job, mimicking the hook calls of DJ\n"],["permission_denied","ApplicationController","ApplicationController.html#method-i-permission_denied","()",""],["pic_class","CollectiblePresenter","CollectiblePresenter.html#method-i-pic_class","()",""],["pic_field","PicPickerHelper","PicPickerHelper.html#method-i-pic_field","(form, options={})","<p>Show an image that will resize to fit an enclosing div, possibly with a\nlink to an editing dialog We&#39;ll …\n"],["pic_picker_magic","PicPickerHelper","PicPickerHelper.html#method-i-pic_picker_magic","(decorator, f, options={})","<p>Define an image and surrounding &lt;div&gt; such that copy and paste apply\nto the image This is assumed …\n"],["pic_picker_select_list","PicPickerHelper","PicPickerHelper.html#method-i-pic_picker_select_list","(urls)","<p># Bare-metal version of the pic preview widget, for use in a template file\ndef pic_preview_widget decorator, …\n"],["pic_preview_img_id","PicPickerHelper","PicPickerHelper.html#method-i-pic_preview_img_id","(decorator)",""],["pic_preview_input_id","PicPickerHelper","PicPickerHelper.html#method-i-pic_preview_input_id","(decorator)",""],["picable","Picable::ClassMethods","Picable/ClassMethods.html#method-i-picable","(picable_attribute, reference_name=:picture, fallback_img_file='NoPictureOnFile.png')",""],["picable_attribute","Picable","Picable.html#method-i-picable_attribute","()",""],["picref","Picable","Picable.html#method-i-picref","()",""],["picuri","Picable","Picable.html#method-i-picuri","()","<p>Return the image for the entity as a url NB: This isn&#39;t necessarily a\nvalid URL: Conventionally, …\n"],["picurl","CollectibleDecorator","CollectibleDecorator.html#method-i-picurl","()",""],["picurl=","Recipe","Recipe.html#method-i-picurl-3D","(pu)","<p>Writing the picture URL redirects to acquiring an image reference\n"],["pin","ListsController","ListsController.html#method-i-pin","()",""],["pin_button","ListsHelper","ListsHelper.html#method-i-pin_button","(list, entity)","<p>Provide a button for adding (pinning) an entity to the list\n"],["pin_navmenu","ListsHelper","ListsHelper.html#method-i-pin_navmenu","(entity)",""],["ping","Scraper","Scraper.html#method-i-ping","()",""],["placeholder","Templateer","Templateer.html#method-i-placeholder","(attribute)",""],["plural_name","ModelDecorator","ModelDecorator.html#method-i-plural_name","()","<p>Recipe =&gt; &#39;recipes&#39; FeedEntry =&gt; &#39;feed_entries&#39;\n"],["polite_name","User","User.html#method-i-polite_name","()",""],["polymorphic_link","LinkHelper","LinkHelper.html#method-i-polymorphic_link","(object_or_decorator, absolute_or_relative=:relative, options={})","<p>Like #polymorphic_path and #polymorphic_link, except – the choice of …path\nor …link is given by …\n"],["pop","DeferredRequest","DeferredRequest.html#method-c-pop","(sessid)",""],["popup","PagesController","PagesController.html#method-i-popup","()","<p>Generic action for displaying a popup by name\n"],["post","InvitationSentEvent","InvitationSentEvent.html#method-c-post","(inviter, invitee, shared, raw_invitation_token)",""],["post","LoginEvent","LoginEvent.html#method-c-post","(who)","\n<pre>acts_as_notifiable :users,\n                   targets: -&gt;(evt, key) { [evt.who] },\n                  ...</pre>\n"],["post","RpEvent","RpEvent.html#method-c-post","(subject, direct_object=nil, indirect_object=nil, data={})","<p>post an event of the given type, avoiding duplicates\n"],["post","SharedEvent","SharedEvent.html#method-c-post","(subject, direct_object=nil, indirect_object=nil, data={})",""],["post","SignupEvent","SignupEvent.html#method-c-post","(who)","<p>Login events accumulate for a given user\n"],["preload","Feed","Feed.html#method-c-preload","(url)",""],["present","ApplicationController","ApplicationController.html#method-i-present","(object)","<p>Get a presenter for the object from within a controller TODO Should we be\ndetecting a presenter on the …\n"],["present","ApplicationHelper","ApplicationHelper.html#method-i-present","(to_present, viewer, &block)",""],["present","SuggestionPresenter","SuggestionPresenter.html#method-i-present","()",""],["present_comments","RecipesHelper","RecipesHelper.html#method-i-present_comments","(recipe)","<p>Present the comments to this user. Now, all comments starting with\nhis/hers, but ultimately those of …\n"],["present_field","CardPresentation","CardPresentation.html#method-i-present_field","(what, trunc=0)",""],["present_page_ref","PageRefsHelper","PageRefsHelper.html#method-i-present_page_ref","(page_ref, options={})","<p>Show a reference, using as text the name of the related site\n"],["present_table","TableHelper","TableHelper.html#method-i-present_table","(display_table, type = nil, &block)",""],["presentation_partial","FilteredPresenter","FilteredPresenter.html#method-i-presentation_partial","(partial_name, subtype_or_subtypes, block=nil, qparams={})","<p>Invoke a partial for one or more subtypes. If the list of subtypes is nil,\njust use the viewparams for …\n"],["presentation_partials","FilteredPresenter","FilteredPresenter.html#method-i-presentation_partials","(&block)","<p>The default presentation is different for tables and for objects, which in\nturn may define multiple results …\n"],["printable_notifier_name","User","User.html#method-i-printable_notifier_name","()",""],["processing!","Backgroundable","Backgroundable.html#method-i-processing-21","()",""],["profile","UsersController","UsersController.html#method-i-profile","()",""],["propagate_privacy","List","List.html#method-i-propagate_privacy","()","<p>Make sure the list&#39;s tag obeys the privacy constraint of the list\nitself, The tag is visible only …\n"],["provider_name","Authentication","Authentication.html#method-i-provider_name","()",""],["proxify","CollectibleController","CollectibleController.html#method-i-proxify","(nominal_entity=nil)","<p>This method is responsible for attending to the fact that PageRefs are\noften edited on their own, and …\n"],["public?","User","User.html#method-c-public-3F","(id)","<p>Approve a user id for visibility by the public\n"],["pull","DeferredRequest","DeferredRequest.html#method-c-pull","(sessid, specs=nil)","<p>Get, delete and return a request matching the specs, if any, or the topmost\nrequest otherwise\n"],["pulled_tag_ids","ListServices","ListServices.html#method-i-pulled_tag_ids","()",""],["pulled_tags","ListServices","ListServices.html#method-i-pulled_tags","()","<p>Get the official list of tags that pull in entities: those which were\napplied by the list owner\n"],["push","DeferredRequest","DeferredRequest.html#method-c-push","(sessid, dr)","<p>Save the current request pending (presumably) a login, such that\ndeferred_request and deferred_trigger …\n"],["push","Result","Result.html#method-i-push","(str_in, uri=nil)","<p>Extract the data from a node under the given label\n"],["push_new_associate","SearchNode","SearchNode.html#method-i-push_new_associate","()","<p>push_new_associate uses the new_child method to push a new associate onto\nthe queue\n"],["push_state","RedirectHelper","RedirectHelper.html#method-i-push_state","(action=nil)",""],["push_state","ResponseServices","ResponseServices.html#method-i-push_state","(action=nil)","<p>Provide an array of parameters for pushState on the client such that: 1)\nthe page can be reloaded without …\n"],["qa","Expression","Expression.html#method-c-qa","()",""],["qa","TagServices","TagServices.html#method-c-qa","()","<p>Class method meant to be run from a console, to clean up redundant tags\n(name/index pair not unique) …\n"],["qa","TaggingServices","TaggingServices.html#method-c-qa","()","<p>Class method meant to be run from a console, to clean up redundant taggings\nbefore adding index to prevent …\n"],["qa","User","User.html#method-i-qa","()",""],["querify","Reference","Reference.html#method-c-querify","(url_or_urls, partial=false)","<p>Craft a query string and an array of urls, suitable for a #where call\n&#39;ganga.com/upchuck&#39; -&gt; …\n"],["querify_block","QuerifyHelper","QuerifyHelper.html#method-i-querify_block","(url, body_content = '', options={})","<p>A querify_block defines a context for querify actions – it takes querify\nparams from enclosing blocks …\n"],["querify_button","QuerifyHelper","QuerifyHelper.html#method-i-querify_button","(name, value, options={})","<p>Declare a button which propagates parameter changes to enclosing querify\nsupes\n"],["querify_item","QuerifyHelper","QuerifyHelper.html#method-i-querify_item","(label, qparams, options={ })",""],["querify_link","QuerifyHelper","QuerifyHelper.html#method-i-querify_link","(label, url, options={})","<p>Declare a link which records param changes and maintains a clickable link\ninfluenced by those params …\n"],["querify_radiobutton","QuerifyHelper","QuerifyHelper.html#method-i-querify_radiobutton","(label, qparams, options={ })",""],["query","FilteredPresenter","FilteredPresenter.html#method-i-query","(format=nil, params={})","<p>The query for applying querytags is the same as this one, without :stream,\n:querytags or :nocache\n"],["query_to_hash","Object","Object.html#method-i-query_to_hash","(qstr)","<p>Crack a query string into a key/value hash TODO: only handles top-level\nkeys; should be supplying a subhash …\n"],["querytags","Querytags","Querytags.html#method-i-querytags","()","<p>Return the set of tags in the current query, as supplied by params We also\nstash the last set of strings …\n"],["querytags?","FilteredPresenter","FilteredPresenter.html#method-i-querytags-3F","()",""],["querytags?","SearchIndexPresenter","SearchIndexPresenter.html#method-i-querytags-3F","()",""],["question_section","ApplicationHelper","ApplicationHelper.html#method-i-question_section","(q, &block)",""],["queued?","Backgroundable","Backgroundable.html#method-i-queued-3F","()","<p>Does this object have a DelayedJob waiting?\n"],["rating_attributes=","Rating","Rating.html#method-i-rating_attributes-3D","(attrs)",""],["reachable?","Recipe","Recipe.html#method-i-reachable-3F","()","<p>-&gt; true, false, nil Report on the reachability of a Gleanable. return\ntrue if EITHER the pageref or …\n"],["read_only","CollectibleDecorator","CollectibleDecorator.html#method-i-read_only","()","<p>Collectibles are editable by default\n"],["read_only","FeedEntryDecorator","FeedEntryDecorator.html#method-i-read_only","()","<p>Feed entries can&#39;t be modified\n"],["ready?","ResultsCache","ResultsCache.html#method-i-ready-3F","()",""],["recent","UsersController","UsersController.html#method-i-recent","()","<p>Show the user&#39;s recently-viewed recipes\n"],["recipe","RecipesAssociatedCache","RecipesAssociatedCache.html#method-i-recipe","()",""],["recipe_comments_div","RecipesHelper","RecipesHelper.html#method-i-recipe_comments_div","(recipe, whose)",""],["recipe_grid_element_class","ApplicationHelper","ApplicationHelper.html#method-i-recipe_grid_element_class","(recipe)",""],["recipe_ids","TagServices","TagServices.html#method-i-recipe_ids","(with_synonyms=false)",""],["recipe_item","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-recipe_item","(li, extractions_from_context={})",""],["recipe_list_element_class","ApplicationHelper","ApplicationHelper.html#method-i-recipe_list_element_class","(recipe)",""],["recipe_list_element_golink_class","ApplicationHelper","ApplicationHelper.html#method-i-recipe_list_element_golink_class","(recipe)",""],["recipe_popup","ApplicationHelper","ApplicationHelper.html#method-i-recipe_popup","(rcp)",""],["recipe_tags_div","RecipesHelper","RecipesHelper.html#method-i-recipe_tags_div","(recipe)",""],["recipe_title_div","RecipesHelper","RecipesHelper.html#method-i-recipe_title_div","(recipe)",""],["recipe_uncollect_button","RecipesHelper","RecipesHelper.html#method-i-recipe_uncollect_button","(recipe, browser_item)",""],["recipes","Rating","Rating.html#method-i-recipes","()","<p>Get a list of recipe keys matching the object&#39;s user_id, scale_id and\nscale_val\n"],["recipes","TagServices","TagServices.html#method-i-recipes","(with_synonyms=false)",""],["redirect_params","ResponseServices","ResponseServices.html#method-i-redirect_params","(options = {})","<p>Forward the appropriate parameters to a subsequent request\n"],["redirect_to_modal","ApplicationController","ApplicationController.html#method-i-redirect_to_modal","(dialog, page=nil)","<p>Enable a modal dialog to run by embedding its URL in the URL of a page,\nthen redirecting to it\n"],["redirect_url","CustomFailure","CustomFailure.html#method-i-redirect_url","()","<p>In failing due to an authentication error, we redirect to a page which will\nallow for the login dialog. …\n"],["ref_affiliates_summary","ReferentsHelper","ReferentsHelper.html#method-i-ref_affiliates_summary","(ref, options={})",""],["ref_check","ExpressionDecorator","ExpressionDecorator.html#method-c-ref_check","()",""],["ref_check","TagDecorator","TagDecorator.html#method-c-ref_check","(fix=false)",""],["ref_check","TagDecorator","TagDecorator.html#method-i-ref_check","(fix=false)",""],["ref_children_summary","ReferentsHelper","ReferentsHelper.html#method-i-ref_children_summary","(ref, options={})",""],["ref_expressions_summary","ReferentsHelper","ReferentsHelper.html#method-i-ref_expressions_summary","(referent, options={})",""],["ref_if_any","Collectible","Collectible.html#method-i-ref_if_any","(uid=nil)","<p>Check for the existence of a reference and return it, but don&#39;t create\none\n"],["ref_parents_summary","ReferentsHelper","ReferentsHelper.html#method-i-ref_parents_summary","(ref, options={})",""],["reference","ReferenceCache","ReferenceCache.html#method-i-reference","()",""],["reference_expressions","ReferencesHelper","ReferencesHelper.html#method-i-reference_expressions","(reference)",""],["referent","ReferentsAssociatedCache","ReferentsAssociatedCache.html#method-i-referent","()",""],["referent_class_for_tagtype","Referent","Referent.html#method-c-referent_class_for_tagtype","(typenum)",""],["referent_identifier","ReferentsHelper","ReferentsHelper.html#method-i-referent_identifier","(ref, label=nil)",""],["referent_summary","ReferentsHelper","ReferentsHelper.html#method-i-referent_summary","(ref, options={})",""],["referents","TagServices","TagServices.html#method-i-referents","(exclude_self=false)",""],["referral_path","NotificationPresenter","NotificationPresenter.html#method-i-referral_path","()","<p>If the notification has a preferred page to present when answered, it&#39;s\ndeclared here\n"],["refresh","Feed","Feed.html#method-i-refresh","()","<p>Ensure that the entries for the feed are up to date\n"],["refresh","FeedsController","FeedsController.html#method-i-refresh","()",""],["refute","TaggingServices","TaggingServices.html#method-i-refute","(tag, owner_id)",""],["refute_tagging","Taggable","Taggable.html#method-i-refute_tagging","(tag_or_id, uid=nil)",""],["register","Articulator","Articulator.html#method-c-register","(key, klass)","<p>Register a class as articulating a particular key\n"],["register_list","Registrar","Registrar.html#method-c-register_list","(name, options={})","<p>Assert a list into the database with the given name. Options: :owner is the\nUser who owns it :picurl …\n"],["register_recipe","Registrar","Registrar.html#method-c-register_recipe","(recipe_link, extractions)","<p>Ensure that a recipe has been filed, and launch it for scraping if new\n"],["register_tag","Registrar","Registrar.html#method-c-register_tag","(name_or_tag, tagtype=nil, page_link=nil, options={})","<p>name_or_tag: a string or a Tag instance;\n\n<pre>tagtype required to give the tag type if a string\ntagtype omitted ...</pre>\n"],["registry","Articulator","Articulator.html#method-c-registry","()",""],["related","Referent","Referent.html#method-c-related","(tag, doSynonyms = false, doParents = false, doChildren = false)","<p>Return a list of all tags that are related to the one provided. This means:\n…all the synonyms (if required) …\n"],["related_tag_tokens","Referent","Referent.html#method-i-related_tag_tokens","()",""],["related_tag_tokens=","Referent","Referent.html#method-i-related_tag_tokens-3D","(tokenlist)",""],["related_tags","Referent","Referent.html#method-i-related_tags","()",""],["remove","List","List.html#method-i-remove","(entity)",""],["remove","UsersController","UsersController.html#method-i-remove","()","<p>Remove a user from the friends of the current user\n"],["render","NotificationPresenter","NotificationPresenter.html#method-i-render","()",""],["render_fp","ApplicationController","ApplicationController.html#method-i-render_fp","(fp)","<p>Use the filtered_presenter to render various aspects of a page–including\nstreaming items\n"],["render_item","ItemHelper","ItemHelper.html#method-i-render_item","(item_or_decorator_or_specs=nil, item_mode=nil, locals={})",""],["render_item_unwrapped","ItemHelper","ItemHelper.html#method-i-render_item_unwrapped","(item_or_decorator_or_specs=nil, item_mode=nil, locals={})",""],["render_optional_error_file","ApplicationController","ApplicationController.html#method-i-render_optional_error_file","(status_code)",""],["render_params","ResponseServices","ResponseServices.html#method-i-render_params","(defaults_in = {})","<p>Return appropriate parameters for a render call, asserting defaults as\nnecessary\n"],["render_seeker_item","SeekerHelper","SeekerHelper.html#method-i-render_seeker_item","(element)","<p>Render an element of a collection, depending on its class\n"],["render_template","StreamHelper","StreamHelper.html#method-i-render_template","(controller, action)","<p>This is kind of a cheater helper, to render a template for embedding in a\nreplacement\n"],["render_to_string","ApplicationController","ApplicationController.html#method-i-render_to_string","(*)","<p>Monkey-patch to adjudicate between streaming and render_to_stream per\nblog.sorah.jp/2013/07/28/render_to_string-in-ac-live …\n"],["rendered_aspects","CardPresentation","CardPresentation.html#method-i-rendered_aspects","(*args)","<p>Call the provided block for each aspect of the card\n"],["report","Result","Result.html#method-i-report","()",""],["report_cookie_string","ApplicationController","ApplicationController.html#method-i-report_cookie_string","()",""],["report_entity","CollectibleController","CollectibleController.html#method-i-report_entity","(url, notice, formats, destroyed = false)","<p>Render to html, json or js the results of a recipe manipulation\n"],["report_items","ApplicationHelper","ApplicationHelper.html#method-i-report_items","(scope_or_array, label, options={})","<p>Provide a labelled presentation of a collection of entities scope_or_array:\neither a scope for items, …\n"],["report_session","ApplicationController","ApplicationController.html#method-i-report_session","(context)",""],["require_no_authentication","InvitationsController","InvitationsController.html#method-i-require_no_authentication","()","<p>Override to allow inspection of invitation while logged in\n"],["require_no_authentication","SessionsController","SessionsController.html#method-i-require_no_authentication","()","<p>Somehow require_no_authentication redirects to after_sign_in_path_for when\nthe user is already logged …\n"],["rescue_action_in_public","ApplicationController","ApplicationController.html#method-i-rescue_action_in_public","()",""],["reset","Candihash","Candihash.html#method-i-reset","(keys)",""],["resolve","SiteServices","SiteServices.html#method-i-resolve","(candidate)","<p>Make sure the given uri isn&#39;t relative, and make it absolute if it is\n"],["resource","ApplicationHelper","ApplicationHelper.html#method-i-resource","()",""],["resource_errors_to_flash","ControllerUtils","ControllerUtils.html#method-i-resource_errors_to_flash","(resource, options={})","<p>Stick ActiveRecord errors into the flash for presentation at the next\naction\n"],["resource_errors_to_flash_now","ControllerUtils","ControllerUtils.html#method-i-resource_errors_to_flash_now","(resource, options={})","<p>Stick ActiveRecord errors into the flash for presentation now\n"],["resource_from_invitation_token","InvitationsController","InvitationsController.html#method-i-resource_from_invitation_token","()",""],["resource_name","ApplicationHelper","ApplicationHelper.html#method-i-resource_name","()",""],["respond","CustomFailure","CustomFailure.html#method-i-respond","()","<p>You need to override respond to eliminate recall\n"],["response_service","ApplicationController","ApplicationController.html#method-i-response_service","()","<p>This object directs conditional view code according to target device and\ncontext\n"],["restore_tokens","ResponseServices","ResponseServices.html#method-i-restore_tokens","()","<p>When a user signs out, maintain pending invitation and notification tokens\n"],["restore_tokens","SessionsController","SessionsController.html#method-i-restore_tokens","()","<p>When a user signs out, maintain pending invitation and notification tokens\n"],["result_for","Gleaning","Gleaning.html#method-i-result_for","(label)","<p>————- safe delegation to (potentially non-existent) results\n"],["result_for","Results","Results.html#method-i-result_for","(label)",""],["result_type","FeedsIndexPresenter","FeedsIndexPresenter.html#method-i-result_type","()",""],["result_type","FeedsShowPresenter","FeedsShowPresenter.html#method-i-result_type","()",""],["result_type","ListsIndexPresenter","ListsIndexPresenter.html#method-i-result_type","()",""],["result_type","ListsShowPresenter","ListsShowPresenter.html#method-i-result_type","()",""],["result_type","RecipesAssociatedPresenter","RecipesAssociatedPresenter.html#method-i-result_type","()",""],["result_type","ReferencesIndexPresenter","ReferencesIndexPresenter.html#method-i-result_type","()",""],["result_type","ReferentsAssociatedPresenter","ReferentsAssociatedPresenter.html#method-i-result_type","()",""],["result_type","ReferentsIndexPresenter","ReferentsIndexPresenter.html#method-i-result_type","()",""],["result_type","SearchIndexPresenter","SearchIndexPresenter.html#method-i-result_type","()","<p>The global search only presents one type at a time, starting with recipes\n"],["result_type","SitesAssociatedPresenter","SitesAssociatedPresenter.html#method-i-result_type","()",""],["result_type","SitesIndexPresenter","SitesIndexPresenter.html#method-i-result_type","()",""],["result_type","TagsAssociatedPresenter","TagsAssociatedPresenter.html#method-i-result_type","()",""],["result_type","TagsIndexPresenter","TagsIndexPresenter.html#method-i-result_type","()",""],["result_type","UserContentPresenter","UserContentPresenter.html#method-i-result_type","()",""],["result_type","UsersIndexPresenter","UsersIndexPresenter.html#method-i-result_type","()",""],["results","Candihash","Candihash.html#method-i-results","(rankings = nil)","<p>Return the keys as an integer array, sorted by number of hits\n&#39;rankings&#39; is an array of rid/ranking …\n"],["results","SuggestionsController","SuggestionsController.html#method-i-results","()","<p>GET /suggestions/1/results\n"],["results_for","Gleaning","Gleaning.html#method-i-results_for","(label)",""],["results_for","Results","Results.html#method-i-results_for","(label)",""],["results_partial","FilteredPresenter","FilteredPresenter.html#method-i-results_partial","()","<p>This is the name of the partial used to render my results\n"],["results_path","FilteredPresenter","FilteredPresenter.html#method-i-results_path","(qparams={})","<p>Specify a path for fetching the results partial, based on the current query\n"],["retrieve_or_build","ResultsCache","ResultsCache.html#method-c-retrieve_or_build","(session_id, result_types, params={})","<p>Get the current results cache and return it if relevant. Otherwise, create\na new one\n"],["retypeable?","TagServices","TagServices.html#method-i-retypeable-3F","()","<p>Can the associated tag have its type changed?\n"],["revise","RecipesController","RecipesController.html#method-i-revise","()",""],["ribbon","BasePresenter","BasePresenter.html#method-i-ribbon","(ribbon_class=nil, name=@decorator.human_name)",""],["ribbon","FeedPresenter","FeedPresenter.html#method-i-ribbon","()",""],["ribbon","ListPresenter","ListPresenter.html#method-i-ribbon","()","<p>Lists don&#39;t have a ribbon on their card\n"],["ribbon","RecipePresenter","RecipePresenter.html#method-i-ribbon","()","<p>Recipes don&#39;t have a ribbon on their card\n"],["ribbon","UserPresenter","UserPresenter.html#method-i-ribbon","()","<p>Users don&#39;t have a ribbon on their card\n"],["robotags","CollectibleDecorator","CollectibleDecorator.html#method-i-robotags","()","<p>The robotags are those owned by super\n"],["role","User","User.html#method-i-role","()",""],["role_select","User","User.html#method-i-role_select","()","<p>Return a 2-array of 1) the list of possible roles, and 2) the current role,\nsuitable for passing to  …\n"],["role_symbols","User","User.html#method-i-role_symbols","()",""],["root","PagesController","PagesController.html#method-i-root","()",""],["root","ResultType","ResultType.html#method-i-root","()",""],["root=","Site","Site.html#method-i-root-3D","(new_root)","<p>do qa when reassigning root\n"],["rows","TablePresenter","TablePresenter.html#method-i-rows","()",""],["rp_url","Object","Object.html#method-i-rp_url","(path='')","<p>Provide a url based on the current environment\n"],["safe_destroy","Tag","Tag.html#method-i-safe_destroy","()","<p>Delete this tag only if it&#39;s safe to do so\n"],["safe_parse","Object","Object.html#method-i-safe_parse","(url)",""],["safe_partition","ResultsCache","ResultsCache.html#method-i-safe_partition","()","<p>Return the existing partition, if any; otherwise, create one\n"],["safe_uri_join","Object","Object.html#method-i-safe_uri_join","(base, path)","<p>Wrapper on URI.join which escapes the path if need be\n"],["salutation","User","User.html#method-i-salutation","()",""],["sample_page","CollectibleDecorator","CollectibleDecorator.html#method-i-sample_page","()","<p>sample_page is a full URL somewhere on the associated site so we can\nabsolutize links\n"],["sample_page","SiteDecorator","SiteDecorator.html#method-i-sample_page","()",""],["sanitize_url","Object","Object.html#method-i-sanitize_url","(url)","<p>Fix errant characters without re-escaping &#39;%&#39;\n"],["save","Feed","Feed.html#method-i-save","(options={})",""],["scope_count","ResultsCache","ResultsCache.html#method-i-scope_count","()","<p>Count the number of items in the basic scope in a smart way\n"],["scope_slice","DefaultSearch","DefaultSearch.html#method-i-scope_slice","(offset, limit)","<p>When taking a slice out of the (singular) itemscope, load the associated\nentities meanwhile NB This is …\n"],["scope_slice","TagSearch","TagSearch.html#method-i-scope_slice","(offset, limit)","<p>When taking a slice out of the (single) itemscope, load the associated\nentities meanwhile NB This is …\n"],["scrape","PageRefsController","PageRefsController.html#method-i-scrape","()","\n<pre># PATCH/PUT /page_refs/1\n# Handled in CollectibleController\ndef update\n  if page_ref.update(page_ref_params) ...</pre>\n"],["scrape","RecipeServices","RecipeServices.html#method-i-scrape","()",""],["scrape","Scraper","Scraper.html#method-i-scrape","(link_or_links, what = nil)","<p>Define a scraper to follow a link or links and return it, for whatever\npurpose\n"],["scrape","SiteServices","SiteServices.html#method-i-scrape","()","<p># Return the set of finders that apply to the site (those assigned to the\nsite, then global ones) def …\n"],["scrape_for_feeds","SiteServices","SiteServices.html#method-c-scrape_for_feeds","(n=-1)",""],["scrape_page","FeedServices","FeedServices.html#method-c-scrape_page","(site, page_url=nil)","<p>Examine a page from a site (or a given other page) for RSS feeds and return\na set of possible feeds\n"],["scrub_args","Expression","Expression.html#method-c-scrub_args","(args)","<p>Clean up a hash of arguments for a search by 1) removing any with nil\nvalues 2) making any type specifiers …\n"],["se_category_page","Www_seriouseats_com_Scraper","Www_seriouseats_com_Scraper.html#method-i-se_category_page","()",""],["se_tag_page","Www_seriouseats_com_Scraper","Www_seriouseats_com_Scraper.html#method-i-se_tag_page","()",""],["search_result=","SearchNode","SearchNode.html#method-i-search_result-3D","(memval)",""],["sections","SuggestionPresenter","SuggestionPresenter.html#method-i-sections","()",""],["seeker_table","SeekerHelper","SeekerHelper.html#method-i-seeker_table","( heading, query_path, column_heads )",""],["select_render","ResponseServices","ResponseServices.html#method-i-select_render","(action=nil)","<p>Used in templates for standard actions (e.g., new, edit, show) to choose a\npartial depending on whether …\n"],["selectable_kinds","PageRefServices","PageRefServices.html#method-c-selectable_kinds","(include=nil)","<p>The PageRef kinds that are available for a user to declare. normally,\n:link, :referrable, :offering, …\n"],["selector","NotificationPresenter","NotificationPresenter.html#method-i-selector","()",""],["semantic_neighborhood","TagServices","TagServices.html#method-c-semantic_neighborhood","(tag_ids, min_weight = 0.4)","<p>Analyze the tag or set of tags for semantic neighbors, returning a list of \ntag/weight pairs. …a tag …\n"],["sendmail","UsersController","UsersController.html#method-i-sendmail","()",""],["set_children","SearchNode","SearchNode.html#method-i-set_children","(child_associates=[])",""],["set_form","Expression","Expression.html#method-i-set_form","(tt)","<p>Set the form by reference to any of the accepted datatypes\n"],["set_locale","Expression","Expression.html#method-i-set_locale","(tt)",""],["set_tag_ids","Taggable","Taggable.html#method-i-set_tag_ids","(nids)","<p>Set the tag ids associated with the given user\n"],["setup_response_service","ApplicationController","ApplicationController.html#method-i-setup_response_service","()","<p>alias_method :rescue_action_locally, :rescue_action_in_public\n"],["sharable_from_card?","CardPresentation","CardPresentation.html#method-i-sharable_from_card-3F","()",""],["sharable_from_card?","CollectiblePresenter","CollectiblePresenter.html#method-i-sharable_from_card-3F","()",""],["sharable_from_card?","UserPresenter","UserPresenter.html#method-i-sharable_from_card-3F","()",""],["share_button","CardPresentation","CardPresentation.html#method-i-share_button","()",""],["share_button","CollectiblePresenter","CollectiblePresenter.html#method-i-share_button","()",""],["shared","User","User.html#method-i-shared","()","<p>Provide the resource being shared, stored (but not saved) as a polymorphic\nobject description\n"],["shared=","User","User.html#method-i-shared-3D","(entity)",""],["sharing_invitation_instructions","RPDeviseMailer","RPDeviseMailer.html#method-i-sharing_invitation_instructions","(record, raw_token, opts={})","<p>Deliver an invitation email\n"],["shed_tag","Taggable","Taggable.html#method-i-shed_tag","(tag_or_id, uid=nil)",""],["show","AnswersController","AnswersController.html#method-i-show","()","<p>GET /answers/1\n"],["show","CollectibleController","CollectibleController.html#method-i-show","()",""],["show","EditionsController","EditionsController.html#method-i-show","()","<p>GET /editions/1\n"],["show","ExpressionsController","ExpressionsController.html#method-i-show","()","<p>GET /expressions/1 GET /expressions/1.json\n"],["show","FeedsController","FeedsController.html#method-i-show","()","<p>GET /feeds/1 GET /feeds/1.json\n"],["show","ListsController","ListsController.html#method-i-show","()",""],["show","PageRefsController","PageRefsController.html#method-i-show","()","<p>GET /page_refs/1\n"],["show","RatingsController","RatingsController.html#method-i-show","()","<p>GET /ratings/1 GET /ratings/1.xml\n"],["show","ReferencesController","ReferencesController.html#method-i-show","()","<p>GET /references/1 GET /references/1.json\n"],["show","ReferentsController","ReferentsController.html#method-i-show","()","<p>GET /referents/1 GET /referents/1.json\n"],["show","RpEventsController","RpEventsController.html#method-i-show","()",""],["show","ScalesController","ScalesController.html#method-i-show","()","<p>GET /scales/1 GET /scales/1.xml\n"],["show","SuggestionsController","SuggestionsController.html#method-i-show","()","<p>GET /suggestions/1\n"],["show","TagsController","TagsController.html#method-i-show","()","<p>GET /tags/1 GET /tags/1.xml\n"],["show","TagsetsController","TagsetsController.html#method-i-show","()","<p>GET /tagsets/1\n"],["show","UsersController","UsersController.html#method-i-show","()",""],["show","VotesController","VotesController.html#method-i-show","()","<p>GET /votes/1\n"],["show_card?","FilteredPresenter","FilteredPresenter.html#method-i-show_card-3F","()",""],["show_card?","UserContentPresenter","UserContentPresenter.html#method-i-show_card-3F","()",""],["show_comments","RcprefsHelper","RcprefsHelper.html#method-i-show_comments","(decorator)",""],["show_comments?","FilteredPresenter","FilteredPresenter.html#method-i-show_comments-3F","()",""],["show_definitions","RefermentServices","RefermentServices.html#method-c-show_definitions","(attribute=nil)",""],["show_edition_item","EditionsHelper","EditionsHelper.html#method-i-show_edition_item","(item, headline, before_text, after_text)",""],["show_or_edit","TagPresenter","TagPresenter.html#method-i-show_or_edit","(which, val)",""],["show_or_edit","UserPresenter","UserPresenter.html#method-i-show_or_edit","(which, val)",""],["show_page","RpEventsController","RpEventsController.html#method-c-show_page","(evt, &block)",""],["show_page","Users::NotificationsWithDeviseController","Users/NotificationsWithDeviseController.html#method-c-show_page","(blocked_request, &block)","<p>When a notification requires authentication (i.e., no user is logged in),\nprovide a page to use as background …\n"],["show_sample","SitesHelper","SitesHelper.html#method-i-show_sample","(site)",""],["show_scale","Rating","Rating.html#method-i-show_scale","()","<p>Interpret the scale name of the rating in HTML\n"],["show_tags","RecipeServices","RecipeServices.html#method-i-show_tags","(file=STDOUT)",""],["show_tree","Referent","Referent.html#method-c-show_tree","(key = nil, level = 0)",""],["sibling_ids_of_tags","ExpressionServices","ExpressionServices.html#method-c-sibling_ids_of_tags","(tag_ids)","<p>Return all the semantic siblings of the tag(s)\n"],["sibling_types","FilteredPresenter","FilteredPresenter.html#method-i-sibling_types","()","<p>Other result types that may be provided alternative to the current one\n"],["sibling_types","SearchIndexPresenter","SearchIndexPresenter.html#method-i-sibling_types","()",""],["sibling_types","UserContentPresenter","UserContentPresenter.html#method-i-sibling_types","()",""],["sibling_types","UsersCollectionPresenter","UsersCollectionPresenter.html#method-i-sibling_types","()",""],["sibling_views","FilteredPresenter","FilteredPresenter.html#method-i-sibling_views","()",""],["sign_in_and_redirect","SessionsController","SessionsController.html#method-i-sign_in_and_redirect","(resource_or_scope, resource=nil)",""],["sign_up","UserServices","UserServices.html#method-i-sign_up","()","\n<pre>def analyze_invitees(sender)\n  result = {\n    redundancies:  [], # Current friends (member&#39;s share notice ...</pre>\n"],["similar_ids","TagServices","TagServices.html#method-i-similar_ids","()",""],["similars","SiteServices","SiteServices.html#method-i-similars","()","<p>Find sites that are candidates for merging, i.e. those with the same domain\n"],["simple_modal","DialogsHelper","DialogsHelper.html#method-i-simple_modal","(which, ttl, options={}, &block)",""],["simple_pagelet","StreamHelper","StreamHelper.html#method-i-simple_pagelet","(locals={})","<p>A useful starting point for a pagelet, with just a searchable header and\nsearch results\n"],["simple_submit_form_for","FormsHelper","FormsHelper.html#method-i-simple_submit_form_for","(resource, options=nil, &block)","<p>Override of simple_form_for which asserts options to make RP.submit happy\n"],["single_user_table_row","AdminHelper","AdminHelper.html#method-i-single_user_table_row","(row, field)",""],["singular_name","ModelDecorator","ModelDecorator.html#method-i-singular_name","()","<p>Recipe =&gt; &#39;recipe&#39; FeedEntry =&gt; &#39;feed_entry&#39;\n"],["site","Site","Site.html#method-i-site","()","<p>Most collectibles refer back to their host site via its page_ref; not\nnecessary here\n"],["site","SiteDecorator","SiteDecorator.html#method-i-site","()",""],["site","SitesFeedsCache","SitesFeedsCache.html#method-i-site","()",""],["site","SitesRecipesCache","SitesRecipesCache.html#method-i-site","()",""],["site","SitesShowCache","SitesShowCache.html#method-i-site","()",""],["site_feeds_summary","SitesHelper","SitesHelper.html#method-i-site_feeds_summary","(site)",""],["site_glean_button","SitesHelper","SitesHelper.html#method-i-site_glean_button","(site, options={})",""],["site_nuke_button","SitesHelper","SitesHelper.html#method-i-site_nuke_button","(site, options={})",""],["site_pagerefs_summary","SitesHelper","SitesHelper.html#method-i-site_pagerefs_summary","(site, options={})",""],["site_service","Recipe","Recipe.html#method-i-site_service","()",""],["site_similars","SitesHelper","SitesHelper.html#method-i-site_similars","(site)",""],["site_summaries","SitesHelper","SitesHelper.html#method-i-site_summaries","(site, admin_view)",""],["sites","TagServices","TagServices.html#method-i-sites","()",""],["slice_cache","ResultsCache","ResultsCache.html#method-i-slice_cache","()","<p>Convert from item stubs (modelname + id) to entities, in the most efficient\nmanner possible\n"],["smartrender","ApplicationController","ApplicationController.html#method-i-smartrender","(renderopts={})","<p>Generalized response for dialog for a particular area\n"],["sort","TablePresenter","TablePresenter.html#method-i-sort","(sortfield = :id, descending = false)","<p>To change this template use File | Settings | File Templates.\n"],["sort_field","TablePresenter","TablePresenter.html#method-i-sort_field","()",""],["sort_table_name","ResultsCache","ResultsCache.html#method-i-sort_table_name","()",""],["sort_table_name","UserFriendsCache","UserFriendsCache.html#method-i-sort_table_name","()",""],["sourcehome","ListDecorator","ListDecorator.html#method-i-sourcehome","()",""],["sourcehome","Pagerefable","Pagerefable.html#method-i-sourcehome","()","<p>Return the URL for the recipe&#39;s source&#39;s home page\n"],["sourcehome","SiteDecorator","SiteDecorator.html#method-i-sourcehome","()",""],["sourcehome","UserDecorator","UserDecorator.html#method-i-sourcehome","()",""],["sourcename","CollectibleDecorator","CollectibleDecorator.html#method-i-sourcename","()",""],["sourcename","ListDecorator","ListDecorator.html#method-i-sourcename","()",""],["sourcename","Pagerefable","Pagerefable.html#method-i-sourcename","()","<p>Return the human-readable name for the recipe&#39;s source\n"],["sourcename","SiteDecorator","SiteDecorator.html#method-i-sourcename","()",""],["sourcename","UserDecorator","UserDecorator.html#method-i-sourcename","()",""],["splitstr","Object","Object.html#method-i-splitstr","(str, ncols=80)",""],["sprite","SpritesHelper","SpritesHelper.html#method-i-sprite","(what, options={})",""],["sprite_glyph","SpritesHelper","SpritesHelper.html#method-i-sprite_glyph","(what, size=nil, options={})","<p>Insert a sprite glyph what: one of the symbols taken by sprite() size (if\ngiven): “xs”, “sm”, …\n"],["sprites","PagesController","PagesController.html#method-i-sprites","()",""],["stab_at_sample","SiteServices","SiteServices.html#method-i-stab_at_sample","(summ = {})",""],["stab_at_samples","SiteServices","SiteServices.html#method-c-stab_at_samples","(limit=-1)","\n<pre>def self.extract_from_page url\n  extractions = {}\n  if !url.blank? &amp;&amp; (site = Site.find_or_create url) ...</pre>\n"],["store","List","List.html#method-i-store","(entity)","<p>Ensure that the list ordering includes the given entity\n"],["stored_location_for","ApplicationController","ApplicationController.html#method-i-stored_location_for","(resource_or_scope)","<p>protect_from_forgery\n"],["stores?","List","List.html#method-i-stores-3F","(entity)","<p>Does the list of items include the given entity?\n"],["stores?","ListItem","ListItem.html#method-i-stores-3F","(other)","<p>Does the item in the list correspond to the given entity?\n"],["stream","StreamController","StreamController.html#method-i-stream","()","<p>Streams items in the current query\n"],["stream_count","FilteredPresenter","FilteredPresenter.html#method-i-stream_count","(force=false)",""],["stream_element","StreamHelper","StreamHelper.html#method-i-stream_element","(etype, partial=nil, locals={})","<p>Use a partial to generate a stream header, and surround it with a\n&#39;stream-header&#39; div\n"],["stream_element_class","StreamHelper","StreamHelper.html#method-i-stream_element_class","(etype)",""],["stream_element_package","StreamHelper","StreamHelper.html#method-i-stream_element_package","(etype, content, pkg_attributes=nil)",""],["stream_element_replacement","StreamHelper","StreamHelper.html#method-i-stream_element_replacement","(etype, headerpartial=nil, locals={})","<p>Generate a JSON item for replacing the stream header\n"],["stream_element_selector","StreamHelper","StreamHelper.html#method-i-stream_element_selector","(etype)",""],["stream_id","DefaultSearch","DefaultSearch.html#method-i-stream_id","()",""],["stream_id","ListsShowCache","ListsShowCache.html#method-i-stream_id","()",""],["stream_id","ResultType","ResultType.html#method-i-stream_id","()",""],["stream_id","ResultTyping","ResultTyping.html#method-i-stream_id","()",""],["stream_id","SearchIndexCache","SearchIndexCache.html#method-i-stream_id","()",""],["stream_link","SeekerHelper","SeekerHelper.html#method-i-stream_link","(path, options={})","<p>Leave a link for stream firing\n"],["stream_loadlink","StreamHelper","StreamHelper.html#method-i-stream_loadlink","(next_path, container_selector, check_fcn = nil)",""],["stream_params_next","StreamPresentation","StreamPresentation.html#method-i-stream_params_next","()","<p>Get the stream param(s) for the next range\n"],["stream_params_null","StreamPresentation","StreamPresentation.html#method-i-stream_params_null","()","<p>Get the stream params for resetting the stream\n"],["string_to_class","Object","Object.html#method-i-string_to_class","(string)","<p>Convert a name (possibly with embedded &#39;::&#39;) to a class\n"],["stripped_name","TypeMap","TypeMap.html#method-i-stripped_name","(tt)",""],["strjoin","Object","Object.html#method-i-strjoin","(strs, before = \"\", after = \"\", joiner = ',', line_end=' ')","<p>Return an enumeration of a series of strings, separated by &#39;,&#39;\nexcept for the last two separated …\n"],["strmatch","Tag","Tag.html#method-c-strmatch","(name, opts = {})","<p>If the :assert option is true, strmatch WILL return a tag on the given\nname, of the given type, visible …\n"],["strscopes","Feed","Feed.html#method-c-strscopes","(matcher)",""],["strscopes","FeedEntry","FeedEntry.html#method-c-strscopes","(matcher)","<p>Return scopes for searching the title and description\n"],["strscopes","List","List.html#method-c-strscopes","(matcher)",""],["strscopes","PageRef","PageRef.html#method-c-strscopes","(matcher)","<p>Provide a relation for entities that match a string\n"],["strscopes","Recipe","Recipe.html#method-c-strscopes","(matcher)","<p>Return scopes for searching the title and description The block, if given,\nis for the caller to assert …\n"],["strscopes","Reference","Reference.html#method-c-strscopes","(matcher)","<p>Provide a relation for entities that match a string\n"],["strscopes","Referent","Referent.html#method-c-strscopes","(matcher)",""],["strscopes","Site","Site.html#method-c-strscopes","(matcher)",""],["strscopes","Tag","Tag.html#method-c-strscopes","(matcher)",""],["strscopes","User","User.html#method-c-strscopes","(matcher)",""],["study_users","ListServices","ListServices.html#method-c-study_users","()",""],["subclass_for","UsersShowCache","UsersShowCache.html#method-c-subclass_for","(result_type=nil)","<p>Different subclasses are used to handle different result types\n"],["subject","InvitationAcceptedEventArticulator","InvitationAcceptedEventArticulator.html#method-i-subject","()",""],["subject","InvitationSentEventCreateArticulator","InvitationSentEventCreateArticulator.html#method-i-subject","()",""],["submit_form_for","FormsHelper","FormsHelper.html#method-i-submit_form_for","(resource, options=nil, &block)","<p>Override of form_for which adds options to make RP.submit happy\n"],["subpaths","Object","Object.html#method-i-subpaths","(url)","<p>string -&gt; Array of strings Turn a url into a set of strings, each\nbeginning with the host domain, …\n"],["subscriptions_list","UsersHelper","UsersHelper.html#method-i-subscriptions_list","(f, me)","<p>NB Currently out of use\n"],["subtype","ResultType","ResultType.html#method-i-subtype","()",""],["subtypes","EntityShowPresenter","EntityShowPresenter.html#method-i-subtypes","()",""],["subtypes","FilteredPresenter","FilteredPresenter.html#method-i-subtypes","()","<p>Default results list: only the result type. Subclasses may redefine for\nmultiple subtypes\n"],["subtypes","RecipesAssociatedPresenter","RecipesAssociatedPresenter.html#method-i-subtypes","()","<p>No results associated with recipes as yet\n"],["subtypes","UserContentPresenter","UserContentPresenter.html#method-i-subtypes","()","<p>Here&#39;s where we translate from a result type (as provided by a pagelet)\nto a series of subtypes to …\n"],["success","Backgroundable","Backgroundable.html#method-i-success","(job=nil)","<p>We get to success without throwing an error, throw one if appropriate so DJ\ndoesn&#39;t think we&#39;re …\n"],["suggests","Referent","Referent.html#method-i-suggests","(target_ref)","<p>Declare a relationship between two referents\n"],["suggests","TagServices","TagServices.html#method-i-suggests","(target_tag)",""],["suggests?","Referent","Referent.html#method-i-suggests-3F","(target_ref)",""],["suggests?","TagServices","TagServices.html#method-i-suggests-3F","(target_tag)",""],["sugtime","Suggestion","Suggestion.html#method-i-sugtime","()",""],["summarize","GleaningDecorator","GleaningDecorator.html#method-i-summarize","(how=:puts)","<p>Define presentation-specific methods here. Helpers are accessed through\n`helpers` (aka `h`). You can …\n"],["summarize_alltags","RecipesHelper","RecipesHelper.html#method-i-summarize_alltags","(taggable_entity)","<p>Provide an English-language summary of the tags for a recipe.\n"],["summarize_aspect","TagPresenter","TagPresenter.html#method-i-summarize_aspect","(what, options={})","<p>options prescribes the name of a helper to name and possibly link to an\ninstance of the aspect options …\n"],["summarize_ratings","RatingsHelper","RatingsHelper.html#method-i-summarize_ratings","(ratings)",""],["summarize_ref_name","ReferentsHelper","ReferentsHelper.html#method-i-summarize_ref_name","(referent, long=false)",""],["summarize_referent","ReferentsHelper","ReferentsHelper.html#method-i-summarize_referent","(ref, options={})",""],["summarize_tag_similar","TagsHelper","TagsHelper.html#method-i-summarize_tag_similar","(this, other, options={})","<p>Summarize a tag similar to this one. options:\n\n<pre>absorb_btn: a button to absorb the other tag into this one ...</pre>\n"],["summary","Articulator","Articulator.html#method-i-summary","(forcements = {})",""],["super_id","User","User.html#method-c-super_id","()",""],["super_id=","User","User.html#method-c-super_id-3D","(id)",""],["superuser","User","User.html#method-c-superuser","()",""],["supported_org_options","FeedsIndexCache","FeedsIndexCache.html#method-i-supported_org_options","()",""],["supported_org_options","FeedsShowCache","FeedsShowCache.html#method-i-supported_org_options","()",""],["supported_org_options","ListsShowCache","ListsShowCache.html#method-i-supported_org_options","()",""],["supported_org_options","ReferentsAssociatedCache","ReferentsAssociatedCache.html#method-i-supported_org_options","()",""],["supported_org_options","ResultsCache","ResultsCache.html#method-i-supported_org_options","()",""],["supported_org_options","SitesIndexCache","SitesIndexCache.html#method-i-supported_org_options","()",""],["supported_org_options","TagsIndexCache","TagsIndexCache.html#method-i-supported_org_options","()",""],["supported_org_options","UserFeedsCache","UserFeedsCache.html#method-i-supported_org_options","()",""],["supported_org_options","UserFriendsCache","UserFriendsCache.html#method-i-supported_org_options","()",""],["supported_org_options","UsersCollectionCache","UsersCollectionCache.html#method-i-supported_org_options","()",""],["supported_org_options","UsersIndexCache","UsersIndexCache.html#method-i-supported_org_options","()",""],["suspend","StreamPresentation","StreamPresentation.html#method-i-suspend","()","<p>Suspend the stream till later\n"],["sym","TypeMap","TypeMap.html#method-i-sym","(tt)",""],["sync","PageRef","PageRef.html#method-i-sync","()","<p>Consult Mercury on a url and report the results in the model status: :good\niff Mercury could get through …\n"],["synonym_ids","TagServices","TagServices.html#method-i-synonym_ids","(unique=false)",""],["synonym_ids","TagServices","TagServices.html#method-c-synonym_ids","(ids_in, unique=false)",""],["synonym_ids_of_tags","ExpressionServices","ExpressionServices.html#method-c-synonym_ids_of_tags","(tag_ids, unique=false)","<p>Collect all the synonyms of all the tags denoted by id, excluding those\nalready in the set\n"],["synonyms","Tag","Tag.html#method-i-synonyms","(opts = {})","<p>Return a list of tags that are expressions of this tag&#39;s referent(s)\n"],["synonyms","TagServices","TagServices.html#method-i-synonyms","(unique=false)",""],["table","PageRef","PageRef.html#method-i-table","()",""],["table_collection_selector","TableHelper","TableHelper.html#method-i-table_collection_selector","()",""],["table_headers","FeedsTable","FeedsTable.html#method-i-table_headers","()",""],["table_headers","ListsTable","ListsTable.html#method-i-table_headers","()",""],["table_headers","ReferencesTable","ReferencesTable.html#method-i-table_headers","()",""],["table_headers","ReferentsTable","ReferentsTable.html#method-i-table_headers","()",""],["table_headers","SitesTable","SitesTable.html#method-i-table_headers","()",""],["table_headers","TagsTable","TagsTable.html#method-i-table_headers","()",""],["table_headers","UsersTable","UsersTable.html#method-i-table_headers","()",""],["table_name","ResultType","ResultType.html#method-i-table_name","()",""],["table_out","TableHelper","TableHelper.html#method-i-table_out","(list, headers, &block)",""],["table_summaries","TagPresenter","TagPresenter.html#method-i-table_summaries","(admin_view_on)",""],["tabulate","AnalyticsServices","AnalyticsServices.html#method-c-tabulate","(length=:monthly, num_cols=3, beforehand=true)",""],["tag","CollectibleController","CollectibleController.html#method-i-tag","()","<p>GET tag PATCH tag\n"],["tag","TagsAssociatedCache","TagsAssociatedCache.html#method-i-tag","()",""],["tag_button","CardPresentation","CardPresentation.html#method-i-tag_button","()",""],["tag_def_label","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-tag_def_label","(result_type, typesym, tagname)",""],["tag_filter_header","TagsHelper","TagsHelper.html#method-i-tag_filter_header","(locals={})",""],["tag_item","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-tag_item","(li, tagtype=nil)","<p>Scrape the definition of a tag, and the link to the tag&#39;s page\n"],["tag_list","TagsHelper","TagsHelper.html#method-i-tag_list","(tags)",""],["tag_path","Templateer","Templateer.html#method-i-tag_path","()",""],["tag_select","TagsHelper","TagsHelper.html#method-i-tag_select","(alltags, curtags)","<p>Provide a Bootstrap selection menu of a set of tags\n"],["tag_selection_form","TagSelectionsHelper","TagSelectionsHelper.html#method-i-tag_selection_form","(tag_selection)",""],["tag_selection_form_replacement","TagSelectionsHelper","TagSelectionsHelper.html#method-i-tag_selection_form_replacement","(tag_selection)",""],["tag_token","Expression","Expression.html#method-i-tag_token","()","<p>Tag_token: a virtual attribute for taking tag specifications from\ntokenInput. These will either be a …\n"],["tag_token=","Expression","Expression.html#method-i-tag_token-3D","(t)",""],["tag_token=","TagSelection","TagSelection.html#method-i-tag_token-3D","(t)",""],["tag_tokens_to_referents","Referent","Referent.html#method-i-tag_tokens_to_referents","(tokens, use_existing=true)","<p>Convert a list of tag tokens into the referents to which they refer\n"],["tag_with","Taggable","Taggable.html#method-i-tag_with","(tag_or_id, uid=nil)","\n<pre># Provide the tags of appropriate types for the user identified by @tagging_user_id\ndef tagging_tag_data ...</pre>\n"],["tag_with","TaggingServices","TaggingServices.html#method-i-tag_with","(tag_or_string, tagger_id, options={})","<p>Assert a tag associated with the given tagger. If a tag given by name\ndoesn&#39;t exist, make a new one …\n"],["taggable","Tag","Tag.html#method-c-taggable","(taggable_class)","<p>Class method to define instance methods for the taggable entities: those of\ntaggable_class This is invoked …\n"],["tagged_entities","ReferentDecorator","ReferentDecorator.html#method-i-tagged_entities","(type, who=nil)","<p>Provide the set of entities of a given type that are acquired either: –\ndirectly, via the Referments …\n"],["tagged_entities","UserDecorator","UserDecorator.html#method-i-tagged_entities","(entity_type=nil)","<p>Get the entities of a given type tagged by the user\n"],["taggee_ids","TagServices","TagServices.html#method-i-taggee_ids","(with_synonyms=false)",""],["taggees","TagServices","TagServices.html#method-i-taggees","(with_synonyms=false)",""],["taggees_table_summary","TagPresenter","TagPresenter.html#method-i-taggees_table_summary","(options={})","<p>The taggees of a tag are only summarized in its table listing; when shown\non a card, the taggees should …\n"],["tagging_fields","TagSelectionsHelper","TagSelectionsHelper.html#method-i-tagging_fields","(decorator)",""],["tagging_query","ListServices","ListServices.html#method-i-tagging_query","(viewerid=nil)",""],["tagging_tags","Taggable","Taggable.html#method-i-tagging_tags","(options={})","<p>Return the editable tags for the current user, i.e. not lists\n"],["tagging_tags_of_type","Taggable","Taggable.html#method-i-tagging_tags_of_type","(type_or_types)",""],["tagging_user_id=","Taggable","Taggable.html#method-i-tagging_user_id-3D","(id)",""],["taggings","TaggingServices","TaggingServices.html#method-i-taggings","(user=nil, tagtype=nil)","<p>Glean the taggings to this entity by a given user, of a given type\n"],["tagjoin","RecipesHelper","RecipesHelper.html#method-i-tagjoin","(tags, enquote = false, before = '', after = '', joiner = ',')",""],["taglist","TagsHelper","TagsHelper.html#method-i-taglist","(taglist)","<p>Return HTML for each tag of the given type\n"],["tagname","Expression","Expression.html#method-i-tagname","()",""],["tagqa","Tag","Tag.html#method-i-tagqa","()","<p>Callback for tidying up the name and setting the normalized_name field and\nensuring the tagtype has a …\n"],["tags","TagPresenter","TagPresenter.html#method-i-tags","()",""],["tags","TaggingServices","TaggingServices.html#method-i-tags","(user=nil, tagtype=nil)",""],["tags","UserPresenter","UserPresenter.html#method-i-tags","()",""],["tags_from_referents","Referent","Referent.html#method-i-tags_from_referents","(referents)","<p>Convert a list of referents into the tags that reference them.\n"],["tags_tabset","TagsHelper","TagsHelper.html#method-i-tags_tabset","(tabindex)","<p>Build a set of tabs for use by jQuery UI, with the current tab given as a\nparameter\n"],["tagserv","TagPresenter","TagPresenter.html#method-i-tagserv","()",""],["tail_partial","FilteredPresenter","FilteredPresenter.html#method-i-tail_partial","()",""],["take","Hash","Hash.html#method-i-take","(key_or_keys, h)","<p>Move a (set of) key/value pair(s) from another hash if there\n"],["tell_me_more","PagesController","PagesController.html#method-i-tell_me_more","()",""],["template_element","ApplicationHelper","ApplicationHelper.html#method-i-template_element","(id, partial)","<p>A template element has embedded placeholders provided by the\nTemplateDecorator\n"],["template_link","TemplateHelper","TemplateHelper.html#method-i-template_link","(decorator, template_id, label, styling, options={})","<p>Provide a link that can be short-circuited by resorting to a template of\nthe class given by classname …\n"],["test_link","Object","Object.html#method-i-test_link","(link, resource=nil)","<p>Confirm that a proposed URL (with an optional subpath) actually has content\nat the other end If the link …\n"],["test_url","Object","Object.html#method-i-test_url","(normalized, href=nil)","<p>Test that a (previously normalized) url works, possibly relative to a\nsecondary href.\n"],["testflight","FinderServices","FinderServices.html#method-i-testflight","(entity)","<p>Check that the proposed finder actually does its job by running it on a\nlinkable entity\n"],["thumbdata","ImageReference","ImageReference.html#method-i-thumbdata","()",""],["thumbdata=","ImageReference","ImageReference.html#method-i-thumbdata-3D","(val)",""],["tidyName","Tag","Tag.html#method-c-tidyName","(str)","<p>When a tag is asserted into the database, we do have minimal sanitary\nstandards:\n\n<pre>no leading or trailing ...</pre>\n"],["tidy_name","Www_bbc_co_uk_Scraper","Www_bbc_co_uk_Scraper.html#method-i-tidy_name","(name, typesym)",""],["time_check","Suggestion","Suggestion.html#method-i-time_check","(thistime=nil)","<p>Process the sugtime parameter for limiting # of accesses\n"],["time_check_log","Object","Object.html#method-i-time_check_log","(label)",""],["time_lookup","RecipeServices","RecipeServices.html#method-c-time_lookup","(ix=0, note='')",""],["time_lookup","ReferenceServices","ReferenceServices.html#method-c-time_lookup","(ix=1)","<p>Run benchmarks on Reference and PageRef activities\n"],["time_lookup","TagServices","TagServices.html#method-c-time_lookup","(ix=1)",""],["timeout?","Suggestion","Suggestion.html#method-i-timeout-3F","()",""],["timeout_error","ApplicationController","ApplicationController.html#method-i-timeout_error","()",""],["title","ApplicationHelper","ApplicationHelper.html#method-i-title","(ttl=nil)",""],["title","CollectiblePresenter","CollectiblePresenter.html#method-i-title","()",""],["title","List","List.html#method-i-title","()",""],["title","PageRefDecorator","PageRefDecorator.html#method-i-title","()",""],["title","ReferenceDecorator","ReferenceDecorator.html#method-i-title","()",""],["title","ReferentDecorator","ReferentDecorator.html#method-i-title","()",""],["title","SiteDecorator","SiteDecorator.html#method-i-title","()","<p>Standard accessors for model attributes\n"],["title","TagDecorator","TagDecorator.html#method-i-title","()",""],["title","UserDecorator","UserDecorator.html#method-i-title","()","<p>include Templateer delegate_all\n"],["title=","Recipe","Recipe.html#method-i-title-3D","(ttl)","<p>Write the title attribute only after trimming and resolving HTML entities\n"],["title=","ResponseServices","ResponseServices.html#method-i-title-3D","(t)",""],["title=","SiteDecorator","SiteDecorator.html#method-i-title-3D","(t)",""],["title_of","RpEvent","RpEvent.html#method-i-title_of","(attribute, &block)","<p>Return a string for\n"],["title_of","SharedEvent","SharedEvent.html#method-i-title_of","(what, &block)",""],["to_boolean","Fixnum","Fixnum.html#method-i-to_boolean","()",""],["to_boolean","String","String.html#method-i-to_boolean","()",""],["to_s","Feed","Feed.html#method-i-to_s","()",""],["to_s","SearchNode","SearchNode.html#method-i-to_s","(level=0)",""],["toggle","AdminController","AdminController.html#method-i-toggle","()",""],["token_input_div","TaggableHelper","TaggableHelper.html#method-i-token_input_div","(f, classname='edit_recipe_field', options={})",""],["token_input_element","TokenInputHelper","TokenInputHelper.html#method-i-token_input_element","(name, querytags=[], options={})",""],["token_input_field","TaggableHelper","TaggableHelper.html#method-i-token_input_field","(f, tags_attribute_name=nil, options={})","<p>Generalization of taggable_field for arbitrary attribute names (not just\n&#39;tags&#39;–the default), …\n"],["token_input_query","QueryHelper","QueryHelper.html#method-i-token_input_query","(options={})","<p>Define a query item using a tagging interface\n"],["token_input_tag","TokenInputHelper","TokenInputHelper.html#method-i-token_input_tag","(name, querytags=[], opt_params={})","<p>Provide a text field that will be used by tokeninput – name: the name and\nid that the text element will …\n"],["tools_menu","CardPresentation","CardPresentation.html#method-i-tools_menu","()",""],["tools_menu","CollectiblePresenter","CollectiblePresenter.html#method-i-tools_menu","()",""],["tools_menu","TagPresenter","TagPresenter.html#method-i-tools_menu","()",""],["touch","CollectibleController","CollectibleController.html#method-i-touch","()","<p>Register that the entity was touched by the current user. Since that entity\nwill now be at the head return …\n"],["touch","User","User.html#method-i-touch","(entity=nil, collect=false)","<p>Remember that the user has (recently) touched the entity, optionally adding\nit to the collection\n"],["touch_date","Collectible","Collectible.html#method-i-touch_date","(uid=nil)","<p>Present the time-since-touched in a text format\n"],["touch_date_class","ApplicationHelper","ApplicationHelper.html#method-i-touch_date_class","(recipe)","<p>Return the id of the DOM element giving the time-since-touched for a recipe\n"],["touch_date_elmt","ApplicationHelper","ApplicationHelper.html#method-i-touch_date_elmt","(entity)","<p>Present the date and time the recipe was last touched by its current user\n"],["touchpath","LinkHelper","LinkHelper.html#method-i-touchpath","(decorator, for_user=nil)",""],["translate_params_for","ModelDecorator","ModelDecorator.html#method-i-translate_params_for","(params, entity)","<p>Translate params for one class to those for another. NB: generally\nspeaking, only common parameters (e.g., …\n"],["trigger_event","RpEvent","RpEvent.html#method-c-trigger_event","(params)","<p>In response to a trigger in a URL, post an event\n"],["trigger_pending_modal","TriggersHelper","TriggersHelper.html#method-i-trigger_pending_modal","(delete_after=true)","<p>If there&#39;s a deferred request that can be expressed as a trigger, do so\nby inserting a trigger link …\n"],["trigger_pending_results","TriggersHelper","TriggersHelper.html#method-i-trigger_pending_results","(path, options={})",""],["triggered_form","FormsHelper","FormsHelper.html#method-i-triggered_form","( query, form_id= nil, &block )","<p>Declare a form which submits a JSON request, where the return is processed\nby RP.submit\n"],["trim_title","SiteServices","SiteServices.html#method-i-trim_title","(ttl)","<p>Doctor a scanned title coming in from a web page, according to the site\nparameters\n"],["try_mercury","PageRef","PageRef.html#method-i-try_mercury","(url)",""],["try_substitute","PageRefServices","PageRefServices.html#method-i-try_substitute","(old_ptn, subst)","\n<pre># Make sure the page_ref has a site\ndef ensure_site\n  page_ref.site ||= Site.find_or_create_for(page_ref.url) ...</pre>\n"],["type","ReferencesIndexCache","ReferencesIndexCache.html#method-i-type","()",""],["type","ReferentsIndexCache","ReferentsIndexCache.html#method-i-type","()",""],["type_selections","TagsHelper","TagsHelper.html#method-i-type_selections","(val=nil)","<p>Helper to define a selection menu for tag type\n"],["type_selections","Typeable::ClassMethods","Typeable/ClassMethods.html#method-i-type_selections","(withnull=false, withall=false)","<p>Return a list of name/type pairs, suitable for making a selection list\n"],["type_to_class","Referent","Referent.html#method-c-type_to_class","(type)",""],["type_to_class","RefermentServices","RefermentServices.html#method-i-type_to_class","(type)",""],["typeable","Typeable::ClassMethods","Typeable/ClassMethods.html#method-i-typeable","(attribute, list)",""],["typeclass","ReferencesIndexCache","ReferencesIndexCache.html#method-i-typeclass","()",""],["typeclass","ReferentsIndexCache","ReferentsIndexCache.html#method-i-typeclass","()",""],["typedname","Tag","Tag.html#method-i-typedname","(include_type=false, include_ref=false)","<p>Return the tag&#39;s name with a marker of its type, to clear up\nambiguities\n"],["typematch","Typeable","Typeable.html#method-i-typematch","(tt=nil)","<p>Is my tagtype the same as the given type(s) (given as string, symbol,\ninteger or array)\n"],["typename","FeedDecorator","FeedDecorator.html#method-i-typename","()",""],["typename","Referent","Referent.html#method-i-typename","()",""],["typename","Typeable","Typeable.html#method-i-typename","()","<p>Return the name for the type of self\n"],["typename","Typeable::ClassMethods","Typeable/ClassMethods.html#method-i-typename","(tt)","<p>Get the name for the type, taking any of the accepted datatypes\n"],["typenum","Referent","Referent.html#method-i-typenum","()",""],["typenum","Typeable","Typeable.html#method-i-typenum","()",""],["typenum","Typeable::ClassMethods","Typeable/ClassMethods.html#method-i-typenum","(tt)","<p>Get the type number, taking any of the accepted datatypes\n"],["typenum=","Tag","Tag.html#method-i-typenum-3D","(tt)",""],["typenum=","Typeable","Typeable.html#method-i-typenum-3D","(tt)",""],["typesym","Referent","Referent.html#method-i-typesym","()",""],["typesym","Typeable","Typeable.html#method-i-typesym","()","<p>Return the symbol for the type of self\n"],["typesym","Typeable::ClassMethods","Typeable/ClassMethods.html#method-i-typesym","(tt)","<p>Get the symbol for the type, taking any of the accepted datatypes\n"],["typify","TagsController","TagsController.html#method-i-typify","()","<p>GET /typify move the listed keys from one type to another\n"],["uid=","Collectible","Collectible.html#method-i-uid-3D","(uid)","<p>Prepare for editing the model by setting the collectible attributes\n"],["uid=","Taggable","Taggable.html#method-i-uid-3D","(user_id)","<p>Define an editable field of taggings by the current user on the entity\n"],["uncapitalize","String","String.html#method-i-uncapitalize","()",""],["uncollect","Rcpref","Rcpref.html#method-i-uncollect","()",""],["uncollect","User","User.html#method-i-uncollect","(entity)",""],["unsubscribe","UsersController","UsersController.html#method-i-unsubscribe","()","<p>Turn off newsletter subscription\n"],["update","AnswersController","AnswersController.html#method-i-update","()","<p>PATCH/PUT /answers/1\n"],["update","CollectibleController","CollectibleController.html#method-i-update","()",""],["update","EditionsController","EditionsController.html#method-i-update","()","<p>PATCH/PUT /editions/1\n"],["update","ExpressionsController","ExpressionsController.html#method-i-update","()","<p>PUT /expressions/1 PUT /expressions/1.json\n"],["update","InvitationsController","InvitationsController.html#method-i-update","()","<p>PUT /resource/invitation\n"],["update","ListsController","ListsController.html#method-i-update","()",""],["update","PasswordsController","PasswordsController.html#method-i-update","()",""],["update","RatingsController","RatingsController.html#method-i-update","()","<p>PUT /ratings/1 PUT /ratings/1.xml\n"],["update","ReferencesController","ReferencesController.html#method-i-update","()","<p>PUT /references/1 PUT /references/1.json\n"],["update","ReferentsController","ReferentsController.html#method-i-update","()","<p>PUT /referents/1 PUT /referents/1.json\n"],["update","RefermentsController","RefermentsController.html#method-i-update","()",""],["update","RegistrationsController","RegistrationsController.html#method-i-update","()","<p>PUT /resource We need to use a copy of the resource because we don&#39;t\nwant to change the current user …\n"],["update","RpEventsController","RpEventsController.html#method-i-update","()",""],["update","ScalesController","ScalesController.html#method-i-update","()","<p>PUT /scales/1 PUT /scales/1.xml\n"],["update","SitesController","SitesController.html#method-i-update","()","<p>PUT /sites/1 PUT /sites/1.json\n"],["update","SuggestionsController","SuggestionsController.html#method-i-update","()","<p>PATCH/PUT /suggestions/1\n"],["update","TagSelectionsController","TagSelectionsController.html#method-i-update","()",""],["update","TagsController","TagsController.html#method-i-update","()","<p>PUT /tags/1 PUT /tags/1.xml\n"],["update","TagsetsController","TagsetsController.html#method-i-update","()","<p>PATCH/PUT /tagsets/1\n"],["update","UsersController","UsersController.html#method-i-update","()",""],["update","VotesController","VotesController.html#method-i-update","()","<p>PATCH/PUT /votes/1\n"],["update_and_decorate","ApplicationController","ApplicationController.html#method-i-update_and_decorate","(entity=nil, options={})","<p>Set up a model for editing or rendering. The parameters are orthogonal: If\nentity is nil, it is either …\n"],["update_attributes","Referent","Referent.html#method-i-update_attributes","(*params)",""],["update_from_feed","FeedEntry","FeedEntry.html#method-c-update_from_feed","(feed)",""],["update_from_feed_continuously","FeedEntry","FeedEntry.html#method-c-update_from_feed_continuously","(feed, delay_interval = 1.day)",""],["update_now","Feed","Feed.html#method-c-update_now","()","<p>Check all feeds that are approved for feed-through for updates\n"],["uploader_data","UploaderHelper","UploaderHelper.html#method-i-uploader_data","(decorator, pic_field_description='avatar')",""],["uploader_field","UploaderHelper","UploaderHelper.html#method-i-uploader_field","(decorator, options={})",""],["upvotes","Voteable","Voteable.html#method-i-upvotes","()",""],["uri","Scraper","Scraper.html#method-i-uri","()",""],["url","ListDecorator","ListDecorator.html#method-i-url","()",""],["url","SiteDecorator","SiteDecorator.html#method-i-url","()",""],["url=","SiteDecorator","SiteDecorator.html#method-i-url-3D","(url)",""],["url_attribute","Pagerefable","Pagerefable.html#method-i-url_attribute","()",""],["url_path_query","PageRef","PageRef.html#method-c-url_path_query","(urlpath)","<p>Use arel to generate a query (suitable for #where or #find_by) to match the\nurl path\n"],["url_query","PageRef","PageRef.html#method-c-url_query","(url)","<p>Use arel to generate a query (suitable for #where or #find_by) to match the\nurl\n"],["user","ResponseServices","ResponseServices.html#method-i-user","()",""],["user","UserFunc","UserFunc.html#method-i-user","()",""],["user_can?","ModelDecorator","ModelDecorator.html#method-i-user_can-3F","(what)","<p>Check permissions for current user to access controller method\n"],["user_can?","UserDecorator","UserDecorator.html#method-i-user_can-3F","(what)","<p>Check permissions for current user to access controller method\n"],["user_follow_button","UsersHelper","UsersHelper.html#method-i-user_follow_button","(user, size = nil, options={})","<p>Present the &#39;follow&#39; status of a user wrt the current user options\nshould be a boolean for whether …\n"],["user_follow_button_replacement","UsersHelper","UsersHelper.html#method-i-user_follow_button_replacement","(user, options={})",""],["user_follower_count","UsersHelper","UsersHelper.html#method-i-user_follower_count","(decorator)",""],["user_reference","Articulator","Articulator.html#method-i-user_reference","(user, possessive = false)","<p>How to name a user, substituting &#39;you&#39; when the viewer and the user\nare the same, optionally …\n"],["user_stats","RpEvent","RpEvent.html#method-c-user_stats","(user, interval)","<p>Return a hash of aggregate_user_table for the user\n"],["user_subclass","UsersHelper","UsersHelper.html#method-i-user_subclass","(user)",""],["user_to_user","RpMailer","RpMailer.html#method-i-user_to_user","(from, to)",""],["valid?","OrgOptions","OrgOptions.html#method-i-valid-3F","(val)","<p>Is the given value among the allowed values?\n"],["valid_range","Partition","Partition.html#method-i-valid_range","(r)","<p>Clip the given range to valid cells, with an appropriate maximum size\n"],["valid_url","Object","Object.html#method-i-valid_url","(path, url, strong=true)","<p>Try to make sense out of a given path in the context of another url. If\nstrong is true, ping the server …\n"],["validate","ExpressionValidator","ExpressionValidator.html#method-i-validate","(record)",""],["validate","ReferentRelationValidator","ReferentRelationValidator.html#method-i-validate","(record)",""],["validate","ReferentValidator","ReferentValidator.html#method-i-validate","(record)",""],["validate","UserRelationValidator","UserRelationValidator.html#method-i-validate","(record)",""],["validate_link","Object","Object.html#method-i-validate_link","(link, protocols=nil)",""],["validate_token","PasswordsController","PasswordsController.html#method-i-validate_token","(original_token)","<p>before_filter { @_area = params || “” }\n"],["value_as_text","Rating","Rating.html#method-i-value_as_text","()","<p>Interpret the value of the rating\n"],["value_as_text","Scale","Scale.html#method-i-value_as_text","(val)",""],["verb","Articulator","Articulator.html#method-i-verb","()","<p>Override the verb for a coherent expression\n"],["verb","InvitationAcceptedEventArticulator","InvitationAcceptedEventArticulator.html#method-i-verb","()",""],["verb","InvitationSentEventCreateArticulator","InvitationSentEventCreateArticulator.html#method-i-verb","()",""],["verb","SharedEventCreateArticulator","SharedEventCreateArticulator.html#method-i-verb","()",""],["verify","AuthenticationsController","AuthenticationsController.html#method-i-verify","()","<p>Get a new authentication (==login) for a specific user\n"],["video_embed","ImagesHelper","ImagesHelper.html#method-i-video_embed","(vidlink)",""],["viewer","ResultsCache","ResultsCache.html#method-i-viewer","()","<p>Memoize the viewing user\n"],["virgin!","Backgroundable","Backgroundable.html#method-i-virgin-21","()","<p>These overrides provide for setting status before a backgroundable has been\nsaved\n"],["visible_lists","ListServices","ListServices.html#method-c-visible_lists","(viewer, with_owned=false)",""],["visible_tags","Taggable","Taggable.html#method-i-visible_tags","(user_id = nil, options={})","<p>Allow the given user to see tags applied by themselves and super\n"],["visible_tags_of_kind","ReferentDecorator","ReferentDecorator.html#method-i-visible_tags_of_kind","(kind, viewer=nil)","<p>Return a list of tags and a label for the collection TODO: these should be\nthe tags visible to the given …\n"],["votable_from_card?","CardPresentation","CardPresentation.html#method-i-votable_from_card-3F","()",""],["votable_from_card?","CollectiblePresenter","CollectiblePresenter.html#method-i-votable_from_card-3F","()",""],["votable_from_card?","UserPresenter","UserPresenter.html#method-i-votable_from_card-3F","()",""],["vote","User","User.html#method-i-vote","(entity, up=true)",""],["vote","Vote","Vote.html#method-c-vote","(entity, up, user)","<p>NB: A voted-on entity can access its voters with\n"],["vote_buttons","CardPresentation","CardPresentation.html#method-i-vote_buttons","()",""],["vote_buttons","CollectiblePresenter","CollectiblePresenter.html#method-i-vote_buttons","()",""],["vote_buttons_replacement","CollectibleHelper","CollectibleHelper.html#method-i-vote_buttons_replacement","(entity)",""],["vote_link","VotesHelper","VotesHelper.html#method-i-vote_link","(entity, up, options={})","<p>Link to submit a vote on the given entity. &#39;up&#39; is true for an\nupvote\n"],["vote_params","VotesHelper","VotesHelper.html#method-i-vote_params","(entity, up)",""],["what","Finder","Finder.html#method-i-what","()",""],["wikipedia_cookbook_ingredients","En_wikibooks_org_Scraper","En_wikibooks_org_Scraper.html#method-i-wikipedia_cookbook_ingredients","()",""],["window=","Partition","Partition.html#method-i-window-3D","(r)","<p>Set the current window on the partition, confining it to an existing\npartition\n"],["window=","ResultsCache","ResultsCache.html#method-i-window-3D","(arr)","<p>Set the current window of attention. Requires start as first parameter;\nsecond parameter for limit is …\n"],["windowsize","Partition","Partition.html#method-i-windowsize","()",""],["with_article","String","String.html#method-i-with_article","()",""],["with_format","ControllerUtils","ControllerUtils.html#method-i-with_format","(format, &block)",""],["with_subroot_of","Site","Site.html#method-c-with_subroot_of","(root)",""],["write","Reloader::SSE","Reloader/SSE.html#method-i-write","(event_type_or_option, options = {})",""],["yumm","TagServices","TagServices.html#method-c-yumm","()","<p>Study the Yummly dataset for correspondence with RecipePower&#39;s\n"],["README","","README_rdoc.html","","<p>Welcome to Rails\n<p>Rails is a web-application framework that includes everything needed to\ncreate database-backed …\n"]]}}